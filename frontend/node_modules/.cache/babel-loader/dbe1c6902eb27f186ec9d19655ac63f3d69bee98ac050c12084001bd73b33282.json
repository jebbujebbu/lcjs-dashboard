{"ast":null,"code":"var _jsxFileName = \"D:\\\\Repos\\\\lcjs-dashboard\\\\frontend\\\\src\\\\components\\\\MultiChart.jsx\",\n  _s = $RefreshSig$();\nimport { Themes, AxisScrollStrategies, AxisTickStrategies, emptyLine, UILayoutBuilders } from \"@lightningchart/lcjs\";\nimport { useEffect, useState, useContext, useId } from \"react\";\nimport { LCContext } from \"../LC\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MultiChart(props) {\n  _s();\n  const heartRate = props.data.heart_rate;\n  const steps = props.steps;\n  const calories = props.data.calories;\n  const titles = [\"Heart Rate\", \"Steps/Min\", \"Kcal/Min\"];\n  const id = useId();\n  const lc = useContext(LCContext);\n  const [charts, setCharts] = useState([]);\n  const [gauges, setGauges] = useState([]);\n  useEffect(() => {\n    const container = document.getElementById(id);\n    if (!container) return;\n    if (!lc) {\n      console.log(\"LC context not ready yet\");\n      return;\n    }\n\n    // --- Create dashboard with row layout ---\n    const dashboard = lc.Dashboard({\n      container,\n      theme: Themes.cyberSpace\n    });\n\n    // Create layout: gauges on the left, line chart on the right\n    const rowLayout = dashboard.createLayout(UILayoutBuilders.Row);\n\n    // Left column for gauges\n    const gaugeCol = rowLayout.createLayout(UILayoutBuilders.Column).setSize({\n      width: 0.25\n    }); // 25%\n    // Right area for XY line chart\n    const chartArea = rowLayout.createLayout(UILayoutBuilders.Column).setSize({\n      width: 0.75\n    }); // 75%\n\n    const gaugeArray = [];\n    titles.forEach(title => {\n      const gauge = gaugeCol.createGaugeChart({\n        theme: Themes.cyberSpace\n      }).setUnitLabel(title).setInterval(0, 100).setAngleInterval(180, 0).setRoundedEdges(false).setBarThickness(20).setNeedleLength(20).setNeedleThickness(5).setValueIndicatorThickness(10).setGapBetweenBarAndValueIndicators(1);\n      gaugeArray.push(gauge);\n    });\n\n    // --- Create XY chart for line series ---\n    const xyChart = chartArea.createChartXY({\n      theme: Themes.cyberSpace,\n      defaultAxisX: {\n        tickStrategy: AxisTickStrategies.Empty,\n        strokeStyle: emptyLine,\n        scrollStrategy: AxisScrollStrategies.scrolling\n      }\n    }).setTitle(\"\");\n    const lineSeriesArray = [];\n    for (let i = 0; i < 3; i++) {\n      const axisY = xyChart.addAxisY({\n        iStack: 3 - i\n      }).setMargins(5, 5).setInterval({\n        start: 0,\n        end: 100\n      });\n      const series = xyChart.addLineSeries({\n        axisY\n      }).setMaxSampleCount(10000);\n      lineSeriesArray.push(series);\n    }\n    setCharts(lineSeriesArray);\n    setGauges(gaugeArray);\n    return () => {\n      dashboard.dispose();\n    };\n  }, [id, lc]);\n\n  // Update line series data\n  useEffect(() => {\n    if (!charts.length) return;\n    charts[0].axisY.setInterval({\n      start: 20,\n      end: 150\n    });\n    charts[0].appendJSON({\n      x: performance.now(),\n      y: heartRate\n    });\n    charts[1].axisY.setInterval({\n      start: 0,\n      end: 150\n    });\n    charts[1].appendJSON({\n      x: performance.now(),\n      y: steps\n    });\n    charts[2].axisY.setInterval({\n      start: 0,\n      end: 15\n    });\n    charts[2].appendJSON({\n      x: performance.now(),\n      y: calories\n    });\n  }, [charts, heartRate, steps, calories]);\n\n  // Update gauge values\n  useEffect(() => {\n    if (!gauges.length) return;\n    gauges[0].setValue(heartRate);\n    gauges[1].setValue(steps);\n    gauges[2].setValue(calories);\n  }, [gauges, heartRate, steps, calories]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: id,\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 12\n  }, this);\n}\n_s(MultiChart, \"2scTxJpW3tFfVHmWU8gyAj53Hqw=\", false, function () {\n  return [useId];\n});\n_c = MultiChart;\nvar _c;\n$RefreshReg$(_c, \"MultiChart\");","map":{"version":3,"names":["Themes","AxisScrollStrategies","AxisTickStrategies","emptyLine","UILayoutBuilders","useEffect","useState","useContext","useId","LCContext","jsxDEV","_jsxDEV","MultiChart","props","_s","heartRate","data","heart_rate","steps","calories","titles","id","lc","charts","setCharts","gauges","setGauges","container","document","getElementById","console","log","dashboard","Dashboard","theme","cyberSpace","rowLayout","createLayout","Row","gaugeCol","Column","setSize","width","chartArea","gaugeArray","forEach","title","gauge","createGaugeChart","setUnitLabel","setInterval","setAngleInterval","setRoundedEdges","setBarThickness","setNeedleLength","setNeedleThickness","setValueIndicatorThickness","setGapBetweenBarAndValueIndicators","push","xyChart","createChartXY","defaultAxisX","tickStrategy","Empty","strokeStyle","scrollStrategy","scrolling","setTitle","lineSeriesArray","i","axisY","addAxisY","iStack","setMargins","start","end","series","addLineSeries","setMaxSampleCount","dispose","length","appendJSON","x","performance","now","y","setValue","style","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Repos/lcjs-dashboard/frontend/src/components/MultiChart.jsx"],"sourcesContent":["import { Themes, AxisScrollStrategies, AxisTickStrategies, emptyLine, UILayoutBuilders } from \"@lightningchart/lcjs\"\r\nimport { useEffect, useState, useContext, useId } from \"react\"\r\nimport { LCContext } from \"../LC\"\r\n\r\nexport default function MultiChart(props) {\r\n    const heartRate = props.data.heart_rate\r\n    const steps = props.steps\r\n    const calories = props.data.calories\r\n    const titles = [\"Heart Rate\", \"Steps/Min\", \"Kcal/Min\"]\r\n\r\n    const id = useId()\r\n    const lc = useContext(LCContext)\r\n    const [charts, setCharts] = useState([])\r\n    const [gauges, setGauges] = useState([])\r\n\r\n    useEffect(() => {\r\n        const container = document.getElementById(id)\r\n        if (!container) return\r\n        if (!lc) {\r\n            console.log(\"LC context not ready yet\")\r\n            return\r\n        }\r\n\r\n        // --- Create dashboard with row layout ---\r\n        const dashboard = lc.Dashboard({\r\n            container,\r\n            theme: Themes.cyberSpace,\r\n        })\r\n\r\n        // Create layout: gauges on the left, line chart on the right\r\n        const rowLayout = dashboard.createLayout(UILayoutBuilders.Row)\r\n\r\n        // Left column for gauges\r\n        const gaugeCol = rowLayout.createLayout(UILayoutBuilders.Column).setSize({ width: 0.25 }) // 25%\r\n        // Right area for XY line chart\r\n        const chartArea = rowLayout.createLayout(UILayoutBuilders.Column).setSize({ width: 0.75 }) // 75%\r\n\r\n        const gaugeArray = []\r\n        titles.forEach((title) => {\r\n            const gauge = gaugeCol.createGaugeChart({ theme: Themes.cyberSpace })\r\n                .setUnitLabel(title)\r\n                .setInterval(0, 100)\r\n                .setAngleInterval(180, 0)\r\n                .setRoundedEdges(false)\r\n                .setBarThickness(20)\r\n                .setNeedleLength(20)\r\n                .setNeedleThickness(5)\r\n                .setValueIndicatorThickness(10)\r\n                .setGapBetweenBarAndValueIndicators(1)\r\n            gaugeArray.push(gauge)\r\n        })\r\n\r\n        // --- Create XY chart for line series ---\r\n        const xyChart = chartArea.createChartXY({\r\n            theme: Themes.cyberSpace,\r\n            defaultAxisX: {\r\n                tickStrategy: AxisTickStrategies.Empty,\r\n                strokeStyle: emptyLine,\r\n                scrollStrategy: AxisScrollStrategies.scrolling,\r\n            },\r\n        }).setTitle(\"\")\r\n\r\n        const lineSeriesArray = []\r\n        for (let i = 0; i < 3; i++) {\r\n            const axisY = xyChart.addAxisY({ iStack: 3 - i })\r\n                .setMargins(5, 5)\r\n                .setInterval({ start: 0, end: 100 })\r\n            const series = xyChart.addLineSeries({ axisY }).setMaxSampleCount(10_000)\r\n            lineSeriesArray.push(series)\r\n        }\r\n\r\n        setCharts(lineSeriesArray)\r\n        setGauges(gaugeArray)\r\n\r\n        return () => {\r\n            dashboard.dispose()\r\n        }\r\n    }, [id, lc])\r\n\r\n    // Update line series data\r\n    useEffect(() => {\r\n        if (!charts.length) return\r\n        charts[0].axisY.setInterval({ start: 20, end: 150 })\r\n        charts[0].appendJSON({ x: performance.now(), y: heartRate })\r\n        charts[1].axisY.setInterval({ start: 0, end: 150 })\r\n        charts[1].appendJSON({ x: performance.now(), y: steps })\r\n        charts[2].axisY.setInterval({ start: 0, end: 15 })\r\n        charts[2].appendJSON({ x: performance.now(), y: calories })\r\n    }, [charts, heartRate, steps, calories])\r\n\r\n    // Update gauge values\r\n    useEffect(() => {\r\n        if (!gauges.length) return\r\n        gauges[0].setValue(heartRate)\r\n        gauges[1].setValue(steps)\r\n        gauges[2].setValue(calories)\r\n    }, [gauges, heartRate, steps, calories])\r\n\r\n    return <div id={id} style={{ width: \"100%\", height: \"100%\" }}></div>\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}