{"ast":null,"code":"import calcActivityScore from './calcActivityScore.js';\nimport calcSleepAverages from './calcSleepAverages.js';\nimport calcWellnessIndex from './calcWellnessIndex.js';\nimport getLast7Nights from './getLast7Nights.js';\nexport default function getInitialData(minuteSeries, hourSeries, daySeries, sleepSeries) {\n  var _lastSleep$sleep;\n  const lastDate = \"2022-01-21\";\n\n  // Sleep data (from daySeries)\n  const lastSleep = daySeries.find(day => day.date === lastDate);\n  const currentStages = (lastSleep === null || lastSleep === void 0 ? void 0 : (_lastSleep$sleep = lastSleep.sleep) === null || _lastSleep$sleep === void 0 ? void 0 : _lastSleep$sleep.levels) || [];\n\n  // Last 7 nights of sleep\n  const lastDayDate = new Date(lastDate + 'T00:00:00Z');\n  const sevenDaysAgo = new Date(lastDayDate.getTime() - 6 * 24 * 60 * 60 * 1000);\n  const last7Nights = getLast7Nights(sleepSeries, currentTime);\n  // // const last7Nights = (sleepSeries || []).filter(day => {\n  // //   const d = new Date(day.date + 'T00:00:00Z');\n  // //   return d >= sevenDaysAgo && d <= lastDayDate && day.sleep;\n  // // });\n\n  // console.log(\"getInitialData: lastDate:\", lastDate);\n  // console.log(\"getInitialData: sevenDaysAgo:\", sevenDaysAgo.toISOString());\n  // console.log(\"getInitialData: lastDayDate:\", lastDayDate.toISOString());\n  // console.log(\"getInitialData: sleepSeries.length:\", sleepSeries?.length);\n  // console.log(\"getInitialData: first few sleepSeries dates:\", sleepSeries?.slice(0, 5).map(s => s.date));\n  // console.log(\"getInitialData: last few sleepSeries dates:\", sleepSeries?.slice(-5).map(s => s.date));\n  // console.log(\"getInitialData: last7Nights.length:\", last7Nights.length);\n\n  const avgStages = calcSleepAverages(last7Nights);\n\n  // ---- Activity data (from daySeries + minuteSeries) ----\n  const last7Days = daySeries.filter(day => {\n    const d = new Date(day.date + 'T00:00:00Z');\n    return d >= sevenDaysAgo && d <= lastDayDate;\n  });\n  const last7DaysMinuteData = minuteSeries.filter(record => {\n    const recordDate = record.timestamp.split('T')[0];\n    return last7Days.some(day => day.date === recordDate);\n  });\n  const dailyHourlyTotals = {};\n  last7DaysMinuteData.forEach(record => {\n    const day = record.timestamp.split('T')[0];\n    const hour = parseInt(record.timestamp.slice(11, 13));\n    if (!dailyHourlyTotals[day]) dailyHourlyTotals[day] = {};\n    if (!dailyHourlyTotals[day][hour]) dailyHourlyTotals[day][hour] = {\n      calories: 0,\n      steps: 0\n    };\n    dailyHourlyTotals[day][hour].calories += record.calories || 0;\n    dailyHourlyTotals[day][hour].steps += record.steps || 0;\n  });\n  const activity = Object.entries(dailyHourlyTotals).sort(([a], [b]) => a.localeCompare(b)).map(([date, hourlyTotals]) => {\n    const hourlyScores = {\n      low: 0,\n      medium: 0,\n      high: 0\n    };\n    const totalHours = Object.keys(hourlyTotals).length;\n    Object.values(hourlyTotals).forEach(hourData => {\n      const score = calcActivityScore(hourData.calories, hourData.steps);\n      hourlyScores[score]++;\n    });\n    return {\n      date,\n      low: Math.round(hourlyScores.low / totalHours * 100),\n      medium: Math.round(hourlyScores.medium / totalHours * 100),\n      high: Math.round(hourlyScores.high / totalHours * 100),\n      totalHours\n    };\n  });\n\n  // ---- Wellness index ----\n  const lastDayMinuteData = minuteSeries.filter(record => (record === null || record === void 0 ? void 0 : record.timestamp) && record.timestamp.startsWith(lastDate));\n  const lastDayHourData = hourSeries.filter(record => (record === null || record === void 0 ? void 0 : record.timestamp) && record.timestamp.startsWith(lastDate));\n  const wellness = calcWellnessIndex(lastDayMinuteData, currentStages, lastDayHourData);\n  return {\n    currentStages,\n    avgStages,\n    activity,\n    wellness\n  };\n}","map":{"version":3,"names":["calcActivityScore","calcSleepAverages","calcWellnessIndex","getLast7Nights","getInitialData","minuteSeries","hourSeries","daySeries","sleepSeries","_lastSleep$sleep","lastDate","lastSleep","find","day","date","currentStages","sleep","levels","lastDayDate","Date","sevenDaysAgo","getTime","last7Nights","currentTime","avgStages","last7Days","filter","d","last7DaysMinuteData","record","recordDate","timestamp","split","some","dailyHourlyTotals","forEach","hour","parseInt","slice","calories","steps","activity","Object","entries","sort","a","b","localeCompare","map","hourlyTotals","hourlyScores","low","medium","high","totalHours","keys","length","values","hourData","score","Math","round","lastDayMinuteData","startsWith","lastDayHourData","wellness"],"sources":["C:/Users/jenni.mikkonen/OneDrive - LightningChart Ltd/Repos/lcjs-dashboard/frontend/src/utils/getInitialData.js"],"sourcesContent":["import calcActivityScore from './calcActivityScore.js';\r\nimport calcSleepAverages from './calcSleepAverages.js';\r\nimport calcWellnessIndex from './calcWellnessIndex.js';\r\nimport getLast7Nights from './getLast7Nights.js'\r\n\r\nexport default function getInitialData(minuteSeries, hourSeries, daySeries, sleepSeries) {\r\n  const lastDate = \"2022-01-21\";\r\n\r\n  // Sleep data (from daySeries)\r\n  const lastSleep = daySeries.find(day => day.date === lastDate);\r\n  const currentStages = lastSleep?.sleep?.levels || [];\r\n\r\n  // Last 7 nights of sleep\r\n  const lastDayDate = new Date(lastDate + 'T00:00:00Z');\r\n  const sevenDaysAgo = new Date(lastDayDate.getTime() - (6 * 24 * 60 * 60 * 1000));\r\n\r\n  const last7Nights = getLast7Nights(sleepSeries, currentTime)\r\n  // // const last7Nights = (sleepSeries || []).filter(day => {\r\n  // //   const d = new Date(day.date + 'T00:00:00Z');\r\n  // //   return d >= sevenDaysAgo && d <= lastDayDate && day.sleep;\r\n  // // });\r\n\r\n  // console.log(\"getInitialData: lastDate:\", lastDate);\r\n  // console.log(\"getInitialData: sevenDaysAgo:\", sevenDaysAgo.toISOString());\r\n  // console.log(\"getInitialData: lastDayDate:\", lastDayDate.toISOString());\r\n  // console.log(\"getInitialData: sleepSeries.length:\", sleepSeries?.length);\r\n  // console.log(\"getInitialData: first few sleepSeries dates:\", sleepSeries?.slice(0, 5).map(s => s.date));\r\n  // console.log(\"getInitialData: last few sleepSeries dates:\", sleepSeries?.slice(-5).map(s => s.date));\r\n  // console.log(\"getInitialData: last7Nights.length:\", last7Nights.length);\r\n\r\n  const avgStages = calcSleepAverages(last7Nights);\r\n\r\n  // ---- Activity data (from daySeries + minuteSeries) ----\r\n  const last7Days = daySeries.filter(day => {\r\n    const d = new Date(day.date + 'T00:00:00Z');\r\n    return d >= sevenDaysAgo && d <= lastDayDate;\r\n  });\r\n\r\n  const last7DaysMinuteData = minuteSeries.filter(record => {\r\n    const recordDate = record.timestamp.split('T')[0];\r\n    return last7Days.some(day => day.date === recordDate);\r\n  });\r\n\r\n  const dailyHourlyTotals = {};\r\n  last7DaysMinuteData.forEach(record => {\r\n    const day = record.timestamp.split('T')[0];\r\n    const hour = parseInt(record.timestamp.slice(11, 13));\r\n\r\n    if (!dailyHourlyTotals[day]) dailyHourlyTotals[day] = {};\r\n    if (!dailyHourlyTotals[day][hour]) dailyHourlyTotals[day][hour] = { calories: 0, steps: 0 };\r\n\r\n    dailyHourlyTotals[day][hour].calories += record.calories || 0;\r\n    dailyHourlyTotals[day][hour].steps += record.steps || 0;\r\n  });\r\n\r\n  const activity = Object.entries(dailyHourlyTotals)\r\n    .sort(([a], [b]) => a.localeCompare(b))\r\n    .map(([date, hourlyTotals]) => {\r\n      const hourlyScores = { low: 0, medium: 0, high: 0 };\r\n      const totalHours = Object.keys(hourlyTotals).length;\r\n\r\n      Object.values(hourlyTotals).forEach(hourData => {\r\n        const score = calcActivityScore(hourData.calories, hourData.steps);\r\n        hourlyScores[score]++;\r\n      });\r\n\r\n      return {\r\n        date,\r\n        low: Math.round((hourlyScores.low / totalHours) * 100),\r\n        medium: Math.round((hourlyScores.medium / totalHours) * 100),\r\n        high: Math.round((hourlyScores.high / totalHours) * 100),\r\n        totalHours\r\n      };\r\n    });\r\n\r\n  // ---- Wellness index ----\r\n  const lastDayMinuteData = minuteSeries.filter(record =>\r\n    record?.timestamp && record.timestamp.startsWith(lastDate)\r\n  );\r\n  const lastDayHourData = hourSeries.filter(record =>\r\n    record?.timestamp && record.timestamp.startsWith(lastDate)\r\n  );\r\n\r\n  const wellness = calcWellnessIndex(\r\n    lastDayMinuteData,\r\n    currentStages,\r\n    lastDayHourData\r\n  );\r\n\r\n  return {\r\n    currentStages,\r\n    avgStages,\r\n    activity,\r\n    wellness\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}