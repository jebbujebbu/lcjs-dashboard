{"ast":null,"code":"// Helper function to calculate wellness index scores\nexport default function calcWellnessIndex(dayData, sleepData, hourData) {\n  var _sleepData$deep, _sleepData$rem;\n  // Sleep quality (0-100), based on sleep efficiency and stages\n  const sleepQuality = sleepData ? Math.min(100, (((_sleepData$deep = sleepData.deep) === null || _sleepData$deep === void 0 ? void 0 : _sleepData$deep.minutes) || 0) * 0.5 + (((_sleepData$rem = sleepData.rem) === null || _sleepData$rem === void 0 ? void 0 : _sleepData$rem.minutes) || 0) * 0.6) : 0;\n\n  // Heart Rate (0-100), based on average heart rate vs target (lower is better for resting)\n  const avgHeartRate = dayData ? dayData.reduce((sum, record) => sum + (record.heart_rate || 70), 0) / dayData.length : 70;\n  const heartRateScore = Math.max(0, Math.min(100, 100 - (avgHeartRate - 60) * 2));\n\n  // Stress Level (0-100), based on average daily stress (lower is better)\n  const avgStress = hourData ? hourData.reduce((sum, record) => sum + (record.stress || 50), 0) / hourData.length : 50;\n  const stressScore = Math.max(0, Math.min(100, 100 - avgStress));\n\n  // Activity (0-100), based on steps and calories\n  const totalSteps = dayData ? dayData.reduce((sum, record) => sum + (record.steps || 0), 0) : 0;\n  const activityScore = Math.min(100, totalSteps / 25000 * 100); // 25k steps = 100%\n\n  return {\n    sleepQuality: Math.round(sleepQuality),\n    heartRate: Math.round(heartRateScore),\n    stressLevel: Math.round(stressScore),\n    activity: Math.round(activityScore)\n  };\n}\n;","map":{"version":3,"names":["calcWellnessIndex","dayData","sleepData","hourData","_sleepData$deep","_sleepData$rem","sleepQuality","Math","min","deep","minutes","rem","avgHeartRate","reduce","sum","record","heart_rate","length","heartRateScore","max","avgStress","stress","stressScore","totalSteps","steps","activityScore","round","heartRate","stressLevel","activity"],"sources":["D:/Repos/lcjs-dashboard/frontend/src/utils/calcWellnessIndex.js"],"sourcesContent":["// Helper function to calculate wellness index scores\r\nexport default function calcWellnessIndex(dayData, sleepData, hourData) {\r\n  // Sleep quality (0-100), based on sleep efficiency and stages\r\n  const sleepQuality = sleepData ?\r\n    Math.min(100, (sleepData.deep?.minutes || 0) * 0.5 + (sleepData.rem?.minutes || 0) * 0.6) : 0;\r\n\r\n  // Heart Rate (0-100), based on average heart rate vs target (lower is better for resting)\r\n  const avgHeartRate = dayData ? \r\n    (dayData.reduce((sum, record) => sum + (record.heart_rate || 70), 0) / dayData.length) : 70;\r\n    const heartRateScore = Math.max(0, Math.min(100, 100 - (avgHeartRate - 60) * 2));\r\n\r\n  // Stress Level (0-100), based on average daily stress (lower is better)\r\n  const avgStress = hourData ? \r\n    (hourData.reduce((sum, record) => sum + (record.stress || 50), 0) / hourData.length) : 50;\r\n  const stressScore = Math.max(0, Math.min(100, 100 - avgStress));\r\n\r\n  // Activity (0-100), based on steps and calories\r\n  const totalSteps = dayData ? \r\n    dayData.reduce((sum, record) => sum + (record.steps || 0), 0) : 0;\r\n  const activityScore = Math.min(100, (totalSteps / 25000) * 100); // 25k steps = 100%\r\n  \r\n  return {\r\n    sleepQuality: Math.round(sleepQuality),\r\n    heartRate: Math.round(heartRateScore),\r\n    stressLevel: Math.round(stressScore),\r\n    activity: Math.round(activityScore)\r\n  };\r\n};"],"mappings":"AAAA;AACA,eAAe,SAASA,iBAAiBA,CAACC,OAAO,EAAEC,SAAS,EAAEC,QAAQ,EAAE;EAAA,IAAAC,eAAA,EAAAC,cAAA;EACtE;EACA,MAAMC,YAAY,GAAGJ,SAAS,GAC5BK,IAAI,CAACC,GAAG,CAAC,GAAG,EAAE,CAAC,EAAAJ,eAAA,GAAAF,SAAS,CAACO,IAAI,cAAAL,eAAA,uBAAdA,eAAA,CAAgBM,OAAO,KAAI,CAAC,IAAI,GAAG,GAAG,CAAC,EAAAL,cAAA,GAAAH,SAAS,CAACS,GAAG,cAAAN,cAAA,uBAAbA,cAAA,CAAeK,OAAO,KAAI,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC;;EAE/F;EACA,MAAME,YAAY,GAAGX,OAAO,GACzBA,OAAO,CAACY,MAAM,CAAC,CAACC,GAAG,EAAEC,MAAM,KAAKD,GAAG,IAAIC,MAAM,CAACC,UAAU,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,GAAGf,OAAO,CAACgB,MAAM,GAAI,EAAE;EAC3F,MAAMC,cAAc,GAAGX,IAAI,CAACY,GAAG,CAAC,CAAC,EAAEZ,IAAI,CAACC,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,CAACI,YAAY,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;;EAElF;EACA,MAAMQ,SAAS,GAAGjB,QAAQ,GACvBA,QAAQ,CAACU,MAAM,CAAC,CAACC,GAAG,EAAEC,MAAM,KAAKD,GAAG,IAAIC,MAAM,CAACM,MAAM,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,GAAGlB,QAAQ,CAACc,MAAM,GAAI,EAAE;EAC3F,MAAMK,WAAW,GAAGf,IAAI,CAACY,GAAG,CAAC,CAAC,EAAEZ,IAAI,CAACC,GAAG,CAAC,GAAG,EAAE,GAAG,GAAGY,SAAS,CAAC,CAAC;;EAE/D;EACA,MAAMG,UAAU,GAAGtB,OAAO,GACxBA,OAAO,CAACY,MAAM,CAAC,CAACC,GAAG,EAAEC,MAAM,KAAKD,GAAG,IAAIC,MAAM,CAACS,KAAK,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC;EACnE,MAAMC,aAAa,GAAGlB,IAAI,CAACC,GAAG,CAAC,GAAG,EAAGe,UAAU,GAAG,KAAK,GAAI,GAAG,CAAC,CAAC,CAAC;;EAEjE,OAAO;IACLjB,YAAY,EAAEC,IAAI,CAACmB,KAAK,CAACpB,YAAY,CAAC;IACtCqB,SAAS,EAAEpB,IAAI,CAACmB,KAAK,CAACR,cAAc,CAAC;IACrCU,WAAW,EAAErB,IAAI,CAACmB,KAAK,CAACJ,WAAW,CAAC;IACpCO,QAAQ,EAAEtB,IAAI,CAACmB,KAAK,CAACD,aAAa;EACpC,CAAC;AACH;AAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}