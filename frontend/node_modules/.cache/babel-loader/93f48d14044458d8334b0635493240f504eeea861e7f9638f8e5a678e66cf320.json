{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jenni.mikkonen\\\\OneDrive - LightningChart Ltd\\\\Repos\\\\lcjs-dashboard\\\\frontend\\\\src\\\\pages\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useEffect, useState, useMemo, useRef } from 'react';\nimport '../styles/Dashboard.css';\nimport MultiChart from '../components/MultiChart.jsx';\nimport GaugeChart from '../components/charts/GaugeChart.jsx';\nimport BarChart from '../components/charts/BarChart.jsx';\nimport PieChart from '../components/charts/PieChart.jsx';\nimport SpanChart from '../components/charts/SpanChart.jsx';\nimport SpiderChart from '../components/charts/SpiderChart.jsx';\nimport MosaicChart from '../components/charts/MosaicChart.jsx';\nimport convertTemperatures from '../utils/convertTemperatures.js';\nimport calcActivityScore from '../utils/calcActivityScore.js';\nimport getLast7Days from '../utils/getLast7Days.js';\nimport calcSleepAverages from '../utils/calcSleepAverages.js';\nimport calcWellnessIndex from '../utils/calcWellnessIndex.js';\nimport getInitialData from '../utils/getInitialData.js';\nimport toChartSpans from '../utils/toChartSpans.js';\n// import getStageAtTime from '../utils/getStageAtTime.js';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  // console.log('Dashboard render');\n\n  const [minuteSeries, setMinuteSeries] = useState([]);\n  const [hourSeries, setHourSeries] = useState([]);\n  const [daySeries, setDaySeries] = useState([]);\n  const [sleepSeries, setSleepSeries] = useState([]);\n  const [minuteIndex, setMinuteIndex] = useState(0);\n  const [hourIndex, setHourIndex] = useState(0);\n  const [dayIndex, setDayIndex] = useState(0);\n  const [currentSteps, setCurrentSteps] = useState(0);\n  const [dailySteps, setDailySteps] = useState(0);\n  const [currentHour, setCurrentHour] = useState(0);\n  // const [msg, setMsg] = useState(null);\n\n  const [temperatures, setTemperatures] = useState([]);\n  const [allNights, setAllNights] = useState([]);\n  const [currentStages, setCurrentStages] = useState(null);\n  const [avgStages, setAvgStages] = useState(null);\n\n  // Add debugging for avgStages changes\n  useEffect(() => {\n    console.log(\"avgStages changed:\", avgStages);\n  }, [avgStages]);\n  const [activity, setActivity] = useState(null);\n  const [wellness, setWellness] = useState(null);\n  const [timeIndex, setTimeIndex] = useState(0);\n  const [newPoints, setNewPoints] = useState(null);\n  const [currentDataPoint, setCurrentDataPoint] = useState(null);\n  useEffect(() => {\n    console.log(\"Fetching data from backend...\");\n    Promise.all([fetch(\"/api/data\").then(r => r.json()), fetch(\"/api/sleep-data\").then(r => {\n      // console.log(\"Sleep data fetch response status:\", r.status);\n      return r.json();\n    }) // sleep dataset\n    ]).then(([data, sleepData]) => {\n      // console.log(\"Fetched data:\", data);\n      // console.log(\"Fetched sleepData:\", sleepData);\n      // Convert temperature deviation values to absolute temperature values\n      convertTemperatures(data.hourSeries);\n\n      // Update state with the fetched data\n      setMinuteSeries(data.minuteSeries || []);\n      setHourSeries(data.hourSeries || []);\n      setDaySeries(data.daySeries || []);\n      setSleepSeries(sleepData.daySeries || []);\n      // console.log(`Loaded ${data.minuteSeries?.length} minutes, ${data.hourSeries?.length} hours, ${data.daySeries?.length} days, ${sleepData.daySeries?.length} sleeps`);\n\n      // Initialize charts with data from the last 7 days of data set (ending 2022-01-21)\n      const initialData = getInitialData(data.minuteSeries, data.hourSeries, data.daySeries, sleepData.daySeries);\n      setCurrentStages(toChartSpans(initialData.currentStages));\n      setAvgStages(initialData.avgStages);\n      // setActivity(initialData.activity);\n      setWellness(initialData.wellness);\n      console.log(\"Initialized with last 7 days data:\", initialData);\n      // console.log(\"avgStages set to:\", initialData.avgStages);\n    }).catch(error => {\n      console.error(\"Error fetching data:\", error);\n      // setMsg(\"Error: \" + error.message);\n    });\n  }, []);\n\n  // Minute-level updates\n  useEffect(() => {\n    if (minuteSeries.length === 0 || hourSeries.length === 0 || daySeries.length === 0) return;\n    const interval = setInterval(() => {\n      setMinuteIndex(prevMinuteIndex => {\n        const nextMinuteIndex = (prevMinuteIndex + 1) % minuteSeries.length;\n        const currentMinuteData = minuteSeries[nextMinuteIndex];\n        if (!(currentMinuteData !== null && currentMinuteData !== void 0 && currentMinuteData.timestamp)) return nextMinuteIndex;\n\n        // setMsg(currentMinuteData.timestamp);\n\n        const updatedData = {\n          ...currentMinuteData,\n          steps: dailySteps + (currentMinuteData.steps || 0)\n        };\n        setCurrentDataPoint(updatedData);\n        return nextMinuteIndex;\n      });\n    }, 16);\n    return () => clearInterval(interval);\n  }, [minuteSeries, hourSeries, daySeries]);\n\n  // Daily updates (at 00:00 and 08:00)\n  useEffect(() => {\n    if (!(currentDataPoint !== null && currentDataPoint !== void 0 && currentDataPoint.timestamp)) return;\n    const currentTime = currentDataPoint.timestamp;\n    const date = currentTime.split(\"T\")[0];\n    const hour = parseInt(currentTime.slice(11, 13));\n    const minute = parseInt(currentTime.slice(14, 16));\n\n    // Midnight reset + activity\n    if (hour === 0 && minute === 0) {\n      console.log(\"Midnight update\");\n      setDailySteps(0);\n      const last7days = getLast7Days(minuteSeries, currentTime);\n      const activityArray = calcActivityScore(last7days);\n      setActivity(activityArray);\n    }\n\n    // 08:00 update sleep & wellness\n    if (hour === 8 && minute === 0) {\n      console.log(\"8 AM update\");\n      const lastNight = sleepSeries.find(day => day.date === date);\n      if (lastNight !== null && lastNight !== void 0 && lastNight.sleep) {\n        setCurrentStages(toChartSpans(lastNight.sleep.levels));\n        const last7Nights = getLast7Days(sleepSeries, currentTime).filter(day => day.sleep);\n        setAvgStages(calcSleepAverages(last7Nights));\n      }\n      const yesterdayStr = new Date(new Date(currentTime).getTime() - 86400000).toISOString().split(\"T\")[0];\n      const yesterdayMinuteData = minuteSeries.filter(r => r.timestamp.startsWith(yesterdayStr));\n      const yesterdayHourData = hourSeries.filter(r => r.timestamp.startsWith(yesterdayStr));\n      if (lastNight !== null && lastNight !== void 0 && lastNight.sleep) {\n        setWellness(calcWellnessIndex(yesterdayMinuteData, lastNight.sleep, yesterdayHourData));\n      }\n    }\n  }, [currentDataPoint, minuteSeries, hourSeries, sleepSeries]);\n  if (minuteSeries.length === 0) {\n    console.log(\"Loading data, minuteSeries.length:\", minuteSeries.length);\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading data\\u2026\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-grid\",\n      children: [currentDataPoint && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          id: \"multi\",\n          children: /*#__PURE__*/_jsxDEV(MultiChart, {\n            data: currentDataPoint,\n            steps: currentSteps\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          id: \"stress\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"gauge\",\n            children: /*#__PURE__*/_jsxDEV(GaugeChart, {\n              data: {\n                data: currentDataPoint === null || currentDataPoint === void 0 ? void 0 : currentDataPoint.stress\n              },\n              number: currentDataPoint === null || currentDataPoint === void 0 ? void 0 : currentDataPoint.stress,\n              title: \"Stress Level\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          id: \"steps\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bar\",\n            children: /*#__PURE__*/_jsxDEV(BarChart, {\n              data: {\n                data: dailySteps\n              },\n              title: \"Daily Steps\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          id: \"status\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"gauge\",\n            children: /*#__PURE__*/_jsxDEV(GaugeChart, {\n              data: {\n                data: currentDataPoint === null || currentDataPoint === void 0 ? void 0 : currentDataPoint.temperature\n              },\n              number: currentDataPoint === null || currentDataPoint === void 0 ? void 0 : currentDataPoint.temperature,\n              title: \"Body Temperature\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true), avgStages && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        id: \"avgstages\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pie\",\n          children: /*#__PURE__*/_jsxDEV(PieChart, {\n            data: avgStages,\n            title: \"Sleep Quality Average\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), !avgStages && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        id: \"avgstages\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pie\",\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            backgroundColor: '#333',\n            color: 'white'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Waiting for sleep data...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), currentDataPoint && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          id: \"laststages\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"span\",\n            children: /*#__PURE__*/_jsxDEV(SpanChart, {\n              data: currentStages,\n              title: \"Sleep Stages (Last Night)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          id: \"index\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spider\",\n            children: /*#__PURE__*/_jsxDEV(SpiderChart, {\n              data: wellness,\n              title: \"Wellness Index\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          id: \"activity\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mosaic\",\n            children: /*#__PURE__*/_jsxDEV(MosaicChart, {\n              data: activity\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"ZQTf3KWyQA1DnRWXSj32LA3nrtU=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","useMemo","useRef","MultiChart","GaugeChart","BarChart","PieChart","SpanChart","SpiderChart","MosaicChart","convertTemperatures","calcActivityScore","getLast7Days","calcSleepAverages","calcWellnessIndex","getInitialData","toChartSpans","jsxDEV","_jsxDEV","Fragment","_Fragment","Dashboard","_s","minuteSeries","setMinuteSeries","hourSeries","setHourSeries","daySeries","setDaySeries","sleepSeries","setSleepSeries","minuteIndex","setMinuteIndex","hourIndex","setHourIndex","dayIndex","setDayIndex","currentSteps","setCurrentSteps","dailySteps","setDailySteps","currentHour","setCurrentHour","temperatures","setTemperatures","allNights","setAllNights","currentStages","setCurrentStages","avgStages","setAvgStages","console","log","activity","setActivity","wellness","setWellness","timeIndex","setTimeIndex","newPoints","setNewPoints","currentDataPoint","setCurrentDataPoint","Promise","all","fetch","then","r","json","data","sleepData","initialData","catch","error","length","interval","setInterval","prevMinuteIndex","nextMinuteIndex","currentMinuteData","timestamp","updatedData","steps","clearInterval","currentTime","date","split","hour","parseInt","slice","minute","last7days","activityArray","lastNight","find","day","sleep","levels","last7Nights","filter","yesterdayStr","Date","getTime","toISOString","yesterdayMinuteData","startsWith","yesterdayHourData","children","fileName","_jsxFileName","lineNumber","columnNumber","className","id","stress","number","title","temperature","style","display","alignItems","justifyContent","backgroundColor","color","_c","$RefreshReg$"],"sources":["C:/Users/jenni.mikkonen/OneDrive - LightningChart Ltd/Repos/lcjs-dashboard/frontend/src/pages/Dashboard.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useEffect, useState, useMemo, useRef } from 'react';\r\nimport '../styles/Dashboard.css';\r\nimport MultiChart from '../components/MultiChart.jsx';\r\nimport GaugeChart from '../components/charts/GaugeChart.jsx';\r\nimport BarChart from '../components/charts/BarChart.jsx'; \r\nimport PieChart from '../components/charts/PieChart.jsx'; \r\nimport SpanChart from '../components/charts/SpanChart.jsx'; \r\nimport SpiderChart from '../components/charts/SpiderChart.jsx'; \r\nimport MosaicChart from '../components/charts/MosaicChart.jsx'; \r\nimport convertTemperatures from '../utils/convertTemperatures.js';\r\nimport calcActivityScore from '../utils/calcActivityScore.js';\r\nimport getLast7Days from '../utils/getLast7Days.js';\r\nimport calcSleepAverages from '../utils/calcSleepAverages.js';\r\nimport calcWellnessIndex from '../utils/calcWellnessIndex.js';\r\nimport getInitialData from '../utils/getInitialData.js';\r\nimport toChartSpans from '../utils/toChartSpans.js';\r\n// import getStageAtTime from '../utils/getStageAtTime.js';\r\n\r\nconst Dashboard = () => {\r\n  // console.log('Dashboard render');\r\n\r\n  const [minuteSeries, setMinuteSeries] = useState([]);\r\n  const [hourSeries, setHourSeries] = useState([]);\r\n  const [daySeries, setDaySeries] = useState([]);\r\n  const [sleepSeries, setSleepSeries] = useState([]);\r\n  const [minuteIndex, setMinuteIndex] = useState(0);\r\n  const [hourIndex, setHourIndex] = useState(0);\r\n  const [dayIndex, setDayIndex] = useState(0);\r\n  const [currentSteps, setCurrentSteps] = useState(0);\r\n  const [dailySteps, setDailySteps] = useState(0);\r\n  const [currentHour, setCurrentHour] = useState(0);\r\n  // const [msg, setMsg] = useState(null);\r\n\r\n  const [temperatures, setTemperatures] = useState([]);\r\n  const [allNights, setAllNights] = useState([]);\r\n  const [currentStages, setCurrentStages] = useState(null);\r\n  const [avgStages, setAvgStages] = useState(null);\r\n  \r\n  // Add debugging for avgStages changes\r\n  useEffect(() => {\r\n    console.log(\"avgStages changed:\", avgStages);\r\n  }, [avgStages]);\r\n  const [activity, setActivity] = useState(null);\r\n  const [wellness, setWellness] = useState(null);\r\n  const [timeIndex, setTimeIndex] = useState(0); \r\n  const [newPoints, setNewPoints] = useState(null);\r\n  const [currentDataPoint, setCurrentDataPoint] = useState(null);\r\n\r\n  useEffect(() => { \r\n    console.log(\"Fetching data from backend...\");\r\n    Promise.all([\r\n      fetch(\"/api/data\").then(r => r.json()),\r\n      fetch(\"/api/sleep-data\").then(r => {\r\n        // console.log(\"Sleep data fetch response status:\", r.status);\r\n        return r.json();\r\n      })  // sleep dataset\r\n    ])\r\n    .then(([data, sleepData]) => {\r\n      // console.log(\"Fetched data:\", data);\r\n      // console.log(\"Fetched sleepData:\", sleepData);\r\n      // Convert temperature deviation values to absolute temperature values\r\n      convertTemperatures(data.hourSeries);\r\n    \r\n      // Update state with the fetched data\r\n      setMinuteSeries(data.minuteSeries || []);\r\n      setHourSeries(data.hourSeries || []);\r\n      setDaySeries(data.daySeries || []);\r\n      setSleepSeries(sleepData.daySeries || []);\r\n      // console.log(`Loaded ${data.minuteSeries?.length} minutes, ${data.hourSeries?.length} hours, ${data.daySeries?.length} days, ${sleepData.daySeries?.length} sleeps`);\r\n      \r\n      // Initialize charts with data from the last 7 days of data set (ending 2022-01-21)\r\n      const initialData = getInitialData(data.minuteSeries, data.hourSeries, data.daySeries, sleepData.daySeries);\r\n      setCurrentStages(toChartSpans(initialData.currentStages));\r\n      setAvgStages(initialData.avgStages);\r\n      // setActivity(initialData.activity);\r\n      setWellness(initialData.wellness);\r\n      console.log(\"Initialized with last 7 days data:\", initialData);\r\n      // console.log(\"avgStages set to:\", initialData.avgStages);\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error fetching data:\", error);\r\n      // setMsg(\"Error: \" + error.message);\r\n    });\r\n  }, []);\r\n\r\n  // Minute-level updates\r\n  useEffect(() => {\r\n    if (minuteSeries.length === 0 || hourSeries.length === 0 || daySeries.length === 0) return;\r\n\r\n    const interval = setInterval(() => {\r\n      setMinuteIndex(prevMinuteIndex => {\r\n        const nextMinuteIndex = (prevMinuteIndex + 1) % minuteSeries.length;\r\n        const currentMinuteData = minuteSeries[nextMinuteIndex];\r\n        if (!currentMinuteData?.timestamp) return nextMinuteIndex;\r\n\r\n        // setMsg(currentMinuteData.timestamp);\r\n\r\n        const updatedData = {\r\n          ...currentMinuteData,\r\n          steps: dailySteps + (currentMinuteData.steps || 0)\r\n        };\r\n        setCurrentDataPoint(updatedData);\r\n\r\n        return nextMinuteIndex;\r\n      });\r\n    }, 16);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [minuteSeries, hourSeries, daySeries]);\r\n\r\n  // Daily updates (at 00:00 and 08:00)\r\n  useEffect(() => {\r\n    if (!currentDataPoint?.timestamp) return;\r\n\r\n    const currentTime = currentDataPoint.timestamp;\r\n    const date = currentTime.split(\"T\")[0];\r\n    const hour = parseInt(currentTime.slice(11, 13));\r\n    const minute = parseInt(currentTime.slice(14, 16));\r\n\r\n    // Midnight reset + activity\r\n    if (hour === 0 && minute === 0) {\r\n      console.log(\"Midnight update\");\r\n      setDailySteps(0);\r\n\r\n      const last7days = getLast7Days(minuteSeries, currentTime);\r\n      const activityArray = calcActivityScore(last7days); \r\n      setActivity(activityArray);\r\n    }\r\n\r\n    // 08:00 update sleep & wellness\r\n    if (hour === 8 && minute === 0) {\r\n      console.log(\"8 AM update\");\r\n      const lastNight = sleepSeries.find(day => day.date === date);\r\n\r\n      if (lastNight?.sleep) {\r\n        setCurrentStages(toChartSpans(lastNight.sleep.levels));\r\n\r\n        const last7Nights = getLast7Days(sleepSeries, currentTime).filter(day => day.sleep);\r\n        setAvgStages(calcSleepAverages(last7Nights));\r\n      }\r\n\r\n      const yesterdayStr = new Date(new Date(currentTime).getTime() - 86400000)\r\n        .toISOString()\r\n        .split(\"T\")[0];\r\n\r\n      const yesterdayMinuteData = minuteSeries.filter(r => r.timestamp.startsWith(yesterdayStr));\r\n      const yesterdayHourData = hourSeries.filter(r => r.timestamp.startsWith(yesterdayStr));\r\n\r\n      if (lastNight?.sleep) {\r\n        setWellness(calcWellnessIndex(yesterdayMinuteData, lastNight.sleep, yesterdayHourData));\r\n      }\r\n    }\r\n  }, [currentDataPoint, minuteSeries, hourSeries, sleepSeries]);\r\n\r\n\r\n\r\n\r\n\r\n  if (minuteSeries.length === 0) {\r\n    console.log(\"Loading data, minuteSeries.length:\", minuteSeries.length);\r\n    return <p>Loading data…</p>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"dashboard-grid\">\r\n      {currentDataPoint && (\r\n      <> \r\n        <div className=\"card\" id=\"multi\">\r\n          <MultiChart data={currentDataPoint} steps={currentSteps} />\r\n      </div>\r\n        <div className=\"card\" id=\"stress\">\r\n          <div className=\"gauge\">\r\n            <GaugeChart data={{ data: currentDataPoint?.stress }} number={currentDataPoint?.stress} title=\"Stress Level\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"card\" id=\"steps\">\r\n          <div className=\"bar\">\r\n            <BarChart data={{ data: dailySteps }} title=\"Daily Steps\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"card\" id=\"status\">\r\n          <div className=\"gauge\">\r\n            <GaugeChart data={{ data: currentDataPoint?.temperature }} number={currentDataPoint?.temperature} title=\"Body Temperature\" />\r\n          </div>         \r\n        </div>\r\n      </>\r\n      )}\r\n      {avgStages && (\r\n        <div className=\"card\" id=\"avgstages\">\r\n          <div className=\"pie\">\r\n            <PieChart data={avgStages} title=\"Sleep Quality Average\"/>\r\n          </div> \r\n        </div>\r\n      )}\r\n      {!avgStages && (\r\n        <div className=\"card\" id=\"avgstages\">\r\n          <div className=\"pie\" style={{display: 'flex', alignItems: 'center', justifyContent: 'center', backgroundColor: '#333', color: 'white'}}>\r\n            <p>Waiting for sleep data...</p>\r\n          </div> \r\n        </div>\r\n      )}\r\n      {currentDataPoint && (\r\n      <>\r\n        <div className=\"card\" id=\"laststages\">\r\n          <div className=\"span\">\r\n            <SpanChart data={currentStages} title=\"Sleep Stages (Last Night)\"/>\r\n          </div> \r\n        </div>\r\n        <div className=\"card\" id=\"index\">\r\n          <div className=\"spider\">\r\n            <SpiderChart data={wellness} title=\"Wellness Index\"/>\r\n          </div> \r\n        </div>\r\n        <div className=\"card\" id=\"activity\">\r\n          <div className=\"mosaic\">\r\n            <MosaicChart data={activity}/>\r\n          </div> \r\n        </div>\r\n      </>\r\n      )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}