{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jenni.mikkonen\\\\OneDrive - LightningChart Ltd\\\\Repos\\\\lcjs-dashboard\\\\frontend\\\\src\\\\LC.js\",\n  _s = $RefreshSig$();\n// React logic for managing LightningChart JS instances that are shared\n// between any LCJS based components that can be visible at the same time\n// In simple use cases with 1-2 charts visible at once, there is no need to use these.\n// However, with more charts visible at once, this gives an incredible performance advantage, since all charts use a shared LC context.\n\nimport { createContext, useEffect, useRef, useState } from \"react\";\nimport { lightningChart } from \"@lightningchart/lcjs\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst lcjsLicenseKey = process.env.REACT_APP_LCJS_LICENSE;\nexport const LCContext = /*#__PURE__*/createContext(null);\nexport function LCHost(props) {\n  _s();\n  const lcRef = useRef(null);\n  const [lcState, setLcState] = useState(undefined);\n  useEffect(() => {\n    if (!lcRef.current) {\n      try {\n        lcRef.current = lightningChart({\n          license: lcjsLicenseKey,\n          licenseInformation: {\n            appTitle: \"LightningChart JS Trial\",\n            company: \"LightningChart Ltd.\"\n          },\n          sharedContextOptions: {\n            useIndividualCanvas: true\n          }\n        });\n        setLcState(lcRef.current);\n      } catch (e) {\n        console.error(e);\n      }\n    }\n    return () => {\n      if (lcRef.current && \"dispose\" in lcRef.current) {\n        lcRef.current.dispose();\n        lcRef.current = null;\n        setLcState(undefined);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(LCContext.Provider, {\n      value: lcState,\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(LCHost, \"3xR4m98N9c/QUJ+6DnFeRQ17dlY=\");\n_c = LCHost;\nvar _c;\n$RefreshReg$(_c, \"LCHost\");","map":{"version":3,"names":["createContext","useEffect","useRef","useState","lightningChart","jsxDEV","_jsxDEV","Fragment","_Fragment","lcjsLicenseKey","process","env","REACT_APP_LCJS_LICENSE","LCContext","LCHost","props","_s","lcRef","lcState","setLcState","undefined","current","license","licenseInformation","appTitle","company","sharedContextOptions","useIndividualCanvas","e","console","error","dispose","children","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/jenni.mikkonen/OneDrive - LightningChart Ltd/Repos/lcjs-dashboard/frontend/src/LC.js"],"sourcesContent":["// React logic for managing LightningChart JS instances that are shared\r\n// between any LCJS based components that can be visible at the same time\r\n// In simple use cases with 1-2 charts visible at once, there is no need to use these.\r\n// However, with more charts visible at once, this gives an incredible performance advantage, since all charts use a shared LC context.\r\n\r\nimport { createContext, useEffect, useRef, useState } from \"react\";\r\nimport { lightningChart } from \"@lightningchart/lcjs\";\r\n\r\nconst lcjsLicenseKey = process.env.REACT_APP_LCJS_LICENSE;\r\n\r\nexport const LCContext = createContext(null);\r\n\r\nexport function LCHost(props) {\r\n  const lcRef = useRef(null);\r\n  const [lcState, setLcState] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    if (!lcRef.current) {\r\n      try {\r\n        lcRef.current = lightningChart({\r\n          license: lcjsLicenseKey,\r\n          licenseInformation: {\r\n            appTitle: \"LightningChart JS Trial\",\r\n            company: \"LightningChart Ltd.\",\r\n          },\r\n          sharedContextOptions: {\r\n            useIndividualCanvas: true,\r\n          },\r\n        });\r\n        setLcState(lcRef.current);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    }\r\n\r\n    return () => {\r\n      if (lcRef.current && \"dispose\" in lcRef.current) {\r\n        lcRef.current.dispose();\r\n        lcRef.current = null;\r\n        setLcState(undefined);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <LCContext.Provider value={lcState}>{props.children}</LCContext.Provider>\r\n    </>\r\n  );\r\n}"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA,SAASA,aAAa,EAAEC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAClE,SAASC,cAAc,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEtD,MAAMC,cAAc,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB;AAEzD,OAAO,MAAMC,SAAS,gBAAGb,aAAa,CAAC,IAAI,CAAC;AAE5C,OAAO,SAASc,MAAMA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAC5B,MAAMC,KAAK,GAAGf,MAAM,CAAC,IAAI,CAAC;EAC1B,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAACiB,SAAS,CAAC;EAEjDnB,SAAS,CAAC,MAAM;IACd,IAAI,CAACgB,KAAK,CAACI,OAAO,EAAE;MAClB,IAAI;QACFJ,KAAK,CAACI,OAAO,GAAGjB,cAAc,CAAC;UAC7BkB,OAAO,EAAEb,cAAc;UACvBc,kBAAkB,EAAE;YAClBC,QAAQ,EAAE,yBAAyB;YACnCC,OAAO,EAAE;UACX,CAAC;UACDC,oBAAoB,EAAE;YACpBC,mBAAmB,EAAE;UACvB;QACF,CAAC,CAAC;QACFR,UAAU,CAACF,KAAK,CAACI,OAAO,CAAC;MAC3B,CAAC,CAAC,OAAOO,CAAC,EAAE;QACVC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;MAClB;IACF;IAEA,OAAO,MAAM;MACX,IAAIX,KAAK,CAACI,OAAO,IAAI,SAAS,IAAIJ,KAAK,CAACI,OAAO,EAAE;QAC/CJ,KAAK,CAACI,OAAO,CAACU,OAAO,CAAC,CAAC;QACvBd,KAAK,CAACI,OAAO,GAAG,IAAI;QACpBF,UAAU,CAACC,SAAS,CAAC;MACvB;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEd,OAAA,CAAAE,SAAA;IAAAwB,QAAA,eACE1B,OAAA,CAACO,SAAS,CAACoB,QAAQ;MAACC,KAAK,EAAEhB,OAAQ;MAAAc,QAAA,EAAEjB,KAAK,CAACiB;IAAQ;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAqB;EAAC,gBACzE,CAAC;AAEP;AAACtB,EAAA,CArCeF,MAAM;AAAAyB,EAAA,GAANzB,MAAM;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}