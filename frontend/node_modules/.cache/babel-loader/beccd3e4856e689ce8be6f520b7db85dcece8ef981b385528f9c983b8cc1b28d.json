{"ast":null,"code":"var _jsxFileName = \"D:\\\\Repos\\\\lcjs-dashboard\\\\frontend\\\\src\\\\pages\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useEffect, useState, useRef } from 'react';\nimport '../styles/Dashboard.css';\nimport MultiChart from '../components/MultiChart.jsx';\nimport GaugeChart from '../components/charts/GaugeChart.jsx';\nimport BarChart from '../components/charts/BarChart.jsx';\nimport PieChart from '../components/charts/PieChart.jsx';\nimport SpanChart from '../components/charts/SpanChart.jsx';\nimport SpiderChart from '../components/charts/SpiderChart.jsx';\nimport MosaicChart from '../components/charts/MosaicChart.jsx';\nimport convertTemperatures from '../utils/convertTemperatures.js';\nimport calcActivityScore from '../utils/calcActivityScore.js';\nimport getLast7Days from '../utils/getLast7Days.js';\nimport calcSleepAverages from '../utils/calcSleepAverages.js';\nimport calcWellnessIndex from '../utils/calcWellnessIndex.js';\nimport getInitialData from '../utils/getInitialData.js';\nimport toChartSpans from '../utils/toChartSpans.js';\n// import getStageAtTime from '../utils/getStageAtTime.js';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  // console.log('Dashboard render');\n\n  const [minuteSeries, setMinuteSeries] = useState([]);\n  const [hourSeries, setHourSeries] = useState([]);\n  const [daySeries, setDaySeries] = useState([]);\n  const [sleepSeries, setSleepSeries] = useState([]);\n  // const [minuteIndex, setMinuteIndex] = useState(0);\n  // const [hourIndex, setHourIndex] = useState(0);\n  // const [dayIndex, setDayIndex] = useState(0);\n  const [currentSteps, setCurrentSteps] = useState(0);\n  const [dailySteps, setDailySteps] = useState(0);\n  // const [currentHour, setCurrentHour] = useState(0);\n  const [currentStages, setCurrentStages] = useState(null);\n  const [avgStages, setAvgStages] = useState(null);\n  const minuteIndexRef = useRef(0);\n  const hourIndexRef = useRef(0);\n\n  // Add debugging for avgStages changes\n  useEffect(() => {\n    console.log(\"avgStages changed:\", avgStages);\n  }, [avgStages]);\n  const [activity, setActivity] = useState(null);\n  const [wellness, setWellness] = useState(null);\n  const [currentDataPoint, setCurrentDataPoint] = useState(null);\n  useEffect(() => {\n    console.log(\"Fetching data from backend...\");\n    const controller = new AbortController();\n    Promise.all([fetch(\"/api/data\", {\n      signal: controller.signal\n    }).then(r => r.json()), fetch(\"/api/sleep-data\", {\n      signal: controller.signal\n    }).then(r => r.json())]).then(([data, sleepData]) => {\n      if (!data || !sleepData) return;\n\n      // Convert temperature deviation values to absolute temperature values\n      convertTemperatures(data.hourSeries);\n\n      // Update state with the fetched data\n      setMinuteSeries(data.minuteSeries || []);\n      setHourSeries(data.hourSeries || []);\n      setDaySeries(data.daySeries || []);\n      setSleepSeries(sleepData.daySeries || []);\n\n      // Initialize charts with data from the last 7 days of data set (ending 2022-01-21)\n      const initialData = getInitialData(data.minuteSeries, data.hourSeries, data.daySeries, sleepData.daySeries);\n      setCurrentStages(toChartSpans(initialData.currentStages));\n      setAvgStages(initialData.avgStages);\n      setWellness(initialData.wellness);\n      console.log(\"Fetched data:\", data);\n      console.log(\"Fetched sleepData:\", sleepData);\n    }).catch(err => {\n      if (err.name === \"AbortError\") {\n        console.log(\"Fetch aborted\");\n      } else {\n        console.error(\"Error fetching data:\", err);\n      }\n    });\n    return () => {\n      controller.abort();\n    };\n  }, []);\n  useEffect(() => {\n    if (minuteSeries.length === 0 || hourSeries.length === 0 || daySeries.length === 0) {\n      console.log(\"Waiting for all data to load...\");\n      return;\n    }\n    const interval = setInterval(() => {\n      // Update minute data every cycle\n      // setMinuteIndex(prevMinuteIndex => {\n      //   const nextMinuteIndex = (prevMinuteIndex + 1) % minuteSeries.length;\n      //   const currentMinuteData = minuteSeries[nextMinuteIndex];\n\n      // if(!currentMinuteData?.timestamp) return nextMinuteIndex;\n      let nextMinuteIndex = (minuteIndexRef.current + 1) % minuteSeries.length;\n      const currentMinuteData = minuteSeries[nextMinuteIndex];\n      if (!(currentMinuteData !== null && currentMinuteData !== void 0 && currentMinuteData.timestamp)) {\n        minuteIndexRef.current = nextMinuteIndex;\n        return;\n      }\n      const currentTime = currentMinuteData.timestamp;\n      const date = currentTime.split('T')[0];\n      const hour = parseInt(currentTime.slice(11, 13));\n      const minute = parseInt(currentTime.slice(14, 16));\n      // console.log(\"currentTime date hour minute: \", currentTime, date, hour, minute);\n\n      // Check if hour changed, update hourSeries data\n      if (minute === 0) {\n        // console.log(\"New hour\");\n        // setHourIndex(prevHourIndex => {\n        //   const nextHourIndex = (prevHourIndex + 1) % hourSeries.length;\n        //   const currentHourData = hourSeries[nextHourIndex];\n        let nextHourIndex = (hourIndexRef.current + 1) % hourSeries.length;\n        const currentHourData = hourSeries[nextHourIndex];\n\n        // Merge minute and hour data\n        const combinedData = {\n          ...currentMinuteData,\n          stress: currentHourData === null || currentHourData === void 0 ? void 0 : currentHourData.stress,\n          temperature: currentHourData === null || currentHourData === void 0 ? void 0 : currentHourData.temperature,\n          steps: dailySteps + (currentMinuteData.steps || 0)\n        };\n        setCurrentDataPoint(combinedData);\n        // setCurrentHour(hour);\n        // console.log(\"currentDataPoint (hour update)\", combinedData);\n\n        // return nextHourIndex;\n        // });\n        hourIndexRef.current = nextHourIndex;\n      } else {\n        // Just update with minute data + accumulated steps\n        const updatedData = {\n          ...currentMinuteData,\n          steps: dailySteps + (currentMinuteData.steps || 0)\n        };\n        setCurrentDataPoint(updatedData);\n        // console.log(\"currentDataPoint (minute update)\", updatedData);\n      }\n\n      // Handle 00:00 updates\n      if (hour === 0 && minute === 0) {\n        console.log(\"Midnight 00:00\");\n\n        // Reset daily steps\n        setDailySteps(0);\n\n        // Update MosaicChart with 7-day activity data\n        const last7days = getLast7Days(minuteSeries, currentTime); //currentTime \"2021-05-24T00:00:00Z\"\n        // console.log(\"last7days: \", last7days);\n\n        // Group by day and hour, calculate hourly totals\n        const dailyHourlyTotals = {};\n        last7days.forEach(record => {\n          const day = record.timestamp.split('T')[0]; //day \"2021-02-12\"\n          const hour = parseInt(record.timestamp.slice(11, 13)); // Extract hour\n\n          if (!dailyHourlyTotals[day]) {\n            dailyHourlyTotals[day] = {};\n          }\n          if (!dailyHourlyTotals[day][hour]) {\n            dailyHourlyTotals[day][hour] = {\n              calories: 0,\n              steps: 0\n            };\n          }\n          dailyHourlyTotals[day][hour].calories += record.calories || 0;\n          dailyHourlyTotals[day][hour].steps += record.steps || 0;\n        });\n\n        // Calculate activity percentages for each day\n        const activityArray = Object.entries(dailyHourlyTotals).sort(([dateA], [dateB]) => dateA.localeCompare(dateB)) // Sort by date\n        .map(([date, hourlyTotals]) => {\n          const hourlyScores = {\n            low: 0,\n            medium: 0,\n            high: 0\n          };\n          const totalHours = Object.keys(hourlyTotals).length;\n\n          // Calculate score for each hour\n          Object.values(hourlyTotals).forEach(hourData => {\n            // const activityPoints = (hourData.calories * 0.1) + (hourData.steps * 0.005);\n            const score = calcActivityScore(hourData.calories, hourData.steps);\n            // console.log(`Hour data: calories=${hourData.calories}, steps=${hourData.steps}, points=${activityPoints}, score=${score}`);\n            hourlyScores[score]++;\n          });\n\n          // Convert to percentages\n          const result = {\n            date: date,\n            low: Math.round(hourlyScores.low / totalHours * 100),\n            medium: Math.round(hourlyScores.medium / totalHours * 100),\n            high: Math.round(hourlyScores.high / totalHours * 100),\n            totalHours: totalHours\n          };\n          // console.log(`Day ${date}: ${hourlyScores.low}/${hourlyScores.medium}/${hourlyScores.high} out of ${totalHours} hours = ${result.low}%/${result.medium}%/${result.high}%`);\n          return result;\n        });\n\n        // console.log(\"activityArray: \", activityArray);\n        setActivity(activityArray);\n      } else {\n        // Accumulate steps throughout the day\n        setDailySteps(prev => prev + (currentMinuteData.steps || 0));\n      }\n\n      // Handle 08:00 updates\n      if (hour === 8 && minute === 0) {\n        console.log(\"Eight AM 08:00\");\n\n        // Find last night's sleep data\n        // console.log(\"lastNight date: \", date);\n        // console.log(\"Looking for sleep data on date:\", date);\n        const lastNight = daySeries.find(day => day.date === date);\n        // console.log(\"8 AM lastnight sleep: \", lastNight.sleep)\n        // console.log(\"Matched lastNight:\", lastNight);\n\n        if (lastNight !== null && lastNight !== void 0 && lastNight.sleep) {\n          const spans = toChartSpans(lastNight.sleep.levels);\n          // console.log(\"8 AM update - converted spans:\", spans);\n          setCurrentStages(spans);\n\n          // Calculate 7-night average\n          const last7Nights = getLast7Days(sleepSeries, currentTime);\n          console.log(\"8 AM update - last7Nights:\", last7Nights);\n          const avgSleep = calcSleepAverages(last7Nights);\n          console.log(\"8 AM update - avgSleep:\", avgSleep);\n          setAvgStages(avgSleep);\n\n          // console.log(\"Updated sleep data:\", { lastNight: lastNight.sleep, average: avgSleep });\n        } else {\n          console.log(\"No sleep data found for\", date);\n        }\n\n        // Get yesterday's data for wellness calculation\n        const currentDateTime = new Date(currentTime + (currentTime.endsWith('Z') ? '' : 'Z'));\n        const yesterday = new Date(currentDateTime.getTime() - 24 * 60 * 60 * 1000);\n        const yesterdayStr = yesterday.toISOString().split('T')[0];\n        // console.log(\"lastnight sleep: \", lastNight.sleep)\n\n        // Get yesterday's minute data\n        const yesterdayMinuteData = minuteSeries.filter(record => (record === null || record === void 0 ? void 0 : record.timestamp) && record.timestamp.startsWith(yesterdayStr));\n        // console.log(\"yesterdayMinuteData: \", yesterdayMinuteData)\n\n        // Get yesterday's hour data  \n        const yesterdayHourData = hourSeries.filter(record => (record === null || record === void 0 ? void 0 : record.timestamp) && record.timestamp.startsWith(yesterdayStr));\n        // console.log(\"yesterdayHourData: \", yesterdayHourData)\n\n        // Calculate wellness index for yesterday\n        const wellnessIndex = calcWellnessIndex(yesterdayMinuteData, lastNight.sleep, yesterdayHourData);\n        setWellness(wellnessIndex);\n        console.log(\"Updated wellness index:\", wellnessIndex);\n      }\n      setCurrentSteps(currentMinuteData.steps);\n      minuteIndexRef.current = nextMinuteIndex;\n      //   return nextMinuteIndex;\n      // });\n    }, 16); // 0.1 second = 1 simulated minute\n\n    return () => clearInterval(interval);\n  }, [minuteSeries, hourSeries, daySeries, sleepSeries, dailySteps]);\n  if (minuteSeries.length === 0) {\n    console.log(\"Loading data, minuteSeries.length:\", minuteSeries.length);\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading data\\u2026\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-grid\",\n      children: [currentDataPoint && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          id: \"multi\",\n          children: /*#__PURE__*/_jsxDEV(MultiChart, {\n            data: currentDataPoint,\n            steps: currentSteps,\n            timestamp: currentDataPoint.timestamp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          id: \"stress\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"gauge\",\n            children: /*#__PURE__*/_jsxDEV(GaugeChart, {\n              data: {\n                data: currentDataPoint === null || currentDataPoint === void 0 ? void 0 : currentDataPoint.stress\n              },\n              number: currentDataPoint === null || currentDataPoint === void 0 ? void 0 : currentDataPoint.stress,\n              title: \"Stress Level\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          id: \"steps\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bar\",\n            children: /*#__PURE__*/_jsxDEV(BarChart, {\n              data: {\n                data: dailySteps\n              },\n              title: \"Daily Steps\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          id: \"status\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"gauge\",\n            children: /*#__PURE__*/_jsxDEV(GaugeChart, {\n              data: {\n                data: currentDataPoint === null || currentDataPoint === void 0 ? void 0 : currentDataPoint.temperature\n              },\n              number: currentDataPoint === null || currentDataPoint === void 0 ? void 0 : currentDataPoint.temperature,\n              title: \"Body Temperature\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true), avgStages && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        id: \"avgstages\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pie\",\n          children: /*#__PURE__*/_jsxDEV(PieChart, {\n            data: avgStages,\n            title: \"Sleep Quality Average\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this), currentDataPoint && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          id: \"laststages\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"span\",\n            children: /*#__PURE__*/_jsxDEV(SpanChart, {\n              data: currentStages\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          id: \"index\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spider\",\n            children: /*#__PURE__*/_jsxDEV(SpiderChart, {\n              data: wellness\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          id: \"activity\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mosaic\",\n            children: /*#__PURE__*/_jsxDEV(MosaicChart, {\n              data: activity\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 285,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"M5oX2N/qxPj6ngc9BIyEzIhBhK8=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","useRef","MultiChart","GaugeChart","BarChart","PieChart","SpanChart","SpiderChart","MosaicChart","convertTemperatures","calcActivityScore","getLast7Days","calcSleepAverages","calcWellnessIndex","getInitialData","toChartSpans","jsxDEV","_jsxDEV","Fragment","_Fragment","Dashboard","_s","minuteSeries","setMinuteSeries","hourSeries","setHourSeries","daySeries","setDaySeries","sleepSeries","setSleepSeries","currentSteps","setCurrentSteps","dailySteps","setDailySteps","currentStages","setCurrentStages","avgStages","setAvgStages","minuteIndexRef","hourIndexRef","console","log","activity","setActivity","wellness","setWellness","currentDataPoint","setCurrentDataPoint","controller","AbortController","Promise","all","fetch","signal","then","r","json","data","sleepData","initialData","catch","err","name","error","abort","length","interval","setInterval","nextMinuteIndex","current","currentMinuteData","timestamp","currentTime","date","split","hour","parseInt","slice","minute","nextHourIndex","currentHourData","combinedData","stress","temperature","steps","updatedData","last7days","dailyHourlyTotals","forEach","record","day","calories","activityArray","Object","entries","sort","dateA","dateB","localeCompare","map","hourlyTotals","hourlyScores","low","medium","high","totalHours","keys","values","hourData","score","result","Math","round","prev","lastNight","find","sleep","spans","levels","last7Nights","avgSleep","currentDateTime","Date","endsWith","yesterday","getTime","yesterdayStr","toISOString","yesterdayMinuteData","filter","startsWith","yesterdayHourData","wellnessIndex","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","className","id","number","title","_c","$RefreshReg$"],"sources":["D:/Repos/lcjs-dashboard/frontend/src/pages/Dashboard.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useEffect, useState, useRef } from 'react';\r\nimport '../styles/Dashboard.css';\r\nimport MultiChart from '../components/MultiChart.jsx';\r\nimport GaugeChart from '../components/charts/GaugeChart.jsx';\r\nimport BarChart from '../components/charts/BarChart.jsx'; \r\nimport PieChart from '../components/charts/PieChart.jsx'; \r\nimport SpanChart from '../components/charts/SpanChart.jsx'; \r\nimport SpiderChart from '../components/charts/SpiderChart.jsx'; \r\nimport MosaicChart from '../components/charts/MosaicChart.jsx'; \r\nimport convertTemperatures from '../utils/convertTemperatures.js';\r\nimport calcActivityScore from '../utils/calcActivityScore.js';\r\nimport getLast7Days from '../utils/getLast7Days.js';\r\nimport calcSleepAverages from '../utils/calcSleepAverages.js';\r\nimport calcWellnessIndex from '../utils/calcWellnessIndex.js';\r\nimport getInitialData from '../utils/getInitialData.js';\r\nimport toChartSpans from '../utils/toChartSpans.js';\r\n// import getStageAtTime from '../utils/getStageAtTime.js';\r\n\r\nconst Dashboard = () => {\r\n  // console.log('Dashboard render');\r\n\r\n  const [minuteSeries, setMinuteSeries] = useState([]);\r\n  const [hourSeries, setHourSeries] = useState([]);\r\n  const [daySeries, setDaySeries] = useState([]);\r\n  const [sleepSeries, setSleepSeries] = useState([]);\r\n  // const [minuteIndex, setMinuteIndex] = useState(0);\r\n  // const [hourIndex, setHourIndex] = useState(0);\r\n  // const [dayIndex, setDayIndex] = useState(0);\r\n  const [currentSteps, setCurrentSteps] = useState(0);\r\n  const [dailySteps, setDailySteps] = useState(0);\r\n  // const [currentHour, setCurrentHour] = useState(0);\r\n  const [currentStages, setCurrentStages] = useState(null);\r\n  const [avgStages, setAvgStages] = useState(null);\r\n  const minuteIndexRef = useRef(0);\r\n  const hourIndexRef = useRef(0);\r\n  \r\n  // Add debugging for avgStages changes\r\n  useEffect(() => {\r\n    console.log(\"avgStages changed:\", avgStages);\r\n  }, [avgStages]);\r\n  const [activity, setActivity] = useState(null);\r\n  const [wellness, setWellness] = useState(null);\r\n  const [currentDataPoint, setCurrentDataPoint] = useState(null);\r\n\r\n  useEffect(() => { \r\n    console.log(\"Fetching data from backend...\");\r\n    const controller = new AbortController();\r\n\r\n    Promise.all([\r\n      fetch(\"/api/data\", { signal: controller.signal }).then(r => r.json()),\r\n      fetch(\"/api/sleep-data\", { signal: controller.signal }).then((r) => r.json())\r\n    ])\r\n    .then(([data, sleepData]) => {\r\n      if (!data || !sleepData) return;\r\n\r\n      // Convert temperature deviation values to absolute temperature values\r\n      convertTemperatures(data.hourSeries);\r\n    \r\n      // Update state with the fetched data\r\n      setMinuteSeries(data.minuteSeries || []);\r\n      setHourSeries(data.hourSeries || []);\r\n      setDaySeries(data.daySeries || []);\r\n      setSleepSeries(sleepData.daySeries || []);\r\n      \r\n      // Initialize charts with data from the last 7 days of data set (ending 2022-01-21)\r\n      const initialData = getInitialData(data.minuteSeries, data.hourSeries, data.daySeries, sleepData.daySeries);\r\n      setCurrentStages(toChartSpans(initialData.currentStages));\r\n      setAvgStages(initialData.avgStages);\r\n      setWellness(initialData.wellness);\r\n      console.log(\"Fetched data:\", data);\r\n      console.log(\"Fetched sleepData:\", sleepData);\r\n    })\r\n    .catch((err) => {\r\n      if (err.name === \"AbortError\") {\r\n        console.log(\"Fetch aborted\");\r\n      } else {\r\n        console.error(\"Error fetching data:\", err);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      controller.abort();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (minuteSeries.length === 0 || hourSeries.length === 0 || daySeries.length === 0) {\r\n      console.log(\"Waiting for all data to load...\");\r\n      return;\r\n    }\r\n\r\n    const interval = setInterval(() => {\r\n      // Update minute data every cycle\r\n      // setMinuteIndex(prevMinuteIndex => {\r\n      //   const nextMinuteIndex = (prevMinuteIndex + 1) % minuteSeries.length;\r\n      //   const currentMinuteData = minuteSeries[nextMinuteIndex];\r\n\r\n        // if(!currentMinuteData?.timestamp) return nextMinuteIndex;\r\n        let nextMinuteIndex = (minuteIndexRef.current + 1) % minuteSeries.length;\r\n        const currentMinuteData = minuteSeries[nextMinuteIndex];\r\n\r\n        if (!currentMinuteData?.timestamp) {\r\n          minuteIndexRef.current = nextMinuteIndex;\r\n          return;\r\n        }\r\n\r\n        const currentTime = currentMinuteData.timestamp;\r\n        const date = currentTime.split('T')[0];\r\n        const hour =  parseInt(currentTime.slice(11, 13));\r\n        const minute = parseInt(currentTime.slice(14, 16));\r\n        // console.log(\"currentTime date hour minute: \", currentTime, date, hour, minute);\r\n\r\n        // Check if hour changed, update hourSeries data\r\n        if (minute === 0)  {\r\n          // console.log(\"New hour\");\r\n          // setHourIndex(prevHourIndex => {\r\n          //   const nextHourIndex = (prevHourIndex + 1) % hourSeries.length;\r\n          //   const currentHourData = hourSeries[nextHourIndex];\r\n          let nextHourIndex = (hourIndexRef.current + 1) % hourSeries.length;\r\n          const currentHourData = hourSeries[nextHourIndex];\r\n\r\n          // Merge minute and hour data\r\n          const combinedData = {\r\n            ...currentMinuteData,\r\n            stress: currentHourData?.stress,\r\n            temperature: currentHourData?.temperature,\r\n            steps: dailySteps + (currentMinuteData.steps || 0)            \r\n          };\r\n\r\n          setCurrentDataPoint(combinedData);\r\n          // setCurrentHour(hour);\r\n          // console.log(\"currentDataPoint (hour update)\", combinedData);\r\n\r\n          // return nextHourIndex;\r\n          // });\r\n          hourIndexRef.current = nextHourIndex;\r\n        } else {\r\n          // Just update with minute data + accumulated steps\r\n          const updatedData = {\r\n            ...currentMinuteData,\r\n            steps: dailySteps + (currentMinuteData.steps || 0)  \r\n          }\r\n          setCurrentDataPoint(updatedData);\r\n          // console.log(\"currentDataPoint (minute update)\", updatedData);\r\n        }\r\n\r\n        // Handle 00:00 updates\r\n        if (hour === 0 && minute === 0)  {\r\n          console.log(\"Midnight 00:00\");\r\n\r\n          // Reset daily steps\r\n          setDailySteps(0);\r\n\r\n          // Update MosaicChart with 7-day activity data\r\n          const last7days = getLast7Days(minuteSeries, currentTime);  //currentTime \"2021-05-24T00:00:00Z\"\r\n          // console.log(\"last7days: \", last7days);\r\n          \r\n          // Group by day and hour, calculate hourly totals\r\n          const dailyHourlyTotals = {};\r\n          last7days.forEach(record => {\r\n            const day = record.timestamp.split('T')[0];  //day \"2021-02-12\"\r\n            const hour = parseInt(record.timestamp.slice(11, 13)); // Extract hour\r\n            \r\n            if (!dailyHourlyTotals[day]) {\r\n              dailyHourlyTotals[day] = {};\r\n            }\r\n            if (!dailyHourlyTotals[day][hour]) {\r\n              dailyHourlyTotals[day][hour] = { calories: 0, steps: 0 };\r\n            }\r\n            \r\n            dailyHourlyTotals[day][hour].calories += record.calories || 0;\r\n            dailyHourlyTotals[day][hour].steps += record.steps || 0;\r\n          });\r\n\r\n          // Calculate activity percentages for each day\r\n          const activityArray = Object.entries(dailyHourlyTotals)\r\n            .sort(([dateA], [dateB]) => dateA.localeCompare(dateB)) // Sort by date\r\n            .map(([date, hourlyTotals]) => {\r\n              const hourlyScores = { low: 0, medium: 0, high: 0 };\r\n              const totalHours = Object.keys(hourlyTotals).length;\r\n              \r\n              // Calculate score for each hour\r\n              Object.values(hourlyTotals).forEach(hourData => {\r\n                // const activityPoints = (hourData.calories * 0.1) + (hourData.steps * 0.005);\r\n                const score = calcActivityScore(hourData.calories, hourData.steps);\r\n                // console.log(`Hour data: calories=${hourData.calories}, steps=${hourData.steps}, points=${activityPoints}, score=${score}`);\r\n                hourlyScores[score]++;\r\n              });\r\n              \r\n              // Convert to percentages\r\n              const result = {\r\n                date: date,\r\n                low: Math.round((hourlyScores.low / totalHours) * 100),\r\n                medium: Math.round((hourlyScores.medium / totalHours) * 100),\r\n                high: Math.round((hourlyScores.high / totalHours) * 100),\r\n                totalHours: totalHours\r\n              };\r\n              // console.log(`Day ${date}: ${hourlyScores.low}/${hourlyScores.medium}/${hourlyScores.high} out of ${totalHours} hours = ${result.low}%/${result.medium}%/${result.high}%`);\r\n              return result;\r\n            });\r\n\r\n          // console.log(\"activityArray: \", activityArray);\r\n          setActivity(activityArray);\r\n        } else {\r\n          // Accumulate steps throughout the day\r\n          setDailySteps(prev => prev + (currentMinuteData.steps || 0));\r\n        }\r\n\r\n        // Handle 08:00 updates\r\n        if (hour === 8 && minute === 0) {\r\n          console.log(\"Eight AM 08:00\");\r\n\r\n          // Find last night's sleep data\r\n          // console.log(\"lastNight date: \", date);\r\n          // console.log(\"Looking for sleep data on date:\", date);\r\n          const lastNight = daySeries.find(day => day.date === date);\r\n          // console.log(\"8 AM lastnight sleep: \", lastNight.sleep)\r\n          // console.log(\"Matched lastNight:\", lastNight);\r\n\r\n          if (lastNight?.sleep) {\r\n            const spans = toChartSpans(lastNight.sleep.levels);\r\n            // console.log(\"8 AM update - converted spans:\", spans);\r\n            setCurrentStages(spans);\r\n\r\n            // Calculate 7-night average\r\n            const last7Nights = getLast7Days(sleepSeries, currentTime);\r\n            console.log(\"8 AM update - last7Nights:\", last7Nights);\r\n\r\n            const avgSleep = calcSleepAverages(last7Nights);\r\n            console.log(\"8 AM update - avgSleep:\", avgSleep);\r\n\r\n            setAvgStages(avgSleep);\r\n\r\n          // console.log(\"Updated sleep data:\", { lastNight: lastNight.sleep, average: avgSleep });\r\n          } else {\r\n            console.log(\"No sleep data found for\", date);\r\n          }\r\n\r\n          // Get yesterday's data for wellness calculation\r\n          const currentDateTime = new Date(currentTime + (currentTime.endsWith('Z') ? '' : 'Z'));\r\n          const yesterday = new Date(currentDateTime.getTime() - (24 * 60 * 60 * 1000));\r\n          const yesterdayStr = yesterday.toISOString().split('T')[0];\r\n          // console.log(\"lastnight sleep: \", lastNight.sleep)\r\n\r\n          // Get yesterday's minute data\r\n          const yesterdayMinuteData = minuteSeries.filter(record => \r\n            record?.timestamp && record.timestamp.startsWith(yesterdayStr)\r\n          );\r\n          // console.log(\"yesterdayMinuteData: \", yesterdayMinuteData)\r\n\r\n          // Get yesterday's hour data  \r\n          const yesterdayHourData = hourSeries.filter(record =>\r\n            record?.timestamp && record.timestamp.startsWith(yesterdayStr)\r\n          );\r\n          // console.log(\"yesterdayHourData: \", yesterdayHourData)\r\n          \r\n          // Calculate wellness index for yesterday\r\n          const wellnessIndex = calcWellnessIndex(\r\n            yesterdayMinuteData, \r\n            lastNight.sleep, \r\n            yesterdayHourData\r\n          );\r\n          \r\n          setWellness(wellnessIndex);\r\n          console.log(\"Updated wellness index:\", wellnessIndex);\r\n        }\r\n\r\n        setCurrentSteps(currentMinuteData.steps);\r\n      \r\n        minuteIndexRef.current = nextMinuteIndex;\r\n      //   return nextMinuteIndex;\r\n      // });\r\n    }, 16); // 0.1 second = 1 simulated minute\r\n\r\n    return () => clearInterval(interval);\r\n  }, [minuteSeries, hourSeries, daySeries, sleepSeries, dailySteps]);\r\n\r\n  if (minuteSeries.length === 0) {\r\n    console.log(\"Loading data, minuteSeries.length:\", minuteSeries.length);\r\n    return <p>Loading data…</p>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"dashboard-grid\">\r\n      {currentDataPoint && (\r\n      <> \r\n        <div className=\"card\" id=\"multi\">\r\n          <MultiChart data={currentDataPoint} steps={currentSteps} timestamp={currentDataPoint.timestamp} />\r\n      </div>\r\n        <div className=\"card\" id=\"stress\">\r\n          <div className=\"gauge\">\r\n            <GaugeChart data={{ data: currentDataPoint?.stress }} number={currentDataPoint?.stress} title=\"Stress Level\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"card\" id=\"steps\">\r\n          <div className=\"bar\">\r\n            <BarChart data={{ data: dailySteps }} title=\"Daily Steps\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"card\" id=\"status\">\r\n          <div className=\"gauge\">\r\n            <GaugeChart data={{ data: currentDataPoint?.temperature }} number={currentDataPoint?.temperature} title=\"Body Temperature\" />\r\n          </div>         \r\n        </div>\r\n      </>\r\n      )}\r\n      {avgStages && (\r\n        <div className=\"card\" id=\"avgstages\">\r\n          <div className=\"pie\">\r\n            <PieChart data={avgStages} title=\"Sleep Quality Average\"/>\r\n          </div> \r\n        </div>\r\n      )}\r\n      {currentDataPoint && (\r\n      <>\r\n        <div className=\"card\" id=\"laststages\">\r\n          <div className=\"span\">\r\n            <SpanChart data={currentStages}/>\r\n          </div> \r\n        </div>\r\n        <div className=\"card\" id=\"index\">\r\n          <div className=\"spider\">\r\n            <SpiderChart data={wellness}/>\r\n          </div> \r\n        </div>\r\n        <div className=\"card\" id=\"activity\">\r\n          <div className=\"mosaic\">\r\n            <MosaicChart data={activity}/>\r\n          </div> \r\n        </div>\r\n      </>\r\n      )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}