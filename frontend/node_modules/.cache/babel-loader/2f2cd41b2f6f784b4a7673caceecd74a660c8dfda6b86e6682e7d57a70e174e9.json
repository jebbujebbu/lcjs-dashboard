{"ast":null,"code":"var _jsxFileName = \"D:\\\\Repos\\\\lcjs-dashboard\\\\frontend\\\\src\\\\components\\\\charts\\\\GaugeChart.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useContext, useId } from \"react\";\nimport { LCContext } from \"../../LC\";\nimport { ColorHEX, Themes, SolidFill } from \"@lightningchart/lcjs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GaugeChart(props) {\n  _s();\n  const {\n    data\n  } = props.data;\n  const title = props.title;\n  const id = useId();\n  const lc = useContext(LCContext);\n  const [gauge, setGauge] = useState(undefined);\n\n  // Create chart just once during lifecycle of component\n  useEffect(() => {\n    const container = document.getElementById(id);\n    if (!container) return;\n    if (!lc) {\n      console.log(\"LC context not ready yet\");\n      return;\n    }\n    const gauge = lc.Gauge({\n      container,\n      // Add container to gauge creation\n      theme: Themes.cyberSpace\n    });\n    gauge.setTitle('').setGapBetweenBarAndValueIndicators(2).setTickFormatter(value => {\n      if (value === gauge.getInterval().start || value === gauge.getInterval().end) {\n        return '';\n      }\n      return `${value}`;\n    }).setGlowColor(undefined).setBackgroundFillStyle(new SolidFill({\n      color: ColorHEX('#000000')\n    }));\n\n    // Scale the gauge automatically based on screen size\n    gauge.addEventListener('resize', event => {\n      const size = Math.min(event.width, event.height);\n      gauge.setBarThickness(size / 10).setNeedleLength(gauge.getBarThickness() * 2).setValueIndicatorThickness(gauge.getBarThickness() / 3).setNeedleThickness(gauge.getBarThickness() / 10);\n      const fontSizeBig = Math.round(size / 10);\n      const fontSizeSmaller = Math.round(size / 20);\n      gauge.setUnitLabelFont(font => font.setSize(fontSizeSmaller));\n      gauge.setTickFont(font => font.setSize(fontSizeSmaller));\n      gauge.setValueLabelFont(font => font.setSize(fontSizeBig));\n    });\n    setGauge(gauge);\n    return () => {\n      // Destroy chart when component lifecycle ends\n      gauge.dispose();\n    };\n  }, [id, lc]);\n\n  // Update gauge data whenever data prop changes\n  useEffect(() => {\n    if (!gauge || data === undefined || gauge.isDisposed()) return;\n    if (title === \"Body Temperature\") {\n      // Scale gauge range to match body temperature (35-39°C)\n      gauge.setAngleInterval(180, 0).setInterval(34.5, 39).setValueIndicators([{\n        start: 34.5,\n        end: 36.0,\n        color: ColorHEX(\"#5262b0ff\"),\n        startLabel: '',\n        endLabel: ''\n      }, {\n        start: 36.0,\n        end: 37.5,\n        color: ColorHEX(\"#5ec69cff\"),\n        startLabel: '',\n        endLabel: ''\n      }, {\n        start: 37.5,\n        end: 39,\n        color: ColorHEX(\"#973849ff\"),\n        startLabel: '',\n        endLabel: ''\n      }]);\n    }\n    if (title === \"Stress Level\") {\n      gauge.setInterval(0, 100).setValueIndicators([{\n        start: 0,\n        end: 33,\n        color: ColorHEX(\"#5ec69cff\"),\n        startLabel: '',\n        endLabel: ''\n      }, {\n        start: 33,\n        end: 66,\n        color: ColorHEX(\"#8752b0ff\"),\n        startLabel: '',\n        endLabel: ''\n      }, {\n        start: 66,\n        end: 100,\n        color: ColorHEX(\"#973849ff\"),\n        startLabel: '',\n        endLabel: ''\n      }]);\n    }\n    gauge.setValue(data);\n  }, [gauge, data, title]);\n\n  // Whenever props.title changes, it is reapplied to existing chart without recreating it\n  useEffect(() => {\n    if (!gauge) return;\n    gauge.setTitle(title);\n  }, [gauge, title]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: id,\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 10\n  }, this);\n}\n_s(GaugeChart, \"fg+cW/7Wadz4TxOlHnrEErbLAuU=\", false, function () {\n  return [useId];\n});\n_c = GaugeChart;\nvar _c;\n$RefreshReg$(_c, \"GaugeChart\");","map":{"version":3,"names":["useEffect","useState","useContext","useId","LCContext","ColorHEX","Themes","SolidFill","jsxDEV","_jsxDEV","GaugeChart","props","_s","data","title","id","lc","gauge","setGauge","undefined","container","document","getElementById","console","log","Gauge","theme","cyberSpace","setTitle","setGapBetweenBarAndValueIndicators","setTickFormatter","value","getInterval","start","end","setGlowColor","setBackgroundFillStyle","color","addEventListener","event","size","Math","min","width","height","setBarThickness","setNeedleLength","getBarThickness","setValueIndicatorThickness","setNeedleThickness","fontSizeBig","round","fontSizeSmaller","setUnitLabelFont","font","setSize","setTickFont","setValueLabelFont","dispose","isDisposed","setAngleInterval","setInterval","setValueIndicators","startLabel","endLabel","setValue","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Repos/lcjs-dashboard/frontend/src/components/charts/GaugeChart.jsx"],"sourcesContent":["import { useEffect, useState, useContext, useId } from \"react\";\r\nimport { LCContext } from \"../../LC\";\r\nimport { ColorHEX, Themes, SolidFill } from \"@lightningchart/lcjs\";\r\n\r\nexport default function GaugeChart(props) {\r\n  const { data } = props.data;\r\n  const title = props.title;\r\n  const id = useId();\r\n  const lc = useContext(LCContext);\r\n  const [gauge, setGauge] = useState(undefined);\r\n\r\n  // Create chart just once during lifecycle of component\r\n  useEffect(() => {\r\n    const container = document.getElementById(id);\r\n    if (!container) return\r\n    if (!lc) {\r\n      console.log(\"LC context not ready yet\");\r\n      return\r\n    }\r\n    const gauge = lc.Gauge({\r\n      container, // Add container to gauge creation\r\n      theme: Themes.cyberSpace,\r\n    });\r\n    gauge\r\n      .setTitle('')\r\n      .setGapBetweenBarAndValueIndicators(2)\r\n      .setTickFormatter((value) => {\r\n        if (value === gauge.getInterval().start || value === gauge.getInterval().end) {\r\n            return ''\r\n        }\r\n        return `${value}`\r\n      })\r\n      .setGlowColor(undefined)\r\n      .setBackgroundFillStyle(new SolidFill({ color: ColorHEX('#000000') }));\r\n\r\n      // Scale the gauge automatically based on screen size\r\n      gauge.addEventListener('resize', (event) => {\r\n        const size = Math.min(event.width, event.height)\r\n        gauge\r\n            .setBarThickness(size / 10)\r\n            .setNeedleLength(gauge.getBarThickness() * 2)\r\n            .setValueIndicatorThickness(gauge.getBarThickness() / 3)\r\n            .setNeedleThickness(gauge.getBarThickness() / 10)\r\n        const fontSizeBig = Math.round(size / 10)\r\n        const fontSizeSmaller = Math.round(size / 20)\r\n        gauge.setUnitLabelFont((font) => font.setSize(fontSizeSmaller))\r\n        gauge.setTickFont((font) => font.setSize(fontSizeSmaller))\r\n        gauge.setValueLabelFont((font) => font.setSize(fontSizeBig))\r\n      });\r\n    \r\n    setGauge(gauge);\r\n    return () => {\r\n      // Destroy chart when component lifecycle ends\r\n      gauge.dispose();\r\n    };\r\n  }, [id, lc]); \r\n\r\n  // Update gauge data whenever data prop changes\r\n  useEffect(() => {\r\n    if (!gauge || data === undefined || gauge.isDisposed()) return\r\n    \r\n    if (title === \"Body Temperature\") {\r\n      // Scale gauge range to match body temperature (35-39°C)\r\n      gauge\r\n      .setAngleInterval(180, 0)\r\n      .setInterval(34.5, 39)\r\n      .setValueIndicators([\r\n        { start: 34.5, end: 36.0, color: ColorHEX((\"#5262b0ff\")), startLabel: '', endLabel: ''  },\r\n        { start: 36.0, end: 37.5, color: ColorHEX((\"#5ec69cff\")), startLabel: '', endLabel: '' },\r\n        { start: 37.5, end: 39, color: ColorHEX((\"#973849ff\")), startLabel: '', endLabel: '' },\r\n      ]);\r\n    }\r\n    if(title === \"Stress Level\") {\r\n      gauge\r\n      .setInterval(0, 100)\r\n      .setValueIndicators([\r\n          { start: 0, end: 33, color: ColorHEX((\"#5ec69cff\")), startLabel: '', endLabel: ''  },\r\n          { start: 33, end: 66, color: ColorHEX((\"#8752b0ff\")), startLabel: '', endLabel: '' },\r\n          { start: 66, end: 100, color: ColorHEX((\"#973849ff\")), startLabel: '', endLabel: '' },\r\n      ])\r\n    }\r\n    gauge.setValue(data);\r\n  }, [gauge, data, title]);\r\n\r\n  // Whenever props.title changes, it is reapplied to existing chart without recreating it\r\n  useEffect(() => {\r\n    if (!gauge) return\r\n    gauge.setTitle(title)\r\n  }, [gauge, title]);\r\n\r\n  return <div id={id} style={{ width: \"100%\", height: \"100%\" }}></div>;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}