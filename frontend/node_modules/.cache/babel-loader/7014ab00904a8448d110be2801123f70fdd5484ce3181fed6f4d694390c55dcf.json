{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jenni.mikkonen\\\\OneDrive - LightningChart Ltd\\\\Repos\\\\lcjs-dashboard\\\\frontend\\\\src\\\\components\\\\charts\\\\SpiderChart.jsx\",\n  _s = $RefreshSig$();\nimport { Themes } from \"@lightningchart/lcjs\";\nimport { useEffect, useState, useContext, useId } from \"react\";\nimport { LCContext } from \"../../LC\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SpiderChart(props) {\n  _s();\n  const data = props.data;\n  // console.log('SpiderChart data', data);\n  const id = useId();\n  const lc = useContext(LCContext);\n  const [chart, setChart] = useState(undefined);\n  const categories = ['Sleep Quality', 'Heart Rate', 'Stress Level', 'Activity'];\n\n  // Create chart just once during lifecycle of component.\n  useEffect(() => {\n    const container = document.getElementById(id);\n    if (!container) return;\n    if (!lc) {\n      console.log(\"LC context not ready yet\");\n      return;\n    }\n    const chart = lc.Spider({\n      legend: {\n        visible: false\n      },\n      theme: Themes.cyberSpace,\n      container\n    });\n    chart.setTitle('Wellness Index').setAxisInterval(100).setAxisInterval(100).setScaleLabelStrategy(undefined);\n    // .setBackgroundFillStyle(new SolidFill({ color: ColorHEX(\"#db94c6\") }))\n    // .setSeriesBackgroundFillStyle(new SolidFill({ color: ColorHEX(\"#db94c6\") }))\n\n    const series = [chart.addSeries().setName('Average'), chart.addSeries().setName('Me')];\n    series.forEach((value, i) => {\n      value.setPointSize(5);\n    });\n\n    //This is for Average Series (typical healthy adult averages).\n    series[0].addPoints({\n      axis: categories[0],\n      value: 72\n    },\n    // Sleep Quality: 72% (good sleep efficiency)\n    {\n      axis: categories[1],\n      value: 68\n    },\n    // Heart Rate: 68% (healthy resting HR score)\n    {\n      axis: categories[2],\n      value: 58\n    },\n    // Stress Level: 58% (moderate stress management)\n    {\n      axis: categories[3],\n      value: 65\n    } // Activity: 65% (moderately active lifestyle)\n    );\n    setChart({\n      chart,\n      series\n    });\n    return () => {\n      // Destroy chart when component lifecycle ends.\n      chart.dispose();\n    };\n  }, [id, lc]);\n\n  // Update series data whenever data prop changes.\n  useEffect(() => {\n    if (!chart || !data || chart.chart.isDisposed()) return;\n    // console.log(\"SpiderChart update, data: \", data)\n\n    const newPoints = [{\n      axis: categories[0],\n      value: data.sleepQuality || 0\n    }, {\n      axis: categories[1],\n      value: data.heartRate || 0\n    }, {\n      axis: categories[2],\n      value: data.stressLevel || 0\n    }, {\n      axis: categories[3],\n      value: data.activity || 0\n    }];\n    chart.series[1].addPoints(...newPoints);\n  }, [chart, data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: id,\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 10\n  }, this);\n}\n_s(SpiderChart, \"lPoGF9T2AB4o0eYXL6tWsHPot3c=\", false, function () {\n  return [useId];\n});\n_c = SpiderChart;\nvar _c;\n$RefreshReg$(_c, \"SpiderChart\");","map":{"version":3,"names":["Themes","useEffect","useState","useContext","useId","LCContext","jsxDEV","_jsxDEV","SpiderChart","props","_s","data","id","lc","chart","setChart","undefined","categories","container","document","getElementById","console","log","Spider","legend","visible","theme","cyberSpace","setTitle","setAxisInterval","setScaleLabelStrategy","series","addSeries","setName","forEach","value","i","setPointSize","addPoints","axis","dispose","isDisposed","newPoints","sleepQuality","heartRate","stressLevel","activity","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/jenni.mikkonen/OneDrive - LightningChart Ltd/Repos/lcjs-dashboard/frontend/src/components/charts/SpiderChart.jsx"],"sourcesContent":["import { Themes } from \"@lightningchart/lcjs\";\r\nimport { useEffect, useState, useContext, useId } from \"react\";\r\nimport { LCContext } from \"../../LC\";\r\n\r\nexport default function SpiderChart(props) {\r\n  const data = props.data;\r\n  // console.log('SpiderChart data', data);\r\n  const id = useId();\r\n  const lc = useContext(LCContext);\r\n  const [chart, setChart] = useState(undefined);\r\n  const categories = ['Sleep Quality', 'Heart Rate', 'Stress Level', 'Activity']\r\n\r\n  // Create chart just once during lifecycle of component.\r\n  useEffect(() => {\r\n    const container = document.getElementById(id);\r\n    if (!container) return\r\n    if (!lc) {\r\n      console.log(\"LC context not ready yet\");\r\n      return\r\n    }\r\n\r\n    const chart = lc.Spider({\r\n      legend: { visible: false },\r\n      theme: Themes.cyberSpace,\r\n      container,\r\n    });\r\n\r\n    chart.setTitle('Wellness Index')\r\n    .setAxisInterval(100)\r\n    .setAxisInterval(100)\r\n    .setScaleLabelStrategy(undefined)\r\n    // .setBackgroundFillStyle(new SolidFill({ color: ColorHEX(\"#db94c6\") }))\r\n    // .setSeriesBackgroundFillStyle(new SolidFill({ color: ColorHEX(\"#db94c6\") }))\r\n\r\n    const series = [chart.addSeries().setName('Average'), chart.addSeries().setName('Me')]\r\n    series.forEach((value, i) => {\r\n        value.setPointSize(5)\r\n    })\r\n\r\n    //This is for Average Series (typical healthy adult averages).\r\n    series[0].addPoints(\r\n        { axis: categories[0], value: 72 },  // Sleep Quality: 72% (good sleep efficiency)\r\n        { axis: categories[1], value: 68 },  // Heart Rate: 68% (healthy resting HR score)\r\n        { axis: categories[2], value: 58 },  // Stress Level: 58% (moderate stress management)\r\n        { axis: categories[3], value: 65 },  // Activity: 65% (moderately active lifestyle)\r\n    )\r\n\r\n    setChart({ chart, series });\r\n    \r\n    return () => {\r\n      // Destroy chart when component lifecycle ends.\r\n      chart.dispose();\r\n    };\r\n  }, [id, lc]); \r\n\r\n  // Update series data whenever data prop changes.\r\n  useEffect(() => {\r\n    if (!chart || !data || chart.chart.isDisposed()) return\r\n    // console.log(\"SpiderChart update, data: \", data)\r\n    \r\n    const newPoints = [\r\n        { axis: categories[0], value: data.sleepQuality || 0 },\r\n        { axis: categories[1], value: data.heartRate || 0 },\r\n        { axis: categories[2], value: data.stressLevel || 0 },\r\n        { axis: categories[3], value: data.activity || 0 }\r\n    ];\r\n    \r\n    chart.series[1].addPoints(...newPoints);\r\n  }, [chart, data]);\r\n\r\n  return <div id={id} style={{ width: \"100%\", height: \"100%\" }}></div>;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}