{"ast":null,"code":"var _jsxFileName = \"D:\\\\Repos\\\\lcjs-dashboard\\\\frontend\\\\src\\\\components\\\\MultiChart.jsx\",\n  _s = $RefreshSig$();\nimport { Themes, AxisScrollStrategies, AxisTickStrategies, emptyLine } from \"@lightningchart/lcjs\";\nimport { useEffect, useState, useContext, useId } from \"react\";\nimport { LCContext } from \"../LC\";\nimport \"../styles/Dashboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MultiChart(props) {\n  _s();\n  //   const { data } = props.data;\n  const heartRate = props.data.heart_rate;\n  const steps = props.steps;\n  const calories = props.data.calories;\n  // console.log(`MultiChart received data: ${data}, ${heartRate}, ${steps}, ${calories}`);\n  const titles = [\"Heart Rate\", \"Steps/Min\", \"Kcal/Min\"];\n\n  // Create HTML elements for the dashboard layout\n  const id = useId();\n  const lc = useContext(LCContext);\n  const [charts, setCharts] = useState(undefined);\n  const [gauges, setGauges] = useState(undefined);\n\n  // Create chart just once during lifecycle of component.\n  useEffect(() => {\n    const container = document.getElementById(id);\n    if (!container) return;\n    if (!lc) {\n      console.log(\"LC context not ready yet\");\n      return;\n    }\n\n    // Apply CSS class to root container\n    container.className = \"multiChartContainer\";\n\n    // Create child divs\n    const gaugeLayout = document.createElement('div');\n    gaugeLayout.className = \"gaugeLayout\";\n    container.append(gaugeLayout);\n    const xyContainer = document.createElement('div');\n    xyContainer.className = \"xyContainer\";\n    container.append(xyContainer);\n    console.log(\"Container size:\", container.clientWidth, container.clientHeight);\n    console.log(\"XY container size:\", xyContainer.clientWidth, xyContainer.clientHeight);\n\n    // container.style.display = 'flex'\n    // container.style.flex = '1'\n    // container.style.flexDirection = 'row'\n    // container.style.width = '100%'\n    // container.style.height = '100%'\n    // container.style.boxSizing = 'border-box'\n    // container.style.margin = '0'\n    // container.style.padding = '0'\n    // console.log(\"Container size:\",\n    //     container.clientWidth,\n    //     container.clientHeight\n    // )\n    // const gaugeLayout = document.createElement('div')\n    // container.append(gaugeLayout)\n    // gaugeLayout.style.flex = '0 0 25%'\n    // // gaugeLayout.style.width = '25%'\n    // gaugeLayout.style.height = '100%'\n    // gaugeLayout.style.boxSizing = 'border-box'\n    // const xyContainer = document.createElement('div')\n    // container.append(xyContainer)\n    // xyContainer.style.flex = '1 1 0' \n    // xyContainer.style.width = '100%'  \n    // xyContainer.style.height = '100%'\n    // xyContainer.style.boxSizing = 'border-box'\n    //     gaugeLayout.className = \"gaugeLayout\"\n    // xyContainer.className = \"xyContainer\"\n\n    // console.log(\"XY container size:\",\n    //     xyContainer.clientWidth,\n    //     xyContainer.clientHeight\n    // )\n\n    const gaugeChartArray = [];\n    const lineSeriesArray = [];\n\n    // Create XY chart for line series\n    const xyChart = lc.ChartXY({\n      legend: {\n        visible: false\n      },\n      container: xyContainer,\n      theme: Themes.darkGold\n    }).setTitle('').setCursor(cursor => cursor.setTickMarkerXVisible(false));\n    xyChart.getDefaultAxisX().setTickStrategy(AxisTickStrategies.Empty).setThickness(0).setStrokeStyle(emptyLine).setScrollStrategy(AxisScrollStrategies.scrolling).setInterval({\n      start: 0,\n      end: 10000,\n      stopAxisAfter: false\n    });\n    xyChart.getDefaultAxisY().dispose();\n\n    // Create dashboard rows\n    for (let iCh = 0; iCh < 3; iCh++) {\n      const axisY = xyChart.addAxisY({\n        iStack: 3 - iCh\n      }).setMargins(5, 5).setInterval({\n        start: 0,\n        end: 100\n      });\n      const lineSeries = xyChart.addLineSeries({\n        axisY\n      }).setMaxSampleCount(10000);\n      lineSeriesArray.push(lineSeries);\n      const gaugeContainer = document.createElement('div');\n      gaugeLayout.append(gaugeContainer);\n      gaugeContainer.style.height = '33.33%';\n      const gauge = lc.Gauge({\n        container: gaugeContainer,\n        theme: Themes.cyberSpace\n      }).setTitle('').setUnitLabel(titles[iCh]).setInterval(0, 100).setAngleInterval(180, 0).setRoundedEdges(false).setBarThickness(20).setNeedleLength(20).setNeedleThickness(5).setValueIndicatorThickness(10).setGapBetweenBarAndValueIndicators(1).setTickFormatter(tick => tick.toFixed(0)).setValueLabelFont(font => font.setSize(24)).setUnitLabelFont(font => font.setSize(16)).setTickFont(font => font.setSize(16));\n      gaugeChartArray.push(gauge);\n    }\n\n    // Construct value indicator array from a color palette\n    const valueIndicators = [];\n    const colorPalette = gaugeChartArray[0].getTheme().examples.badGoodColorPalette;\n    const intervalStart = 0;\n    const intervalEnd = 100;\n    const stepSize = (intervalEnd - intervalStart) / colorPalette.length;\n    colorPalette.forEach((color, index) => {\n      valueIndicators.push({\n        start: intervalStart + stepSize * index,\n        end: intervalStart + stepSize * (index + 1),\n        color\n      });\n    });\n    gaugeChartArray.forEach(gauge => gauge.setValueIndicators(valueIndicators));\n    setCharts(lineSeriesArray);\n    setGauges(gaugeChartArray);\n\n    // Cleanup function\n    return () => {\n      xyChart.dispose();\n      gaugeChartArray.forEach(gauge => gauge.dispose());\n    };\n  }, [id, lc]);\n\n  // Update line series data whenever data prop changes.\n  useEffect(() => {\n    if (!charts) return;\n    // console.log(\"MultiChart charts update, \", charts[0])\n    charts[0].axisY.setInterval({\n      start: 20,\n      end: 150\n    });\n    charts[0].appendJSON({\n      x: performance.now(),\n      y: heartRate\n    });\n    charts[1].axisY.setInterval({\n      start: 0,\n      end: 150\n    });\n    charts[1].appendJSON({\n      x: performance.now(),\n      y: steps\n    });\n    charts[2].axisY.setInterval({\n      start: 0,\n      end: 15\n    });\n    charts[2].appendJSON({\n      x: performance.now(),\n      y: calories\n    });\n  }, [charts, heartRate, steps, calories]);\n\n  // Update gauge data whenever data prop changes\n  useEffect(() => {\n    if (!gauges || gauges.length === 0) return;\n    // console.log(\"MultiChart gauges update\"); \n    gauges[0].setValue(heartRate);\n    gauges[1].setValue(steps);\n    gauges[2].setValue(calories);\n  }, [gauges, heartRate, steps, calories]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: id,\n    className: \"multiChartContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gaugeLayout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"xyContainer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 3\n  }, this);\n}\n_s(MultiChart, \"B/mQ+QacWDmc/Dd1pySnZP72pWc=\", false, function () {\n  return [useId];\n});\n_c = MultiChart;\nvar _c;\n$RefreshReg$(_c, \"MultiChart\");","map":{"version":3,"names":["Themes","AxisScrollStrategies","AxisTickStrategies","emptyLine","useEffect","useState","useContext","useId","LCContext","jsxDEV","_jsxDEV","MultiChart","props","_s","heartRate","data","heart_rate","steps","calories","titles","id","lc","charts","setCharts","undefined","gauges","setGauges","container","document","getElementById","console","log","className","gaugeLayout","createElement","append","xyContainer","clientWidth","clientHeight","gaugeChartArray","lineSeriesArray","xyChart","ChartXY","legend","visible","theme","darkGold","setTitle","setCursor","cursor","setTickMarkerXVisible","getDefaultAxisX","setTickStrategy","Empty","setThickness","setStrokeStyle","setScrollStrategy","scrolling","setInterval","start","end","stopAxisAfter","getDefaultAxisY","dispose","iCh","axisY","addAxisY","iStack","setMargins","lineSeries","addLineSeries","setMaxSampleCount","push","gaugeContainer","style","height","gauge","Gauge","cyberSpace","setUnitLabel","setAngleInterval","setRoundedEdges","setBarThickness","setNeedleLength","setNeedleThickness","setValueIndicatorThickness","setGapBetweenBarAndValueIndicators","setTickFormatter","tick","toFixed","setValueLabelFont","font","setSize","setUnitLabelFont","setTickFont","valueIndicators","colorPalette","getTheme","examples","badGoodColorPalette","intervalStart","intervalEnd","stepSize","length","forEach","color","index","setValueIndicators","appendJSON","x","performance","now","y","setValue","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Repos/lcjs-dashboard/frontend/src/components/MultiChart.jsx"],"sourcesContent":["import { Themes, AxisScrollStrategies, AxisTickStrategies, emptyLine } from \"@lightningchart/lcjs\";\r\nimport { useEffect, useState, useContext, useId } from \"react\";\r\nimport { LCContext } from \"../LC\";\r\nimport \"../styles/Dashboard.css\";\r\n\r\nexport default function MultiChart(props) {\r\n//   const { data } = props.data;\r\n  const heartRate = props.data.heart_rate;\r\n  const steps = props.steps;\r\n  const calories = props.data.calories;\r\n  // console.log(`MultiChart received data: ${data}, ${heartRate}, ${steps}, ${calories}`);\r\n  const titles = [\"Heart Rate\", \"Steps/Min\", \"Kcal/Min\"];\r\n\r\n  // Create HTML elements for the dashboard layout\r\n  const id = useId();\r\n  const lc = useContext(LCContext);\r\n  const [charts, setCharts] = useState(undefined);\r\n  const [gauges, setGauges] = useState(undefined);\r\n\r\n\r\n  // Create chart just once during lifecycle of component.\r\n  useEffect(() => {\r\n    const container = document.getElementById(id);\r\n    if (!container) return\r\n    if (!lc) {\r\n      console.log(\"LC context not ready yet\");\r\n      return\r\n    }\r\n\r\n    // Apply CSS class to root container\r\n    container.className = \"multiChartContainer\"\r\n\r\n    // Create child divs\r\n    const gaugeLayout = document.createElement('div')\r\n    gaugeLayout.className = \"gaugeLayout\"\r\n    container.append(gaugeLayout)\r\n\r\n    const xyContainer = document.createElement('div')\r\n    xyContainer.className = \"xyContainer\"\r\n    container.append(xyContainer)\r\n\r\n    console.log(\"Container size:\", container.clientWidth, container.clientHeight)\r\n    console.log(\"XY container size:\", xyContainer.clientWidth, xyContainer.clientHeight)\r\n\r\n\r\n    // container.style.display = 'flex'\r\n    // container.style.flex = '1'\r\n    // container.style.flexDirection = 'row'\r\n    // container.style.width = '100%'\r\n    // container.style.height = '100%'\r\n    // container.style.boxSizing = 'border-box'\r\n    // container.style.margin = '0'\r\n    // container.style.padding = '0'\r\n    // console.log(\"Container size:\",\r\n    //     container.clientWidth,\r\n    //     container.clientHeight\r\n    // )\r\n    // const gaugeLayout = document.createElement('div')\r\n    // container.append(gaugeLayout)\r\n    // gaugeLayout.style.flex = '0 0 25%'\r\n    // // gaugeLayout.style.width = '25%'\r\n    // gaugeLayout.style.height = '100%'\r\n    // gaugeLayout.style.boxSizing = 'border-box'\r\n    // const xyContainer = document.createElement('div')\r\n    // container.append(xyContainer)\r\n    // xyContainer.style.flex = '1 1 0' \r\n    // xyContainer.style.width = '100%'  \r\n    // xyContainer.style.height = '100%'\r\n    // xyContainer.style.boxSizing = 'border-box'\r\n//     gaugeLayout.className = \"gaugeLayout\"\r\n// xyContainer.className = \"xyContainer\"\r\n\r\n    // console.log(\"XY container size:\",\r\n    //     xyContainer.clientWidth,\r\n    //     xyContainer.clientHeight\r\n    // )\r\n\r\n    const gaugeChartArray = []\r\n    const lineSeriesArray = []\r\n\r\n    // Create XY chart for line series\r\n    const xyChart = lc\r\n        .ChartXY({\r\n            legend: { visible: false },\r\n            container: xyContainer,\r\n            theme: Themes.darkGold,\r\n        })\r\n        .setTitle('')\r\n        .setCursor((cursor) => cursor.setTickMarkerXVisible(false))\r\n    xyChart\r\n        .getDefaultAxisX()\r\n        .setTickStrategy(AxisTickStrategies.Empty)\r\n        .setThickness(0)\r\n        .setStrokeStyle(emptyLine)\r\n        .setScrollStrategy(AxisScrollStrategies.scrolling)\r\n        .setInterval({ start: 0, end: 10_000, stopAxisAfter: false })\r\n    xyChart.getDefaultAxisY().dispose()\r\n\r\n    // Create dashboard rows\r\n    for (let iCh = 0; iCh < 3; iCh++) {\r\n        const axisY = xyChart\r\n            .addAxisY({ iStack: 3 - iCh })\r\n            .setMargins(5, 5)\r\n            .setInterval({ start: 0, end: 100 })\r\n        const lineSeries = xyChart.addLineSeries({ axisY }).setMaxSampleCount(10_000)\r\n        lineSeriesArray.push(lineSeries)\r\n\r\n        const gaugeContainer = document.createElement('div')\r\n        gaugeLayout.append(gaugeContainer)\r\n        gaugeContainer.style.height = '33.33%'\r\n        const gauge = lc\r\n            .Gauge({\r\n                container: gaugeContainer,\r\n                theme: Themes.cyberSpace,\r\n            })\r\n            .setTitle('')\r\n            .setUnitLabel(titles[iCh])\r\n            .setInterval(0, 100)\r\n            .setAngleInterval(180, 0)\r\n            .setRoundedEdges(false)\r\n            .setBarThickness(20)\r\n            .setNeedleLength(20)\r\n            .setNeedleThickness(5)\r\n            .setValueIndicatorThickness(10)\r\n            .setGapBetweenBarAndValueIndicators(1)\r\n            .setTickFormatter((tick) => tick.toFixed(0))\r\n            .setValueLabelFont((font) => font.setSize(24))\r\n            .setUnitLabelFont((font) => font.setSize(16))\r\n            .setTickFont((font) => font.setSize(16))\r\n        gaugeChartArray.push(gauge)\r\n    }\r\n\r\n    // Construct value indicator array from a color palette\r\n    const valueIndicators = []\r\n    const colorPalette = gaugeChartArray[0].getTheme().examples.badGoodColorPalette\r\n    const intervalStart = 0\r\n    const intervalEnd = 100\r\n    const stepSize = (intervalEnd - intervalStart) / colorPalette.length\r\n    colorPalette.forEach((color, index) => {\r\n        valueIndicators.push({\r\n            start: intervalStart + stepSize * index,\r\n            end: intervalStart + stepSize * (index + 1),\r\n            color,\r\n        })\r\n    })\r\n    gaugeChartArray.forEach((gauge) => gauge.setValueIndicators(valueIndicators))\r\n\r\n    setCharts(lineSeriesArray);\r\n    setGauges(gaugeChartArray);\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      xyChart.dispose();\r\n      gaugeChartArray.forEach(gauge => gauge.dispose());\r\n    };\r\n  }, [id, lc]); \r\n\r\n  // Update line series data whenever data prop changes.\r\n  useEffect(() => {\r\n      if (!charts) return\r\n      // console.log(\"MultiChart charts update, \", charts[0])\r\n      charts[0].axisY.setInterval({ start: 20, end: 150 });\r\n      charts[0].appendJSON({ x: performance.now(), y: heartRate })\r\n      charts[1].axisY.setInterval({ start: 0, end: 150 });\r\n      charts[1].appendJSON({ x: performance.now(), y: steps })\r\n      charts[2].axisY.setInterval({ start: 0, end: 15 });\r\n      charts[2].appendJSON({ x: performance.now(), y: calories })\r\n  }, [charts, heartRate, steps, calories]);\r\n\r\n  // Update gauge data whenever data prop changes\r\n  useEffect(() => {\r\n      if (!gauges || gauges.length === 0) return\r\n      // console.log(\"MultiChart gauges update\"); \r\n      gauges[0].setValue(heartRate)\r\n      gauges[1].setValue(steps)\r\n      gauges[2].setValue(calories)\r\n  }, [gauges, heartRate, steps, calories]);\r\n\r\n  return (\r\n  <div id={id} className=\"multiChartContainer\">\r\n    <div className=\"gaugeLayout\" />\r\n    <div className=\"xyContainer\" />\r\n  </div>\r\n  );\r\n}       \r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}