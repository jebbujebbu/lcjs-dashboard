{"ast":null,"code":"// utils/toChartSpans.js\nexport default function toChartSpans(levels) {\n  if (!Array.isArray(levels) || levels.length === 0) {\n    return []; // nothing to render\n  }\n  const stageOrder = [\"light\", \"deep\", \"rem\"]; // only stages we want in chart\n  const grouped = {\n    light: [],\n    deep: [],\n    rem: []\n  };\n\n  // Use the first entry as reference date\n  const refDate = new Date(levels[0].start);\n  levels.filter(l => l && l.stage && l.start && l.end && l.stage !== \"wake\") // skip invalid + wake\n  .forEach(l => {\n    grouped[l.stage].push([parseTimeToHourFraction(l.start, refDate), parseTimeToHourFraction(l.end, refDate)]);\n  });\n  return stageOrder.map(stage => ({\n    stage,\n    spans: grouped[stage]\n  }));\n}\nfunction parseTimeToHourFraction(timeStr, referenceDate) {\n  if (!timeStr) return 0;\n  const d = new Date(timeStr);\n\n  // Absolute hour of the day\n  let hours = d.getHours() + d.getMinutes() / 60;\n\n  // Add day offset (0 for same day, 24 if next day, etc.)\n  const dayOffset = Math.floor((d - referenceDate) / (1000 * 60 * 60 * 24));\n  hours += dayOffset * 24;\n\n  // Align to chart axis: keep values in [20, 32]\n  if (hours < 20) {\n    hours += 24; // e.g. 00:30 → 24.5\n  }\n  return hours;\n}","map":{"version":3,"names":["toChartSpans","levels","Array","isArray","length","stageOrder","grouped","light","deep","rem","refDate","Date","start","filter","l","stage","end","forEach","push","parseTimeToHourFraction","map","spans","timeStr","referenceDate","d","hours","getHours","getMinutes","dayOffset","Math","floor"],"sources":["D:/Repos/lcjs-dashboard/frontend/src/utils/toChartSpans.js"],"sourcesContent":["// utils/toChartSpans.js\r\nexport default function toChartSpans(levels) {\r\n  if (!Array.isArray(levels) || levels.length === 0) {\r\n    return []   // nothing to render\r\n  }\r\n\r\n  const stageOrder = [\"light\", \"deep\", \"rem\"]   // only stages we want in chart\r\n  const grouped = { light: [], deep: [], rem: [] }\r\n\r\n  // Use the first entry as reference date\r\n  const refDate = new Date(levels[0].start)\r\n\r\n  levels\r\n    .filter(l => l && l.stage && l.start && l.end && l.stage !== \"wake\") // skip invalid + wake\r\n    .forEach(l => {\r\n      grouped[l.stage].push([\r\n        parseTimeToHourFraction(l.start, refDate),\r\n        parseTimeToHourFraction(l.end, refDate),\r\n      ])\r\n    })\r\n\r\n  return stageOrder.map(stage => ({ stage, spans: grouped[stage] }))\r\n}\r\n\r\nfunction parseTimeToHourFraction(timeStr, referenceDate) {\r\n  if (!timeStr) return 0\r\n  const d = new Date(timeStr)\r\n\r\n  // Absolute hour of the day\r\n  let hours = d.getHours() + d.getMinutes() / 60\r\n\r\n  // Add day offset (0 for same day, 24 if next day, etc.)\r\n  const dayOffset = Math.floor((d - referenceDate) / (1000 * 60 * 60 * 24))\r\n  hours += dayOffset * 24\r\n\r\n  // Align to chart axis: keep values in [20, 32]\r\n  if (hours < 20) {\r\n    hours += 24 // e.g. 00:30 → 24.5\r\n  }\r\n\r\n  return hours\r\n}\r\n"],"mappings":"AAAA;AACA,eAAe,SAASA,YAAYA,CAACC,MAAM,EAAE;EAC3C,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,MAAM,CAAC,IAAIA,MAAM,CAACG,MAAM,KAAK,CAAC,EAAE;IACjD,OAAO,EAAE,EAAG;EACd;EAEA,MAAMC,UAAU,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,CAAC,EAAG;EAC9C,MAAMC,OAAO,GAAG;IAAEC,KAAK,EAAE,EAAE;IAAEC,IAAI,EAAE,EAAE;IAAEC,GAAG,EAAE;EAAG,CAAC;;EAEhD;EACA,MAAMC,OAAO,GAAG,IAAIC,IAAI,CAACV,MAAM,CAAC,CAAC,CAAC,CAACW,KAAK,CAAC;EAEzCX,MAAM,CACHY,MAAM,CAACC,CAAC,IAAIA,CAAC,IAAIA,CAAC,CAACC,KAAK,IAAID,CAAC,CAACF,KAAK,IAAIE,CAAC,CAACE,GAAG,IAAIF,CAAC,CAACC,KAAK,KAAK,MAAM,CAAC,CAAC;EAAA,CACpEE,OAAO,CAACH,CAAC,IAAI;IACZR,OAAO,CAACQ,CAAC,CAACC,KAAK,CAAC,CAACG,IAAI,CAAC,CACpBC,uBAAuB,CAACL,CAAC,CAACF,KAAK,EAAEF,OAAO,CAAC,EACzCS,uBAAuB,CAACL,CAAC,CAACE,GAAG,EAAEN,OAAO,CAAC,CACxC,CAAC;EACJ,CAAC,CAAC;EAEJ,OAAOL,UAAU,CAACe,GAAG,CAACL,KAAK,KAAK;IAAEA,KAAK;IAAEM,KAAK,EAAEf,OAAO,CAACS,KAAK;EAAE,CAAC,CAAC,CAAC;AACpE;AAEA,SAASI,uBAAuBA,CAACG,OAAO,EAAEC,aAAa,EAAE;EACvD,IAAI,CAACD,OAAO,EAAE,OAAO,CAAC;EACtB,MAAME,CAAC,GAAG,IAAIb,IAAI,CAACW,OAAO,CAAC;;EAE3B;EACA,IAAIG,KAAK,GAAGD,CAAC,CAACE,QAAQ,CAAC,CAAC,GAAGF,CAAC,CAACG,UAAU,CAAC,CAAC,GAAG,EAAE;;EAE9C;EACA,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACN,CAAC,GAAGD,aAAa,KAAK,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;EACzEE,KAAK,IAAIG,SAAS,GAAG,EAAE;;EAEvB;EACA,IAAIH,KAAK,GAAG,EAAE,EAAE;IACdA,KAAK,IAAI,EAAE,EAAC;EACd;EAEA,OAAOA,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}