{"ast":null,"code":"// utils/getInitialData.js\nimport calcActivityScore from './calcActivityScore.js';\nimport calcSleepAverages from './calcSleepAverages.js';\nimport calcWellnessIndex from './calcWellnessIndex.js';\n\n// Now accepts sleepSeries separately\nexport default function getInitialData(minuteSeries, hourSeries, daySeries, sleepSeries) {\n  var _lastSleep$sleep, _lastSleep$sleep2;\n  const lastDate = \"2022-01-21\";\n\n  // ---- Sleep data (from sleepSeries) ----\n  console.log(\"getInitialData: Looking for date:\", lastDate);\n  console.log(\"getInitialData: sleepSeries length:\", sleepSeries === null || sleepSeries === void 0 ? void 0 : sleepSeries.length);\n  console.log(\"getInitialData: sleepSeries sample:\", sleepSeries === null || sleepSeries === void 0 ? void 0 : sleepSeries.slice(0, 3));\n  const lastSleep = sleepSeries === null || sleepSeries === void 0 ? void 0 : sleepSeries.find(day => day.date === lastDate);\n  console.log(\"getInitialData: lastSleep found:\", lastSleep);\n  console.log(\"getInitialData: lastSleep.sleep:\", lastSleep === null || lastSleep === void 0 ? void 0 : lastSleep.sleep);\n  console.log(\"getInitialData: lastSleep.sleep?.levels:\", lastSleep === null || lastSleep === void 0 ? void 0 : (_lastSleep$sleep = lastSleep.sleep) === null || _lastSleep$sleep === void 0 ? void 0 : _lastSleep$sleep.levels);\n  const currentStages = (lastSleep === null || lastSleep === void 0 ? void 0 : (_lastSleep$sleep2 = lastSleep.sleep) === null || _lastSleep$sleep2 === void 0 ? void 0 : _lastSleep$sleep2.levels) || [];\n  console.log(\"getInitialData: currentStages:\", currentStages);\n\n  // Get last 7 nights of sleep\n  const lastDayDate = new Date(lastDate + 'T00:00:00Z');\n  const sevenDaysAgo = new Date(lastDayDate.getTime() - 6 * 24 * 60 * 60 * 1000);\n  const last7Nights = (sleepSeries || []).filter(day => {\n    const d = new Date(day.date + 'T00:00:00Z');\n    return d >= sevenDaysAgo && d <= lastDayDate && day.sleep;\n  });\n\n  // console.log(\"getInitialData: lastDate:\", lastDate);\n  // console.log(\"getInitialData: sevenDaysAgo:\", sevenDaysAgo.toISOString());\n  // console.log(\"getInitialData: lastDayDate:\", lastDayDate.toISOString());\n  // console.log(\"getInitialData: sleepSeries.length:\", sleepSeries?.length);\n  // console.log(\"getInitialData: first few sleepSeries dates:\", sleepSeries?.slice(0, 5).map(s => s.date));\n  // console.log(\"getInitialData: last few sleepSeries dates:\", sleepSeries?.slice(-5).map(s => s.date));\n  // console.log(\"getInitialData: last7Nights.length:\", last7Nights.length);\n\n  const avgStages = calcSleepAverages(last7Nights);\n\n  // ---- Activity data (from daySeries + minuteSeries) ----\n  const last7Days = daySeries.filter(day => {\n    const d = new Date(day.date + 'T00:00:00Z');\n    return d >= sevenDaysAgo && d <= lastDayDate;\n  });\n  const last7DaysMinuteData = minuteSeries.filter(record => {\n    const recordDate = record.timestamp.split('T')[0];\n    return last7Days.some(day => day.date === recordDate);\n  });\n  const dailyHourlyTotals = {};\n  last7DaysMinuteData.forEach(record => {\n    const day = record.timestamp.split('T')[0];\n    const hour = parseInt(record.timestamp.slice(11, 13));\n    if (!dailyHourlyTotals[day]) dailyHourlyTotals[day] = {};\n    if (!dailyHourlyTotals[day][hour]) dailyHourlyTotals[day][hour] = {\n      calories: 0,\n      steps: 0\n    };\n    dailyHourlyTotals[day][hour].calories += record.calories || 0;\n    dailyHourlyTotals[day][hour].steps += record.steps || 0;\n  });\n  const activity = Object.entries(dailyHourlyTotals).sort(([a], [b]) => a.localeCompare(b)).map(([date, hourlyTotals]) => {\n    const hourlyScores = {\n      low: 0,\n      medium: 0,\n      high: 0\n    };\n    const totalHours = Object.keys(hourlyTotals).length;\n    Object.values(hourlyTotals).forEach(hourData => {\n      const score = calcActivityScore(hourData.calories, hourData.steps);\n      hourlyScores[score]++;\n    });\n    return {\n      date,\n      low: Math.round(hourlyScores.low / totalHours * 100),\n      medium: Math.round(hourlyScores.medium / totalHours * 100),\n      high: Math.round(hourlyScores.high / totalHours * 100),\n      totalHours\n    };\n  });\n\n  // ---- Wellness index ----\n  const lastDayMinuteData = minuteSeries.filter(record => (record === null || record === void 0 ? void 0 : record.timestamp) && record.timestamp.startsWith(lastDate));\n  const lastDayHourData = hourSeries.filter(record => (record === null || record === void 0 ? void 0 : record.timestamp) && record.timestamp.startsWith(lastDate));\n  const wellness = calcWellnessIndex(lastDayMinuteData, currentStages, lastDayHourData);\n  return {\n    currentStages,\n    avgStages,\n    activity,\n    wellness\n  };\n}","map":{"version":3,"names":["calcActivityScore","calcSleepAverages","calcWellnessIndex","getInitialData","minuteSeries","hourSeries","daySeries","sleepSeries","_lastSleep$sleep","_lastSleep$sleep2","lastDate","console","log","length","slice","lastSleep","find","day","date","sleep","levels","currentStages","lastDayDate","Date","sevenDaysAgo","getTime","last7Nights","filter","d","avgStages","last7Days","last7DaysMinuteData","record","recordDate","timestamp","split","some","dailyHourlyTotals","forEach","hour","parseInt","calories","steps","activity","Object","entries","sort","a","b","localeCompare","map","hourlyTotals","hourlyScores","low","medium","high","totalHours","keys","values","hourData","score","Math","round","lastDayMinuteData","startsWith","lastDayHourData","wellness"],"sources":["D:/Repos/lcjs-dashboard/frontend/src/utils/getInitialData.js"],"sourcesContent":["// utils/getInitialData.js\r\nimport calcActivityScore from './calcActivityScore.js';\r\nimport calcSleepAverages from './calcSleepAverages.js';\r\nimport calcWellnessIndex from './calcWellnessIndex.js';\r\n\r\n// Now accepts sleepSeries separately\r\nexport default function getInitialData(minuteSeries, hourSeries, daySeries, sleepSeries) {\r\n  const lastDate = \"2022-01-21\";\r\n\r\n  // ---- Sleep data (from sleepSeries) ----\r\n  console.log(\"getInitialData: Looking for date:\", lastDate);\r\n  console.log(\"getInitialData: sleepSeries length:\", sleepSeries?.length);\r\n  console.log(\"getInitialData: sleepSeries sample:\", sleepSeries?.slice(0, 3));\r\n  \r\n  const lastSleep = sleepSeries?.find(day => day.date === lastDate);\r\n  console.log(\"getInitialData: lastSleep found:\", lastSleep);\r\n  console.log(\"getInitialData: lastSleep.sleep:\", lastSleep?.sleep);\r\n  console.log(\"getInitialData: lastSleep.sleep?.levels:\", lastSleep?.sleep?.levels);\r\n  \r\n  const currentStages = lastSleep?.sleep?.levels || [];\r\n  console.log(\"getInitialData: currentStages:\", currentStages);\r\n\r\n  // Get last 7 nights of sleep\r\n  const lastDayDate = new Date(lastDate + 'T00:00:00Z');\r\n  const sevenDaysAgo = new Date(lastDayDate.getTime() - (6 * 24 * 60 * 60 * 1000));\r\n\r\n  const last7Nights = (sleepSeries || []).filter(day => {\r\n    const d = new Date(day.date + 'T00:00:00Z');\r\n    return d >= sevenDaysAgo && d <= lastDayDate && day.sleep;\r\n  });\r\n\r\n  // console.log(\"getInitialData: lastDate:\", lastDate);\r\n  // console.log(\"getInitialData: sevenDaysAgo:\", sevenDaysAgo.toISOString());\r\n  // console.log(\"getInitialData: lastDayDate:\", lastDayDate.toISOString());\r\n  // console.log(\"getInitialData: sleepSeries.length:\", sleepSeries?.length);\r\n  // console.log(\"getInitialData: first few sleepSeries dates:\", sleepSeries?.slice(0, 5).map(s => s.date));\r\n  // console.log(\"getInitialData: last few sleepSeries dates:\", sleepSeries?.slice(-5).map(s => s.date));\r\n  // console.log(\"getInitialData: last7Nights.length:\", last7Nights.length);\r\n\r\n  const avgStages = calcSleepAverages(last7Nights);\r\n\r\n  // ---- Activity data (from daySeries + minuteSeries) ----\r\n  const last7Days = daySeries.filter(day => {\r\n    const d = new Date(day.date + 'T00:00:00Z');\r\n    return d >= sevenDaysAgo && d <= lastDayDate;\r\n  });\r\n\r\n  const last7DaysMinuteData = minuteSeries.filter(record => {\r\n    const recordDate = record.timestamp.split('T')[0];\r\n    return last7Days.some(day => day.date === recordDate);\r\n  });\r\n\r\n  const dailyHourlyTotals = {};\r\n  last7DaysMinuteData.forEach(record => {\r\n    const day = record.timestamp.split('T')[0];\r\n    const hour = parseInt(record.timestamp.slice(11, 13));\r\n\r\n    if (!dailyHourlyTotals[day]) dailyHourlyTotals[day] = {};\r\n    if (!dailyHourlyTotals[day][hour]) dailyHourlyTotals[day][hour] = { calories: 0, steps: 0 };\r\n\r\n    dailyHourlyTotals[day][hour].calories += record.calories || 0;\r\n    dailyHourlyTotals[day][hour].steps += record.steps || 0;\r\n  });\r\n\r\n  const activity = Object.entries(dailyHourlyTotals)\r\n    .sort(([a], [b]) => a.localeCompare(b))\r\n    .map(([date, hourlyTotals]) => {\r\n      const hourlyScores = { low: 0, medium: 0, high: 0 };\r\n      const totalHours = Object.keys(hourlyTotals).length;\r\n\r\n      Object.values(hourlyTotals).forEach(hourData => {\r\n        const score = calcActivityScore(hourData.calories, hourData.steps);\r\n        hourlyScores[score]++;\r\n      });\r\n\r\n      return {\r\n        date,\r\n        low: Math.round((hourlyScores.low / totalHours) * 100),\r\n        medium: Math.round((hourlyScores.medium / totalHours) * 100),\r\n        high: Math.round((hourlyScores.high / totalHours) * 100),\r\n        totalHours\r\n      };\r\n    });\r\n\r\n  // ---- Wellness index ----\r\n  const lastDayMinuteData = minuteSeries.filter(record =>\r\n    record?.timestamp && record.timestamp.startsWith(lastDate)\r\n  );\r\n  const lastDayHourData = hourSeries.filter(record =>\r\n    record?.timestamp && record.timestamp.startsWith(lastDate)\r\n  );\r\n\r\n  const wellness = calcWellnessIndex(\r\n    lastDayMinuteData,\r\n    currentStages,\r\n    lastDayHourData\r\n  );\r\n\r\n  return {\r\n    currentStages,\r\n    avgStages,\r\n    activity,\r\n    wellness\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}