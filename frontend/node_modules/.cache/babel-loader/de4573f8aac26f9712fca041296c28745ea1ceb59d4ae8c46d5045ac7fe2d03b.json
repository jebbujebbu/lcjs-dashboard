{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jenni.mikkonen\\\\OneDrive - LightningChart Ltd\\\\Repos\\\\lcjs-dashboard\\\\frontend\\\\src\\\\components\\\\charts\\\\SpanChart.jsx\",\n  _s = $RefreshSig$();\nimport { SolidFill, ColorRGBA, emptyLine, emptyFill, AxisTickStrategies, UIOrigins, UIElementBuilders, UILayoutBuilders, UIDraggingModes, Themes } from \"@lightningchart/lcjs\";\nimport { useEffect, useState, useContext, useId } from \"react\";\nimport { LCContext } from \"../../LC\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SpanChart(props) {\n  _s();\n  const data = props.data;\n  const title = props.title;\n  //   console.log(`SpanChart ${title} data`, data);\n  const id = useId();\n  const lc = useContext(LCContext);\n  const [chart, setChart] = useState(undefined);\n\n  // Create chart just once during lifecycle of component.\n  useEffect(() => {\n    const container = document.getElementById(id);\n    if (!container) return;\n    if (!lc) {\n      console.log(\"LC context not ready yet\");\n      return;\n    }\n    const stages = ['light', 'deep', 'rem'];\n\n    // Define an interface for creating span charts\n    let spanChart;\n    let actualChart; // Store the actual chart instance for cleanup\n    // User side SpanChart logic\n    {\n      spanChart = () => {\n        // Create a XY-Chart and add a RectSeries to it for rendering rectangles\n        const chart = lc.ChartXY({\n          legend: {\n            visible: false\n          },\n          theme: Themes.cyberSpace,\n          container\n        });\n        chart.setTitle(title).setUserInteractions(undefined).setCursorMode(undefined);\n\n        // Store the actual chart instance\n        actualChart = chart;\n        const axisX = chart.getDefaultAxisX()\n        // Hide default ticks, instead rely on CustomTicks\n        .setTickStrategy(AxisTickStrategies.Empty);\n        const axisY = chart.getDefaultAxisY()\n        // .setTitle('Conference Room')\n        // Hide default ticks, instead rely on CustomTicks\n        .setTickStrategy(AxisTickStrategies.Empty);\n        let y = 0;\n        for (let i = 20; i <= 32; i++) {\n          // Example: show 20h (8 PM) â†’ 32h (8 AM next day)\n          const hour = i % 24;\n          const label = hour.toString().padStart(2, '0') + \":00\";\n          axisX.addCustomTick().setValue(i).setTickLength(4).setGridStrokeLength(0).setTextFormatter(() => label).setMarker(marker => marker.setTextFillStyle(new SolidFill({\n            color: ColorRGBA(170, 170, 170)\n          })));\n        }\n        const figureHeight = 10;\n        const figureThickness = 10;\n        const figureGap = figureThickness * 0.5;\n        const fitAxes = () => {\n          // Custom fitting for some additional margins\n          axisY.setInterval({\n            start: y,\n            end: figureHeight * 0.5,\n            stopAxisAfter: false\n          });\n        };\n        let customYRange = figureHeight + figureGap * 1.6;\n        const addCategory = category => {\n          const categoryY = y;\n          const addSpan = (i, min, max, label) => {\n            // Add rect\n            const rectDimensions = {\n              x: min,\n              y: categoryY - figureHeight,\n              width: max - min,\n              height: figureHeight\n            };\n            // Add element for span labels\n            // const spanText = chart\n            //     .addUIElement(UILayoutBuilders.Row, { x: axisX, y: axisY })\n            //     .setOrigin(UIOrigins.Center)\n            //     .setDraggingMode(UIDraggingModes.notDraggable)\n            //     .setPosition({\n            //         x: (min + max) / 2,\n            //         y: rectDimensions.y + 5,\n            //     })\n            //     .setBackground((background) => background.setFillStyle(emptyFill).setStrokeStyle(emptyLine))\n\n            // spanText.addElement(\n            //     UIElementBuilders.TextBox.addStyler((textBox) =>\n            //         textBox\n            //             .setTextFont((fontSettings) => fontSettings.setSize(13))\n            //             .setText(label)\n            //             .setTextFillStyle(new SolidFill().setColor(ColorRGBA(255, 255, 255))),\n            //     ),\n            // )\n            if (index != i) {\n              customYRange = customYRange + figureHeight + 1;\n            }\n            fitAxes();\n            // Return figure\n            return chart.addRectangleSeries().add(rectDimensions).setCornerRadius(10);\n          };\n\n          // Add custom tick for category\n          axisY.addCustomTick().setValue(y - figureHeight * 0.5).setGridStrokeLength(0).setTextFormatter(_ => category).setMarker(marker => marker.setTextFillStyle(new SolidFill({\n            color: ColorRGBA(170, 170, 170)\n          })));\n          y -= figureHeight * 1.5;\n          fitAxes();\n          // Return interface for category\n          return {\n            addSpan\n          };\n        };\n        // Return interface for span chart\n        return {\n          addCategory\n        };\n      };\n    }\n\n    // Use the interface for example\n    let chart = spanChart();\n    const categories = ['Light', 'Deep', 'REM'].map(name => chart.addCategory(name));\n    chart.categories = categories;\n    chart.stageMap = {};\n    stages.forEach((stage, i) => {\n      chart.stageMap[stage] = i; // e.g. { light:0, deep:1, rem:2 }\n    });\n    const spans = [];\n    let index = 0;\n    spans.forEach((values, i) => {\n      values.forEach((value, j) => {\n        categories[i].addSpan(i, value[0], value[1]);\n        // index = index + 1\n      });\n    });\n    setChart(chart);\n    return () => {\n      // Destroy the actual chart instance when component lifecycle ends\n      if (actualChart) {\n        actualChart.dispose();\n      }\n    };\n  }, [id, lc]);\n\n  // Update data whenever data prop changes\n  useEffect(() => {\n    if (!chart || !data) return;\n    console.log(`SpanChart ${title} update, data: `, data);\n    if (title == \"Sleep Stages (7 Nights)\") {\n      // chart.\n    } else {\n      data.forEach(entry => {\n        const {\n          stage,\n          spans\n        } = entry;\n        if (stage === \"wake\") return; // skip wake in chart\n\n        // find correct category row\n        const idx = chart.stageMap[stage];\n        if (idx === undefined) {\n          console.warn(\"Unknown stage:\", stage);\n          return;\n        }\n        spans.forEach(span => {\n          chart.categories[idx].addSpan(idx, span[0], span[1]);\n        });\n      });\n    }\n  }, [chart, data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: id,\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 10\n  }, this);\n}\n_s(SpanChart, \"lPoGF9T2AB4o0eYXL6tWsHPot3c=\", false, function () {\n  return [useId];\n});\n_c = SpanChart;\nvar _c;\n$RefreshReg$(_c, \"SpanChart\");","map":{"version":3,"names":["SolidFill","ColorRGBA","emptyLine","emptyFill","AxisTickStrategies","UIOrigins","UIElementBuilders","UILayoutBuilders","UIDraggingModes","Themes","useEffect","useState","useContext","useId","LCContext","jsxDEV","_jsxDEV","SpanChart","props","_s","data","title","id","lc","chart","setChart","undefined","container","document","getElementById","console","log","stages","spanChart","actualChart","ChartXY","legend","visible","theme","cyberSpace","setTitle","setUserInteractions","setCursorMode","axisX","getDefaultAxisX","setTickStrategy","Empty","axisY","getDefaultAxisY","y","i","hour","label","toString","padStart","addCustomTick","setValue","setTickLength","setGridStrokeLength","setTextFormatter","setMarker","marker","setTextFillStyle","color","figureHeight","figureThickness","figureGap","fitAxes","setInterval","start","end","stopAxisAfter","customYRange","addCategory","category","categoryY","addSpan","min","max","rectDimensions","x","width","height","index","addRectangleSeries","add","setCornerRadius","_","categories","map","name","stageMap","forEach","stage","spans","values","value","j","dispose","entry","idx","warn","span","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/jenni.mikkonen/OneDrive - LightningChart Ltd/Repos/lcjs-dashboard/frontend/src/components/charts/SpanChart.jsx"],"sourcesContent":["import { SolidFill, ColorRGBA, emptyLine, emptyFill, AxisTickStrategies, UIOrigins, UIElementBuilders, UILayoutBuilders, UIDraggingModes, Themes } from \"@lightningchart/lcjs\";\r\nimport { useEffect, useState, useContext, useId } from \"react\";\r\nimport { LCContext } from \"../../LC\";\r\n\r\nexport default function SpanChart(props) {\r\n  const data = props.data;\r\n  const title = props.title;\r\n//   console.log(`SpanChart ${title} data`, data);\r\n  const id = useId();\r\n  const lc = useContext(LCContext);\r\n  const [chart, setChart] = useState(undefined);\r\n\r\n  // Create chart just once during lifecycle of component.\r\n  useEffect(() => {\r\n    const container = document.getElementById(id);\r\n    if (!container) return\r\n    if (!lc) {\r\n      console.log(\"LC context not ready yet\");\r\n      return\r\n    }\r\n\r\n    const stages = ['light', 'deep', 'rem'];\r\n\r\n    // Define an interface for creating span charts\r\n    let spanChart\r\n    let actualChart // Store the actual chart instance for cleanup\r\n    // User side SpanChart logic\r\n    {\r\n      spanChart = () => {\r\n        // Create a XY-Chart and add a RectSeries to it for rendering rectangles\r\n        const chart = lc.ChartXY({\r\n                legend: { visible: false },\r\n                theme: Themes.cyberSpace,\r\n                container,\r\n            })\r\n            chart.setTitle(title)\r\n            .setUserInteractions(undefined)\r\n            .setCursorMode(undefined)\r\n\r\n        // Store the actual chart instance\r\n        actualChart = chart\r\n\r\n        const axisX = chart\r\n            .getDefaultAxisX()\r\n            // Hide default ticks, instead rely on CustomTicks\r\n            .setTickStrategy(AxisTickStrategies.Empty)\r\n\r\n        const axisY = chart\r\n            .getDefaultAxisY()\r\n            // .setTitle('Conference Room')\r\n            // Hide default ticks, instead rely on CustomTicks\r\n            .setTickStrategy(AxisTickStrategies.Empty)\r\n\r\n        let y = 0\r\n        for (let i = 20; i <= 32; i++) { // Example: show 20h (8 PM) â†’ 32h (8 AM next day)\r\n            const hour = i % 24\r\n            const label = hour.toString().padStart(2, '0') + \":00\"\r\n            axisX\r\n                .addCustomTick()\r\n                .setValue(i)\r\n                .setTickLength(4)\r\n                .setGridStrokeLength(0)\r\n                .setTextFormatter(() => label)\r\n                .setMarker((marker) =>\r\n                    marker.setTextFillStyle(new SolidFill({ color: ColorRGBA(170, 170, 170) }))\r\n                )\r\n        }\r\n\r\n        const figureHeight = 10\r\n        const figureThickness = 10\r\n        const figureGap = figureThickness * 0.5\r\n        const fitAxes = () => {\r\n            // Custom fitting for some additional margins\r\n            axisY.setInterval({ start: y, end: figureHeight * 0.5, stopAxisAfter: false })\r\n        }\r\n\r\n        let customYRange = figureHeight + figureGap * 1.6\r\n        const addCategory = (category) => {\r\n            const categoryY = y\r\n\r\n            const addSpan = (i, min, max, label) => {\r\n                // Add rect\r\n                const rectDimensions = {\r\n                    x: min,\r\n                    y: categoryY - figureHeight,\r\n                    width: max - min,\r\n                    height: figureHeight,\r\n                }\r\n                // Add element for span labels\r\n                // const spanText = chart\r\n                //     .addUIElement(UILayoutBuilders.Row, { x: axisX, y: axisY })\r\n                //     .setOrigin(UIOrigins.Center)\r\n                //     .setDraggingMode(UIDraggingModes.notDraggable)\r\n                //     .setPosition({\r\n                //         x: (min + max) / 2,\r\n                //         y: rectDimensions.y + 5,\r\n                //     })\r\n                //     .setBackground((background) => background.setFillStyle(emptyFill).setStrokeStyle(emptyLine))\r\n\r\n                // spanText.addElement(\r\n                //     UIElementBuilders.TextBox.addStyler((textBox) =>\r\n                //         textBox\r\n                //             .setTextFont((fontSettings) => fontSettings.setSize(13))\r\n                //             .setText(label)\r\n                //             .setTextFillStyle(new SolidFill().setColor(ColorRGBA(255, 255, 255))),\r\n                //     ),\r\n                // )\r\n                if (index != i) {\r\n                    customYRange = customYRange + figureHeight + 1\r\n                }\r\n                fitAxes()\r\n                // Return figure\r\n                return chart.addRectangleSeries().add(rectDimensions).setCornerRadius(10)\r\n            }\r\n\r\n            // Add custom tick for category\r\n            axisY\r\n                .addCustomTick()\r\n                .setValue(y - figureHeight * 0.5)\r\n                .setGridStrokeLength(0)\r\n                .setTextFormatter((_) => category)\r\n                .setMarker((marker) => marker.setTextFillStyle(new SolidFill({ color: ColorRGBA(170, 170, 170) })))\r\n            y -= figureHeight * 1.5\r\n\r\n            fitAxes()\r\n            // Return interface for category\r\n            return {\r\n                addSpan,\r\n            }\r\n        }\r\n        // Return interface for span chart\r\n        return {\r\n            addCategory,\r\n        }\r\n      }\r\n    }\r\n\r\n    // Use the interface for example\r\n    let chart = spanChart()\r\n    const categories = ['Light', 'Deep', 'REM'].map((name) => chart.addCategory(name))\r\n    chart.categories = categories\r\n    chart.stageMap = {}\r\n    stages.forEach((stage, i) => {\r\n    chart.stageMap[stage] = i   // e.g. { light:0, deep:1, rem:2 }\r\n    })\r\n    const spans = []\r\n\r\n    let index = 0\r\n    spans.forEach((values, i) => {\r\n        values.forEach((value, j) => {\r\n            categories[i].addSpan(i, value[0], value[1])\r\n            // index = index + 1\r\n        })\r\n    })\r\n\r\n    setChart(chart);\r\n\r\n    return () => {\r\n      // Destroy the actual chart instance when component lifecycle ends\r\n      if (actualChart) {\r\n        actualChart.dispose();\r\n      }\r\n    };\r\n  }, [id, lc]); \r\n\r\n  // Update data whenever data prop changes\r\n  useEffect(() => {\r\n    if (!chart || !data) return\r\n    console.log(`SpanChart ${title} update, data: `, data);\r\n    if (title == \"Sleep Stages (7 Nights)\") {\r\n        // chart.\r\n    } \r\n    else {\r\n         data.forEach((entry) => {\r\n      const { stage, spans } = entry\r\n      if (stage === \"wake\") return // skip wake in chart\r\n\r\n      // find correct category row\r\n      const idx = chart.stageMap[stage]\r\n      if (idx === undefined) {\r\n        console.warn(\"Unknown stage:\", stage)\r\n        return\r\n      }\r\n\r\n      spans.forEach(span => {\r\n        chart.categories[idx].addSpan(idx, span[0], span[1])\r\n      })\r\n    })\r\n  }\r\n  }, [chart, data]);\r\n\r\n  return <div id={id} style={{ width: \"100%\", height: \"100%\" }}></div>;\r\n}"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,SAAS,EAAEC,SAAS,EAAEC,SAAS,EAAEC,kBAAkB,EAAEC,SAAS,EAAEC,iBAAiB,EAAEC,gBAAgB,EAAEC,eAAe,EAAEC,MAAM,QAAQ,sBAAsB;AAC9K,SAASC,SAAS,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,KAAK,QAAQ,OAAO;AAC9D,SAASC,SAAS,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,eAAe,SAASC,SAASA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACvC,MAAMC,IAAI,GAAGF,KAAK,CAACE,IAAI;EACvB,MAAMC,KAAK,GAAGH,KAAK,CAACG,KAAK;EAC3B;EACE,MAAMC,EAAE,GAAGT,KAAK,CAAC,CAAC;EAClB,MAAMU,EAAE,GAAGX,UAAU,CAACE,SAAS,CAAC;EAChC,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAACe,SAAS,CAAC;;EAE7C;EACAhB,SAAS,CAAC,MAAM;IACd,MAAMiB,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAACP,EAAE,CAAC;IAC7C,IAAI,CAACK,SAAS,EAAE;IAChB,IAAI,CAACJ,EAAE,EAAE;MACPO,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvC;IACF;IAEA,MAAMC,MAAM,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,CAAC;;IAEvC;IACA,IAAIC,SAAS;IACb,IAAIC,WAAW,EAAC;IAChB;IACA;MACED,SAAS,GAAGA,CAAA,KAAM;QAChB;QACA,MAAMT,KAAK,GAAGD,EAAE,CAACY,OAAO,CAAC;UACjBC,MAAM,EAAE;YAAEC,OAAO,EAAE;UAAM,CAAC;UAC1BC,KAAK,EAAE7B,MAAM,CAAC8B,UAAU;UACxBZ;QACJ,CAAC,CAAC;QACFH,KAAK,CAACgB,QAAQ,CAACnB,KAAK,CAAC,CACpBoB,mBAAmB,CAACf,SAAS,CAAC,CAC9BgB,aAAa,CAAChB,SAAS,CAAC;;QAE7B;QACAQ,WAAW,GAAGV,KAAK;QAEnB,MAAMmB,KAAK,GAAGnB,KAAK,CACdoB,eAAe,CAAC;QACjB;QAAA,CACCC,eAAe,CAACzC,kBAAkB,CAAC0C,KAAK,CAAC;QAE9C,MAAMC,KAAK,GAAGvB,KAAK,CACdwB,eAAe,CAAC;QACjB;QACA;QAAA,CACCH,eAAe,CAACzC,kBAAkB,CAAC0C,KAAK,CAAC;QAE9C,IAAIG,CAAC,GAAG,CAAC;QACT,KAAK,IAAIC,CAAC,GAAG,EAAE,EAAEA,CAAC,IAAI,EAAE,EAAEA,CAAC,EAAE,EAAE;UAAE;UAC7B,MAAMC,IAAI,GAAGD,CAAC,GAAG,EAAE;UACnB,MAAME,KAAK,GAAGD,IAAI,CAACE,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK;UACtDX,KAAK,CACAY,aAAa,CAAC,CAAC,CACfC,QAAQ,CAACN,CAAC,CAAC,CACXO,aAAa,CAAC,CAAC,CAAC,CAChBC,mBAAmB,CAAC,CAAC,CAAC,CACtBC,gBAAgB,CAAC,MAAMP,KAAK,CAAC,CAC7BQ,SAAS,CAAEC,MAAM,IACdA,MAAM,CAACC,gBAAgB,CAAC,IAAI9D,SAAS,CAAC;YAAE+D,KAAK,EAAE9D,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG;UAAE,CAAC,CAAC,CAC9E,CAAC;QACT;QAEA,MAAM+D,YAAY,GAAG,EAAE;QACvB,MAAMC,eAAe,GAAG,EAAE;QAC1B,MAAMC,SAAS,GAAGD,eAAe,GAAG,GAAG;QACvC,MAAME,OAAO,GAAGA,CAAA,KAAM;UAClB;UACApB,KAAK,CAACqB,WAAW,CAAC;YAAEC,KAAK,EAAEpB,CAAC;YAAEqB,GAAG,EAAEN,YAAY,GAAG,GAAG;YAAEO,aAAa,EAAE;UAAM,CAAC,CAAC;QAClF,CAAC;QAED,IAAIC,YAAY,GAAGR,YAAY,GAAGE,SAAS,GAAG,GAAG;QACjD,MAAMO,WAAW,GAAIC,QAAQ,IAAK;UAC9B,MAAMC,SAAS,GAAG1B,CAAC;UAEnB,MAAM2B,OAAO,GAAGA,CAAC1B,CAAC,EAAE2B,GAAG,EAAEC,GAAG,EAAE1B,KAAK,KAAK;YACpC;YACA,MAAM2B,cAAc,GAAG;cACnBC,CAAC,EAAEH,GAAG;cACN5B,CAAC,EAAE0B,SAAS,GAAGX,YAAY;cAC3BiB,KAAK,EAAEH,GAAG,GAAGD,GAAG;cAChBK,MAAM,EAAElB;YACZ,CAAC;YACD;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;;YAEA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA,IAAImB,KAAK,IAAIjC,CAAC,EAAE;cACZsB,YAAY,GAAGA,YAAY,GAAGR,YAAY,GAAG,CAAC;YAClD;YACAG,OAAO,CAAC,CAAC;YACT;YACA,OAAO3C,KAAK,CAAC4D,kBAAkB,CAAC,CAAC,CAACC,GAAG,CAACN,cAAc,CAAC,CAACO,eAAe,CAAC,EAAE,CAAC;UAC7E,CAAC;;UAED;UACAvC,KAAK,CACAQ,aAAa,CAAC,CAAC,CACfC,QAAQ,CAACP,CAAC,GAAGe,YAAY,GAAG,GAAG,CAAC,CAChCN,mBAAmB,CAAC,CAAC,CAAC,CACtBC,gBAAgB,CAAE4B,CAAC,IAAKb,QAAQ,CAAC,CACjCd,SAAS,CAAEC,MAAM,IAAKA,MAAM,CAACC,gBAAgB,CAAC,IAAI9D,SAAS,CAAC;YAAE+D,KAAK,EAAE9D,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG;UAAE,CAAC,CAAC,CAAC,CAAC;UACvGgD,CAAC,IAAIe,YAAY,GAAG,GAAG;UAEvBG,OAAO,CAAC,CAAC;UACT;UACA,OAAO;YACHS;UACJ,CAAC;QACL,CAAC;QACD;QACA,OAAO;UACHH;QACJ,CAAC;MACH,CAAC;IACH;;IAEA;IACA,IAAIjD,KAAK,GAAGS,SAAS,CAAC,CAAC;IACvB,MAAMuD,UAAU,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,CAAC,CAACC,GAAG,CAAEC,IAAI,IAAKlE,KAAK,CAACiD,WAAW,CAACiB,IAAI,CAAC,CAAC;IAClFlE,KAAK,CAACgE,UAAU,GAAGA,UAAU;IAC7BhE,KAAK,CAACmE,QAAQ,GAAG,CAAC,CAAC;IACnB3D,MAAM,CAAC4D,OAAO,CAAC,CAACC,KAAK,EAAE3C,CAAC,KAAK;MAC7B1B,KAAK,CAACmE,QAAQ,CAACE,KAAK,CAAC,GAAG3C,CAAC,EAAG;IAC5B,CAAC,CAAC;IACF,MAAM4C,KAAK,GAAG,EAAE;IAEhB,IAAIX,KAAK,GAAG,CAAC;IACbW,KAAK,CAACF,OAAO,CAAC,CAACG,MAAM,EAAE7C,CAAC,KAAK;MACzB6C,MAAM,CAACH,OAAO,CAAC,CAACI,KAAK,EAAEC,CAAC,KAAK;QACzBT,UAAU,CAACtC,CAAC,CAAC,CAAC0B,OAAO,CAAC1B,CAAC,EAAE8C,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC;QAC5C;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;IAEFvE,QAAQ,CAACD,KAAK,CAAC;IAEf,OAAO,MAAM;MACX;MACA,IAAIU,WAAW,EAAE;QACfA,WAAW,CAACgE,OAAO,CAAC,CAAC;MACvB;IACF,CAAC;EACH,CAAC,EAAE,CAAC5E,EAAE,EAAEC,EAAE,CAAC,CAAC;;EAEZ;EACAb,SAAS,CAAC,MAAM;IACd,IAAI,CAACc,KAAK,IAAI,CAACJ,IAAI,EAAE;IACrBU,OAAO,CAACC,GAAG,CAAC,aAAaV,KAAK,iBAAiB,EAAED,IAAI,CAAC;IACtD,IAAIC,KAAK,IAAI,yBAAyB,EAAE;MACpC;IAAA,CACH,MACI;MACAD,IAAI,CAACwE,OAAO,CAAEO,KAAK,IAAK;QAC3B,MAAM;UAAEN,KAAK;UAAEC;QAAM,CAAC,GAAGK,KAAK;QAC9B,IAAIN,KAAK,KAAK,MAAM,EAAE,OAAM,CAAC;;QAE7B;QACA,MAAMO,GAAG,GAAG5E,KAAK,CAACmE,QAAQ,CAACE,KAAK,CAAC;QACjC,IAAIO,GAAG,KAAK1E,SAAS,EAAE;UACrBI,OAAO,CAACuE,IAAI,CAAC,gBAAgB,EAAER,KAAK,CAAC;UACrC;QACF;QAEAC,KAAK,CAACF,OAAO,CAACU,IAAI,IAAI;UACpB9E,KAAK,CAACgE,UAAU,CAACY,GAAG,CAAC,CAACxB,OAAO,CAACwB,GAAG,EAAEE,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC;QACtD,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EACA,CAAC,EAAE,CAAC9E,KAAK,EAAEJ,IAAI,CAAC,CAAC;EAEjB,oBAAOJ,OAAA;IAAKM,EAAE,EAAEA,EAAG;IAACiF,KAAK,EAAE;MAAEtB,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAO;EAAE;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AACtE;AAACxF,EAAA,CA5LuBF,SAAS;EAAA,QAIpBJ,KAAK;AAAA;AAAA+F,EAAA,GAJM3F,SAAS;AAAA,IAAA2F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}