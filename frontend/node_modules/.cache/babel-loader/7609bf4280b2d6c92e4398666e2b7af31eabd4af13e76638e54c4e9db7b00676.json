{"ast":null,"code":"var _jsxFileName = \"D:\\\\Repos\\\\lcjs-dashboard\\\\frontend\\\\src\\\\pages\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useEffect, useState, useRef } from 'react';\nimport '../styles/Dashboard.css';\nimport MultiChart from '../components/MultiChart.jsx';\nimport GaugeChart from '../components/charts/GaugeChart.jsx';\nimport BarChart from '../components/charts/BarChart.jsx';\nimport PieChart from '../components/charts/PieChart.jsx';\nimport SpanChart from '../components/charts/SpanChart.jsx';\nimport SpiderChart from '../components/charts/SpiderChart.jsx';\nimport MosaicChart from '../components/charts/MosaicChart.jsx';\nimport convertTemperatures from '../utils/convertTemperatures.js';\nimport calcActivityScore from '../utils/calcActivityScore.js';\nimport getLast7Days from '../utils/getLast7Days.js';\nimport calcSleepAverages from '../utils/calcSleepAverages.js';\nimport calcWellnessIndex from '../utils/calcWellnessIndex.js';\nimport getInitialData from '../utils/getInitialData.js';\nimport toChartSpans from '../utils/toChartSpans.js';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [minuteSeries, setMinuteSeries] = useState([]);\n  const [hourSeries, setHourSeries] = useState([]);\n  const [daySeries, setDaySeries] = useState([]);\n  const [sleepSeries, setSleepSeries] = useState([]);\n  const [currentSteps, setCurrentSteps] = useState(0);\n  const [dailySteps, setDailySteps] = useState(0);\n  const [currentStages, setCurrentStages] = useState(null);\n  const [avgStages, setAvgStages] = useState(null);\n  const minuteIndexRef = useRef(0);\n  const hourIndexRef = useRef(0);\n  const [activity, setActivity] = useState(null);\n  const [wellness, setWellness] = useState(null);\n  const [currentDataPoint, setCurrentDataPoint] = useState(null);\n  const [simulationSpeed, setSimulationSpeed] = useState(16); // Default 16ms\n  const [isSimulationRunning, setIsSimulationRunning] = useState(true);\n\n  // Format timestamp for display\n  const formatTimestamp = timestamp => {\n    if (!timestamp) return 'No Data';\n    const date = new Date(timestamp.endsWith('Z') ? timestamp : timestamp + 'Z');\n    const dateStr = date.toLocaleDateString('en-US', {\n      month: '2-digit',\n      day: '2-digit',\n      year: 'numeric'\n    });\n    const timeStr = date.toLocaleTimeString('en-US', {\n      hour12: false,\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    });\n    return `${dateStr} ${timeStr}`;\n  };\n  useEffect(() => {\n    const controller = new AbortController();\n    Promise.all([fetch(\"/api/data\", {\n      signal: controller.signal\n    }).then(r => r.json()), fetch(\"/api/sleep-data\", {\n      signal: controller.signal\n    }).then(r => r.json())]).then(([data, sleepData]) => {\n      if (!data || !sleepData) return;\n\n      // Convert temperature deviation values to absolute temperature values\n      convertTemperatures(data.hourSeries);\n\n      // Update state with the fetched data\n      setMinuteSeries(data.minuteSeries || []);\n      setHourSeries(data.hourSeries || []);\n      setDaySeries(data.daySeries || []);\n      setSleepSeries(sleepData.daySeries || []);\n\n      // Initialize charts with data from the last 7 days of data set (ending 2022-01-21)\n      const initialData = getInitialData(data.minuteSeries, data.hourSeries, data.daySeries, sleepData.daySeries);\n      setCurrentStages(toChartSpans(initialData.currentStages));\n      setAvgStages(initialData.avgStages);\n      setWellness(initialData.wellness);\n    }).catch(err => {\n      if (err.name === \"AbortError\") {\n        console.log(\"Fetch aborted\");\n      } else {\n        console.error(\"Error fetching data:\", err);\n      }\n    });\n    return () => {\n      controller.abort();\n    };\n  }, []);\n  useEffect(() => {\n    if (minuteSeries.length === 0 || hourSeries.length === 0 || daySeries.length === 0 || !isSimulationRunning) {\n      console.log(\"Waiting for data or simulation paused...\");\n      return;\n    }\n    const interval = setInterval(() => {\n      // Update minute data every cycle\n      let nextMinuteIndex = (minuteIndexRef.current + 1) % minuteSeries.length;\n      const currentMinuteData = minuteSeries[nextMinuteIndex];\n      if (!(currentMinuteData !== null && currentMinuteData !== void 0 && currentMinuteData.timestamp)) {\n        minuteIndexRef.current = nextMinuteIndex;\n        return;\n      }\n      const currentTime = currentMinuteData.timestamp;\n      const date = currentTime.split('T')[0];\n      const hour = parseInt(currentTime.slice(11, 13));\n      const minute = parseInt(currentTime.slice(14, 16));\n\n      // Check if hour changed, update hourSeries data\n      if (minute === 0) {\n        let nextHourIndex = (hourIndexRef.current + 1) % hourSeries.length;\n        const currentHourData = hourSeries[nextHourIndex];\n\n        // Merge minute and hour data\n        const combinedData = {\n          ...currentMinuteData,\n          stress: currentHourData === null || currentHourData === void 0 ? void 0 : currentHourData.stress,\n          temperature: currentHourData === null || currentHourData === void 0 ? void 0 : currentHourData.temperature,\n          steps: dailySteps + (currentMinuteData.steps || 0)\n        };\n        setCurrentDataPoint(combinedData);\n        hourIndexRef.current = nextHourIndex;\n      } else {\n        // Just update with minute data + accumulated steps\n        const updatedData = {\n          ...currentMinuteData,\n          steps: dailySteps + (currentMinuteData.steps || 0)\n        };\n        setCurrentDataPoint(updatedData);\n      }\n\n      // Handle 00:00 updates\n      if (hour === 0 && minute === 0) {\n        // Reset daily steps\n        setDailySteps(0);\n\n        // Update MosaicChart with 7-day activity data\n        const last7days = getLast7Days(minuteSeries, currentTime); //currentTime \"2021-05-24T00:00:00Z\"\n\n        // Group by day and hour, calculate hourly totals\n        const dailyHourlyTotals = {};\n        last7days.forEach(record => {\n          const day = record.timestamp.split('T')[0];\n          const hour = parseInt(record.timestamp.slice(11, 13));\n          if (!dailyHourlyTotals[day]) {\n            dailyHourlyTotals[day] = {};\n          }\n          if (!dailyHourlyTotals[day][hour]) {\n            dailyHourlyTotals[day][hour] = {\n              calories: 0,\n              steps: 0\n            };\n          }\n          dailyHourlyTotals[day][hour].calories += record.calories || 0;\n          dailyHourlyTotals[day][hour].steps += record.steps || 0;\n        });\n\n        // Calculate activity percentages for each day\n        const activityArray = Object.entries(dailyHourlyTotals).sort(([dateA], [dateB]) => dateA.localeCompare(dateB)) // Sort by date\n        .map(([date, hourlyTotals]) => {\n          const hourlyScores = {\n            low: 0,\n            medium: 0,\n            high: 0\n          };\n          const totalHours = Object.keys(hourlyTotals).length;\n\n          // Calculate score for each hour\n          Object.values(hourlyTotals).forEach(hourData => {\n            const score = calcActivityScore(hourData.calories, hourData.steps);\n            hourlyScores[score]++;\n          });\n\n          // Convert to percentages\n          const result = {\n            date: date,\n            low: Math.round(hourlyScores.low / totalHours * 100),\n            medium: Math.round(hourlyScores.medium / totalHours * 100),\n            high: Math.round(hourlyScores.high / totalHours * 100),\n            totalHours: totalHours\n          };\n          return result;\n        });\n        setActivity(activityArray);\n      } else {\n        // Accumulate steps throughout the day\n        setDailySteps(prev => prev + (currentMinuteData.steps || 0));\n      }\n\n      // Handle 08:00 updates\n      if (hour === 8 && minute === 0) {\n        // Find last night's sleep data\n        const lastNight = daySeries.find(day => day.date === date);\n        if (lastNight !== null && lastNight !== void 0 && lastNight.sleep) {\n          const spans = toChartSpans(lastNight.sleep.levels);\n          setCurrentStages(spans);\n\n          // Calculate 7-night average\n          const last7Nights = getLast7Days(sleepSeries, currentTime);\n          const avgSleep = calcSleepAverages(last7Nights);\n          setAvgStages(avgSleep);\n        } else {\n          console.log(\"No sleep data found for\", date);\n        }\n\n        // Get yesterday's data for wellness calculation\n        const currentDateTime = new Date(currentTime + (currentTime.endsWith('Z') ? '' : 'Z'));\n        const yesterday = new Date(currentDateTime.getTime() - 24 * 60 * 60 * 1000);\n        const yesterdayStr = yesterday.toISOString().split('T')[0];\n\n        // Get yesterday's minute data\n        const yesterdayMinuteData = minuteSeries.filter(record => (record === null || record === void 0 ? void 0 : record.timestamp) && record.timestamp.startsWith(yesterdayStr));\n\n        // Get yesterday's hour data  \n        const yesterdayHourData = hourSeries.filter(record => (record === null || record === void 0 ? void 0 : record.timestamp) && record.timestamp.startsWith(yesterdayStr));\n\n        // Calculate wellness index for yesterday\n        const wellnessIndex = calcWellnessIndex(yesterdayMinuteData, yesterdayHourData, lastNight.sleep);\n        setWellness(wellnessIndex);\n      }\n      setCurrentSteps(currentMinuteData.steps);\n      minuteIndexRef.current = nextMinuteIndex;\n    }, simulationSpeed);\n    return () => clearInterval(interval);\n  }, [minuteSeries, hourSeries, daySeries, sleepSeries, dailySteps, simulationSpeed, isSimulationRunning]);\n  if (minuteSeries.length === 0) {\n    console.log(\"Loading data, minuteSeries.length:\", minuteSeries.length);\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading data\\u2026\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"speed-control-panel\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"speed-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timestamp-display\",\n          children: formatTimestamp(currentDataPoint === null || currentDataPoint === void 0 ? void 0 : currentDataPoint.timestamp)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"speed-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"speed-slider\",\n            children: [\"Speed: \", simulationSpeed, \"ms\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"speed-slider\",\n            type: \"range\",\n            min: \"1\",\n            max: \"100\",\n            step: \"1\",\n            value: simulationSpeed,\n            onChange: e => setSimulationSpeed(parseInt(e.target.value, 10)),\n            className: \"speed-slider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setIsSimulationRunning(!isSimulationRunning),\n            className: \"pause-button\",\n            children: isSimulationRunning ? 'Pause' : 'Resume'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-grid\",\n      children: [currentDataPoint && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          id: \"multi\",\n          children: /*#__PURE__*/_jsxDEV(MultiChart, {\n            data: currentDataPoint,\n            steps: currentSteps,\n            titles: [\"Heart Rate\", \"Steps/Min\", \"Kcal/Min\"]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          id: \"stress\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"gauge\",\n            children: /*#__PURE__*/_jsxDEV(GaugeChart, {\n              data: {\n                data: currentDataPoint === null || currentDataPoint === void 0 ? void 0 : currentDataPoint.stress\n              },\n              title: \"Stress Level\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          id: \"steps\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bar\",\n            children: /*#__PURE__*/_jsxDEV(BarChart, {\n              data: {\n                data: dailySteps\n              },\n              title: \"Daily Steps\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          id: \"status\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"gauge\",\n            children: /*#__PURE__*/_jsxDEV(GaugeChart, {\n              data: {\n                data: currentDataPoint === null || currentDataPoint === void 0 ? void 0 : currentDataPoint.temperature\n              },\n              title: \"Body Temperature\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true), avgStages && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        id: \"avgstages\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pie\",\n          children: /*#__PURE__*/_jsxDEV(PieChart, {\n            data: avgStages,\n            title: \"Sleep Quality Average\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this), currentDataPoint && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          id: \"laststages\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"span\",\n            children: /*#__PURE__*/_jsxDEV(SpanChart, {\n              data: currentStages\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          id: \"index\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spider\",\n            children: /*#__PURE__*/_jsxDEV(SpiderChart, {\n              data: wellness\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          id: \"activity\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mosaic\",\n            children: /*#__PURE__*/_jsxDEV(MosaicChart, {\n              data: activity\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"axwslT2wavqyZzlAAV2gS9TXab8=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","useRef","MultiChart","GaugeChart","BarChart","PieChart","SpanChart","SpiderChart","MosaicChart","convertTemperatures","calcActivityScore","getLast7Days","calcSleepAverages","calcWellnessIndex","getInitialData","toChartSpans","jsxDEV","_jsxDEV","Fragment","_Fragment","Dashboard","_s","minuteSeries","setMinuteSeries","hourSeries","setHourSeries","daySeries","setDaySeries","sleepSeries","setSleepSeries","currentSteps","setCurrentSteps","dailySteps","setDailySteps","currentStages","setCurrentStages","avgStages","setAvgStages","minuteIndexRef","hourIndexRef","activity","setActivity","wellness","setWellness","currentDataPoint","setCurrentDataPoint","simulationSpeed","setSimulationSpeed","isSimulationRunning","setIsSimulationRunning","formatTimestamp","timestamp","date","Date","endsWith","dateStr","toLocaleDateString","month","day","year","timeStr","toLocaleTimeString","hour12","hour","minute","second","controller","AbortController","Promise","all","fetch","signal","then","r","json","data","sleepData","initialData","catch","err","name","console","log","error","abort","length","interval","setInterval","nextMinuteIndex","current","currentMinuteData","currentTime","split","parseInt","slice","nextHourIndex","currentHourData","combinedData","stress","temperature","steps","updatedData","last7days","dailyHourlyTotals","forEach","record","calories","activityArray","Object","entries","sort","dateA","dateB","localeCompare","map","hourlyTotals","hourlyScores","low","medium","high","totalHours","keys","values","hourData","score","result","Math","round","prev","lastNight","find","sleep","spans","levels","last7Nights","avgSleep","currentDateTime","yesterday","getTime","yesterdayStr","toISOString","yesterdayMinuteData","filter","startsWith","yesterdayHourData","wellnessIndex","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","className","htmlFor","id","type","min","max","step","value","onChange","e","target","onClick","titles","title","_c","$RefreshReg$"],"sources":["D:/Repos/lcjs-dashboard/frontend/src/pages/Dashboard.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useEffect, useState, useRef } from 'react';\r\nimport '../styles/Dashboard.css';\r\nimport MultiChart from '../components/MultiChart.jsx';\r\nimport GaugeChart from '../components/charts/GaugeChart.jsx';\r\nimport BarChart from '../components/charts/BarChart.jsx'; \r\nimport PieChart from '../components/charts/PieChart.jsx'; \r\nimport SpanChart from '../components/charts/SpanChart.jsx'; \r\nimport SpiderChart from '../components/charts/SpiderChart.jsx'; \r\nimport MosaicChart from '../components/charts/MosaicChart.jsx'; \r\nimport convertTemperatures from '../utils/convertTemperatures.js';\r\nimport calcActivityScore from '../utils/calcActivityScore.js';\r\nimport getLast7Days from '../utils/getLast7Days.js';\r\nimport calcSleepAverages from '../utils/calcSleepAverages.js';\r\nimport calcWellnessIndex from '../utils/calcWellnessIndex.js';\r\nimport getInitialData from '../utils/getInitialData.js';\r\nimport toChartSpans from '../utils/toChartSpans.js';\r\n\r\nconst Dashboard = () => {\r\n  const [minuteSeries, setMinuteSeries] = useState([]);\r\n  const [hourSeries, setHourSeries] = useState([]);\r\n  const [daySeries, setDaySeries] = useState([]);\r\n  const [sleepSeries, setSleepSeries] = useState([]);\r\n  const [currentSteps, setCurrentSteps] = useState(0);\r\n  const [dailySteps, setDailySteps] = useState(0);\r\n  const [currentStages, setCurrentStages] = useState(null);\r\n  const [avgStages, setAvgStages] = useState(null);\r\n  const minuteIndexRef = useRef(0);\r\n  const hourIndexRef = useRef(0);\r\n  const [activity, setActivity] = useState(null);\r\n  const [wellness, setWellness] = useState(null);\r\n  const [currentDataPoint, setCurrentDataPoint] = useState(null);\r\n  const [simulationSpeed, setSimulationSpeed] = useState(16); // Default 16ms\r\n  const [isSimulationRunning, setIsSimulationRunning] = useState(true);\r\n\r\n  // Format timestamp for display\r\nconst formatTimestamp = (timestamp) => {\r\n  if (!timestamp) return 'No Data';\r\n  \r\n  const date = new Date(timestamp.endsWith('Z') ? timestamp : timestamp + 'Z');\r\n  \r\n  const dateStr = date.toLocaleDateString('en-US', {\r\n    month: '2-digit',\r\n    day: '2-digit',\r\n    year: 'numeric'\r\n  });\r\n  \r\n  const timeStr = date.toLocaleTimeString('en-US', { \r\n    hour12: false,\r\n    hour: '2-digit',\r\n    minute: '2-digit',\r\n    second: '2-digit'\r\n  });\r\n  \r\n  return `${dateStr} ${timeStr}`;\r\n};\r\n\r\n  useEffect(() => { \r\n    const controller = new AbortController();\r\n\r\n    Promise.all([\r\n      fetch(\"/api/data\", { signal: controller.signal }).then(r => r.json()),\r\n      fetch(\"/api/sleep-data\", { signal: controller.signal }).then((r) => r.json())\r\n    ])\r\n    .then(([data, sleepData]) => {\r\n      if (!data || !sleepData) return;\r\n\r\n      // Convert temperature deviation values to absolute temperature values\r\n      convertTemperatures(data.hourSeries);\r\n    \r\n      // Update state with the fetched data\r\n      setMinuteSeries(data.minuteSeries || []);\r\n      setHourSeries(data.hourSeries || []);\r\n      setDaySeries(data.daySeries || []);\r\n      setSleepSeries(sleepData.daySeries || []);\r\n      \r\n      // Initialize charts with data from the last 7 days of data set (ending 2022-01-21)\r\n      const initialData = getInitialData(data.minuteSeries, data.hourSeries, data.daySeries, sleepData.daySeries);\r\n      setCurrentStages(toChartSpans(initialData.currentStages));\r\n      setAvgStages(initialData.avgStages);\r\n      setWellness(initialData.wellness);\r\n    })\r\n    .catch((err) => {\r\n      if (err.name === \"AbortError\") {\r\n        console.log(\"Fetch aborted\");\r\n      } else {\r\n        console.error(\"Error fetching data:\", err);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      controller.abort();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (minuteSeries.length === 0 || hourSeries.length === 0 || daySeries.length === 0 || !isSimulationRunning) {\r\n      console.log(\"Waiting for data or simulation paused...\");\r\n      return;\r\n    }\r\n\r\n    const interval = setInterval(() => {\r\n      // Update minute data every cycle\r\n      let nextMinuteIndex = (minuteIndexRef.current + 1) % minuteSeries.length;\r\n      const currentMinuteData = minuteSeries[nextMinuteIndex];\r\n\r\n      if (!currentMinuteData?.timestamp) {\r\n        minuteIndexRef.current = nextMinuteIndex;\r\n        return;\r\n      }\r\n\r\n      const currentTime = currentMinuteData.timestamp;\r\n      const date = currentTime.split('T')[0];\r\n      const hour =  parseInt(currentTime.slice(11, 13));\r\n      const minute = parseInt(currentTime.slice(14, 16));\r\n\r\n      // Check if hour changed, update hourSeries data\r\n      if (minute === 0)  {\r\n        let nextHourIndex = (hourIndexRef.current + 1) % hourSeries.length;\r\n        const currentHourData = hourSeries[nextHourIndex];\r\n\r\n        // Merge minute and hour data\r\n        const combinedData = {\r\n          ...currentMinuteData,\r\n          stress: currentHourData?.stress,\r\n          temperature: currentHourData?.temperature,\r\n          steps: dailySteps + (currentMinuteData.steps || 0)            \r\n        };\r\n\r\n        setCurrentDataPoint(combinedData);\r\n\r\n        hourIndexRef.current = nextHourIndex;\r\n      } else {\r\n        // Just update with minute data + accumulated steps\r\n        const updatedData = {\r\n          ...currentMinuteData,\r\n          steps: dailySteps + (currentMinuteData.steps || 0)  \r\n        }\r\n        setCurrentDataPoint(updatedData);\r\n      }\r\n\r\n      // Handle 00:00 updates\r\n      if (hour === 0 && minute === 0)  {\r\n\r\n        // Reset daily steps\r\n        setDailySteps(0);\r\n\r\n        // Update MosaicChart with 7-day activity data\r\n        const last7days = getLast7Days(minuteSeries, currentTime);  //currentTime \"2021-05-24T00:00:00Z\"\r\n        \r\n        // Group by day and hour, calculate hourly totals\r\n        const dailyHourlyTotals = {};\r\n        last7days.forEach(record => {\r\n          const day = record.timestamp.split('T')[0];  \r\n          const hour = parseInt(record.timestamp.slice(11, 13)); \r\n          \r\n          if (!dailyHourlyTotals[day]) {\r\n            dailyHourlyTotals[day] = {};\r\n          }\r\n          if (!dailyHourlyTotals[day][hour]) {\r\n            dailyHourlyTotals[day][hour] = { calories: 0, steps: 0 };\r\n          }\r\n          \r\n          dailyHourlyTotals[day][hour].calories += record.calories || 0;\r\n          dailyHourlyTotals[day][hour].steps += record.steps || 0;\r\n        });\r\n\r\n        // Calculate activity percentages for each day\r\n        const activityArray = Object.entries(dailyHourlyTotals)\r\n          .sort(([dateA], [dateB]) => dateA.localeCompare(dateB)) // Sort by date\r\n          .map(([date, hourlyTotals]) => {\r\n            const hourlyScores = { low: 0, medium: 0, high: 0 };\r\n            const totalHours = Object.keys(hourlyTotals).length;\r\n            \r\n            // Calculate score for each hour\r\n            Object.values(hourlyTotals).forEach(hourData => {\r\n              const score = calcActivityScore(hourData.calories, hourData.steps);\r\n              hourlyScores[score]++;\r\n            });\r\n            \r\n            // Convert to percentages\r\n            const result = {\r\n              date: date,\r\n              low: Math.round((hourlyScores.low / totalHours) * 100),\r\n              medium: Math.round((hourlyScores.medium / totalHours) * 100),\r\n              high: Math.round((hourlyScores.high / totalHours) * 100),\r\n              totalHours: totalHours\r\n            };\r\n            return result;\r\n          });\r\n\r\n        setActivity(activityArray);\r\n      } else {\r\n        // Accumulate steps throughout the day\r\n        setDailySteps(prev => prev + (currentMinuteData.steps || 0));\r\n      }\r\n\r\n      // Handle 08:00 updates\r\n      if (hour === 8 && minute === 0) {\r\n\r\n        // Find last night's sleep data\r\n        const lastNight = daySeries.find(day => day.date === date);\r\n\r\n        if (lastNight?.sleep) {\r\n          const spans = toChartSpans(lastNight.sleep.levels);\r\n          setCurrentStages(spans);\r\n\r\n          // Calculate 7-night average\r\n          const last7Nights = getLast7Days(sleepSeries, currentTime);\r\n\r\n          const avgSleep = calcSleepAverages(last7Nights);\r\n\r\n          setAvgStages(avgSleep);\r\n\r\n        } else {\r\n          console.log(\"No sleep data found for\", date);\r\n        }\r\n\r\n        // Get yesterday's data for wellness calculation\r\n        const currentDateTime = new Date(currentTime + (currentTime.endsWith('Z') ? '' : 'Z'));\r\n        const yesterday = new Date(currentDateTime.getTime() - (24 * 60 * 60 * 1000));\r\n        const yesterdayStr = yesterday.toISOString().split('T')[0];\r\n\r\n        // Get yesterday's minute data\r\n        const yesterdayMinuteData = minuteSeries.filter(record => \r\n          record?.timestamp && record.timestamp.startsWith(yesterdayStr)\r\n        );\r\n\r\n        // Get yesterday's hour data  \r\n        const yesterdayHourData = hourSeries.filter(record =>\r\n          record?.timestamp && record.timestamp.startsWith(yesterdayStr)\r\n        );\r\n        \r\n        // Calculate wellness index for yesterday\r\n        const wellnessIndex = calcWellnessIndex(\r\n          yesterdayMinuteData, \r\n          yesterdayHourData,\r\n          lastNight.sleep            \r\n        );\r\n        \r\n        setWellness(wellnessIndex);\r\n      }\r\n\r\n      setCurrentSteps(currentMinuteData.steps);\r\n      \r\n      minuteIndexRef.current = nextMinuteIndex;\r\n    }, simulationSpeed); \r\n\r\n    return () => clearInterval(interval);\r\n  }, [minuteSeries, hourSeries, daySeries, sleepSeries, dailySteps, simulationSpeed, isSimulationRunning]);\r\n\r\n  if (minuteSeries.length === 0) {\r\n    console.log(\"Loading data, minuteSeries.length:\", minuteSeries.length);\r\n    return <p>Loading data…</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      {/* Speed Control Panel */}\r\n      <div className=\"speed-control-panel\">\r\n        <div className=\"speed-controls\">\r\n          <div className=\"timestamp-display\">\r\n            {formatTimestamp(currentDataPoint?.timestamp)}\r\n          </div>\r\n          \r\n          <div className=\"speed-section\">\r\n            <label htmlFor=\"speed-slider\">Speed: {simulationSpeed}ms</label>\r\n            <input\r\n              id=\"speed-slider\"\r\n              type=\"range\"\r\n              min=\"1\"\r\n              max=\"100\"\r\n              step=\"1\"\r\n              value={simulationSpeed}\r\n              onChange={(e) => setSimulationSpeed(parseInt(e.target.value, 10))}\r\n              className=\"speed-slider\"\r\n            />\r\n            <button \r\n              onClick={() => setIsSimulationRunning(!isSimulationRunning)}\r\n              className=\"pause-button\"\r\n            >\r\n              {isSimulationRunning ? 'Pause' : 'Resume'}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"dashboard-grid\">\r\n      {currentDataPoint && (\r\n      <> \r\n        <div className=\"card\" id=\"multi\">\r\n          <MultiChart data={currentDataPoint} steps={currentSteps} titles={[\"Heart Rate\", \"Steps/Min\", \"Kcal/Min\"]} />\r\n      </div>\r\n        <div className=\"card\" id=\"stress\">\r\n          <div className=\"gauge\">\r\n            <GaugeChart data={{ data: currentDataPoint?.stress }} title=\"Stress Level\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"card\" id=\"steps\">\r\n          <div className=\"bar\">\r\n            <BarChart data={{ data: dailySteps }} title=\"Daily Steps\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"card\" id=\"status\">\r\n          <div className=\"gauge\">\r\n            <GaugeChart data={{ data: currentDataPoint?.temperature }} title=\"Body Temperature\" />\r\n          </div>         \r\n        </div>\r\n      </>\r\n      )}\r\n      {avgStages && (\r\n        <div className=\"card\" id=\"avgstages\">\r\n          <div className=\"pie\">\r\n            <PieChart data={avgStages} title=\"Sleep Quality Average\"/>\r\n          </div> \r\n        </div>\r\n      )}\r\n      {currentDataPoint && (\r\n      <>\r\n        <div className=\"card\" id=\"laststages\">\r\n          <div className=\"span\">\r\n            <SpanChart data={currentStages}/>\r\n          </div> \r\n        </div>\r\n        <div className=\"card\" id=\"index\">\r\n          <div className=\"spider\">\r\n            <SpiderChart data={wellness}/>\r\n          </div> \r\n        </div>\r\n        <div className=\"card\" id=\"activity\">\r\n          <div className=\"mosaic\">\r\n            <MosaicChart data={activity}/>\r\n          </div> \r\n        </div>\r\n      </>\r\n      )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}