{"ast":null,"code":"import calcActivityScore from './calcActivityScore.js';\nimport calcSleepAverages from './calcSleepAverages.js';\nimport calcWellnessIndex from './calcWellnessIndex.js';\nexport default function getInitialData(minuteSeries, hourSeries, daySeries, sleepSeries) {\n  var _lastSleep$sleep;\n  const lastDate = \"2022-01-21\";\n\n  // Sleep data (from daySeries)\n  const lastSleep = daySeries.find(day => day.date === lastDate);\n  const currentStages = (lastSleep === null || lastSleep === void 0 ? void 0 : (_lastSleep$sleep = lastSleep.sleep) === null || _lastSleep$sleep === void 0 ? void 0 : _lastSleep$sleep.levels) || [];\n\n  // Last 7 nights of sleep\n  const lastDayDate = new Date(lastDate + 'T00:00:00Z');\n  const sevenDaysAgo = new Date(lastDayDate.getTime() - 6 * 24 * 60 * 60 * 1000);\n  const last7Nights = (sleepSeries || []).filter(day => {\n    const d = new Date(day.date + 'T00:00:00Z');\n    return d >= sevenDaysAgo && d <= lastDayDate && day.sleep;\n  });\n\n  // console.log(\"getInitialData: lastDate:\", lastDate);\n  // console.log(\"getInitialData: sevenDaysAgo:\", sevenDaysAgo.toISOString());\n  // console.log(\"getInitialData: lastDayDate:\", lastDayDate.toISOString());\n  // console.log(\"getInitialData: sleepSeries.length:\", sleepSeries?.length);\n  // console.log(\"getInitialData: first few sleepSeries dates:\", sleepSeries?.slice(0, 5).map(s => s.date));\n  // console.log(\"getInitialData: last few sleepSeries dates:\", sleepSeries?.slice(-5).map(s => s.date));\n  // console.log(\"getInitialData: last7Nights.length:\", last7Nights.length);\n\n  const avgStages = calcSleepAverages(last7Nights);\n  console.log(\"getInitialData: avgStages:\", avgStages);\n  // ---- Activity data (from daySeries + minuteSeries) ----\n  // const last7Days = daySeries.filter(day => {\n  //   const d = new Date(day.date + 'T00:00:00Z');\n  //   return d >= sevenDaysAgo && d <= lastDayDate;\n  // });\n\n  // const last7DaysMinuteData = minuteSeries.filter(record => {\n  //   const recordDate = record.timestamp.split('T')[0];\n  //   return last7Days.some(day => day.date === recordDate);\n  // });\n\n  // const dailyHourlyTotals = {};\n  // last7DaysMinuteData.forEach(record => {\n  //   const day = record.timestamp.split('T')[0];\n  //   const hour = parseInt(record.timestamp.slice(11, 13));\n\n  //   if (!dailyHourlyTotals[day]) dailyHourlyTotals[day] = {};\n  //   if (!dailyHourlyTotals[day][hour]) dailyHourlyTotals[day][hour] = { calories: 0, steps: 0 };\n\n  //   dailyHourlyTotals[day][hour].calories += record.calories || 0;\n  //   dailyHourlyTotals[day][hour].steps += record.steps || 0;\n  // });\n\n  // const activity = Object.entries(dailyHourlyTotals)\n  //   .sort(([a], [b]) => a.localeCompare(b))\n  //   .map(([date, hourlyTotals]) => {\n  //     const hourlyScores = { low: 0, medium: 0, high: 0 };\n  //     const totalHours = Object.keys(hourlyTotals).length;\n\n  //     Object.values(hourlyTotals).forEach(hourData => {\n  //       const score = calcActivityScore(hourData.calories, hourData.steps);\n  //       hourlyScores[score]++;\n  //     });\n\n  //     return {\n  //       date,\n  //       low: Math.round((hourlyScores.low / totalHours) * 100),\n  //       medium: Math.round((hourlyScores.medium / totalHours) * 100),\n  //       high: Math.round((hourlyScores.high / totalHours) * 100),\n  //       totalHours\n  //     };\n  //   });\n\n  // ---- Wellness index ----\n  const lastDayMinuteData = minuteSeries.filter(record => (record === null || record === void 0 ? void 0 : record.timestamp) && record.timestamp.startsWith(lastDate));\n  const lastDayHourData = hourSeries.filter(record => (record === null || record === void 0 ? void 0 : record.timestamp) && record.timestamp.startsWith(lastDate));\n  const wellness = calcWellnessIndex(lastDayMinuteData, currentStages, lastDayHourData);\n  return {\n    currentStages,\n    avgStages,\n    // activity,\n    wellness\n  };\n}","map":{"version":3,"names":["calcActivityScore","calcSleepAverages","calcWellnessIndex","getInitialData","minuteSeries","hourSeries","daySeries","sleepSeries","_lastSleep$sleep","lastDate","lastSleep","find","day","date","currentStages","sleep","levels","lastDayDate","Date","sevenDaysAgo","getTime","last7Nights","filter","d","avgStages","console","log","lastDayMinuteData","record","timestamp","startsWith","lastDayHourData","wellness"],"sources":["C:/Users/jenni.mikkonen/OneDrive - LightningChart Ltd/Repos/lcjs-dashboard/frontend/src/utils/getInitialData.js"],"sourcesContent":["import calcActivityScore from './calcActivityScore.js';\r\nimport calcSleepAverages from './calcSleepAverages.js';\r\nimport calcWellnessIndex from './calcWellnessIndex.js';\r\n\r\nexport default function getInitialData(minuteSeries, hourSeries, daySeries, sleepSeries) {\r\n  const lastDate = \"2022-01-21\";\r\n\r\n  // Sleep data (from daySeries)\r\n  const lastSleep = daySeries.find(day => day.date === lastDate);\r\n  const currentStages = lastSleep?.sleep?.levels || [];\r\n\r\n  // Last 7 nights of sleep\r\n  const lastDayDate = new Date(lastDate + 'T00:00:00Z');\r\n  const sevenDaysAgo = new Date(lastDayDate.getTime() - (6 * 24 * 60 * 60 * 1000));\r\n\r\n  const last7Nights = (sleepSeries || []).filter(day => {\r\n    const d = new Date(day.date + 'T00:00:00Z');\r\n    return d >= sevenDaysAgo && d <= lastDayDate && day.sleep;\r\n  });\r\n\r\n  // console.log(\"getInitialData: lastDate:\", lastDate);\r\n  // console.log(\"getInitialData: sevenDaysAgo:\", sevenDaysAgo.toISOString());\r\n  // console.log(\"getInitialData: lastDayDate:\", lastDayDate.toISOString());\r\n  // console.log(\"getInitialData: sleepSeries.length:\", sleepSeries?.length);\r\n  // console.log(\"getInitialData: first few sleepSeries dates:\", sleepSeries?.slice(0, 5).map(s => s.date));\r\n  // console.log(\"getInitialData: last few sleepSeries dates:\", sleepSeries?.slice(-5).map(s => s.date));\r\n  // console.log(\"getInitialData: last7Nights.length:\", last7Nights.length);\r\n\r\n  const avgStages = calcSleepAverages(last7Nights);\r\n  console.log(\"getInitialData: avgStages:\", avgStages);\r\n  // ---- Activity data (from daySeries + minuteSeries) ----\r\n  // const last7Days = daySeries.filter(day => {\r\n  //   const d = new Date(day.date + 'T00:00:00Z');\r\n  //   return d >= sevenDaysAgo && d <= lastDayDate;\r\n  // });\r\n\r\n  // const last7DaysMinuteData = minuteSeries.filter(record => {\r\n  //   const recordDate = record.timestamp.split('T')[0];\r\n  //   return last7Days.some(day => day.date === recordDate);\r\n  // });\r\n\r\n  // const dailyHourlyTotals = {};\r\n  // last7DaysMinuteData.forEach(record => {\r\n  //   const day = record.timestamp.split('T')[0];\r\n  //   const hour = parseInt(record.timestamp.slice(11, 13));\r\n\r\n  //   if (!dailyHourlyTotals[day]) dailyHourlyTotals[day] = {};\r\n  //   if (!dailyHourlyTotals[day][hour]) dailyHourlyTotals[day][hour] = { calories: 0, steps: 0 };\r\n\r\n  //   dailyHourlyTotals[day][hour].calories += record.calories || 0;\r\n  //   dailyHourlyTotals[day][hour].steps += record.steps || 0;\r\n  // });\r\n\r\n  // const activity = Object.entries(dailyHourlyTotals)\r\n  //   .sort(([a], [b]) => a.localeCompare(b))\r\n  //   .map(([date, hourlyTotals]) => {\r\n  //     const hourlyScores = { low: 0, medium: 0, high: 0 };\r\n  //     const totalHours = Object.keys(hourlyTotals).length;\r\n\r\n  //     Object.values(hourlyTotals).forEach(hourData => {\r\n  //       const score = calcActivityScore(hourData.calories, hourData.steps);\r\n  //       hourlyScores[score]++;\r\n  //     });\r\n\r\n  //     return {\r\n  //       date,\r\n  //       low: Math.round((hourlyScores.low / totalHours) * 100),\r\n  //       medium: Math.round((hourlyScores.medium / totalHours) * 100),\r\n  //       high: Math.round((hourlyScores.high / totalHours) * 100),\r\n  //       totalHours\r\n  //     };\r\n  //   });\r\n\r\n  // ---- Wellness index ----\r\n  const lastDayMinuteData = minuteSeries.filter(record =>\r\n    record?.timestamp && record.timestamp.startsWith(lastDate)\r\n  );\r\n  const lastDayHourData = hourSeries.filter(record =>\r\n    record?.timestamp && record.timestamp.startsWith(lastDate)\r\n  );\r\n\r\n  const wellness = calcWellnessIndex(\r\n    lastDayMinuteData,\r\n    currentStages,\r\n    lastDayHourData\r\n  );\r\n\r\n  return {\r\n    currentStages,\r\n    avgStages,\r\n    // activity,\r\n    wellness\r\n  };\r\n}\r\n"],"mappings":"AAAA,OAAOA,iBAAiB,MAAM,wBAAwB;AACtD,OAAOC,iBAAiB,MAAM,wBAAwB;AACtD,OAAOC,iBAAiB,MAAM,wBAAwB;AAEtD,eAAe,SAASC,cAAcA,CAACC,YAAY,EAAEC,UAAU,EAAEC,SAAS,EAAEC,WAAW,EAAE;EAAA,IAAAC,gBAAA;EACvF,MAAMC,QAAQ,GAAG,YAAY;;EAE7B;EACA,MAAMC,SAAS,GAAGJ,SAAS,CAACK,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,KAAKJ,QAAQ,CAAC;EAC9D,MAAMK,aAAa,GAAG,CAAAJ,SAAS,aAATA,SAAS,wBAAAF,gBAAA,GAATE,SAAS,CAAEK,KAAK,cAAAP,gBAAA,uBAAhBA,gBAAA,CAAkBQ,MAAM,KAAI,EAAE;;EAEpD;EACA,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAACT,QAAQ,GAAG,YAAY,CAAC;EACrD,MAAMU,YAAY,GAAG,IAAID,IAAI,CAACD,WAAW,CAACG,OAAO,CAAC,CAAC,GAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAK,CAAC;EAEhF,MAAMC,WAAW,GAAG,CAACd,WAAW,IAAI,EAAE,EAAEe,MAAM,CAACV,GAAG,IAAI;IACpD,MAAMW,CAAC,GAAG,IAAIL,IAAI,CAACN,GAAG,CAACC,IAAI,GAAG,YAAY,CAAC;IAC3C,OAAOU,CAAC,IAAIJ,YAAY,IAAII,CAAC,IAAIN,WAAW,IAAIL,GAAG,CAACG,KAAK;EAC3D,CAAC,CAAC;;EAEF;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMS,SAAS,GAAGvB,iBAAiB,CAACoB,WAAW,CAAC;EAChDI,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEF,SAAS,CAAC;EACpD;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA,MAAMG,iBAAiB,GAAGvB,YAAY,CAACkB,MAAM,CAACM,MAAM,IAClD,CAAAA,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEC,SAAS,KAAID,MAAM,CAACC,SAAS,CAACC,UAAU,CAACrB,QAAQ,CAC3D,CAAC;EACD,MAAMsB,eAAe,GAAG1B,UAAU,CAACiB,MAAM,CAACM,MAAM,IAC9C,CAAAA,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEC,SAAS,KAAID,MAAM,CAACC,SAAS,CAACC,UAAU,CAACrB,QAAQ,CAC3D,CAAC;EAED,MAAMuB,QAAQ,GAAG9B,iBAAiB,CAChCyB,iBAAiB,EACjBb,aAAa,EACbiB,eACF,CAAC;EAED,OAAO;IACLjB,aAAa;IACbU,SAAS;IACT;IACAQ;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}