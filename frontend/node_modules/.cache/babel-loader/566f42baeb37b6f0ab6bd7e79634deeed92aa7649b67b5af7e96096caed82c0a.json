{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jenni.mikkonen\\\\OneDrive - LightningChart Ltd\\\\Repos\\\\lcjs-dashboard\\\\frontend\\\\src\\\\pages\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useEffect, useState, useMemo, useRef } from 'react';\nimport '../styles/Dashboard.css';\nimport MultiChart from '../components/MultiChart.jsx';\nimport GaugeChart from '../components/charts/GaugeChart.jsx';\nimport BarChart from '../components/charts/BarChart.jsx';\nimport PieChart from '../components/charts/PieChart.jsx';\nimport SpanChart from '../components/charts/SpanChart.jsx';\nimport SpiderChart from '../components/charts/SpiderChart.jsx';\nimport MosaicChart from '../components/charts/MosaicChart.jsx';\nimport convertTemperatures from '../utils/convertTemperatures.js';\nimport calcActivityScore from '../utils/calcActivityScore.js';\nimport getLast7Days from '../utils/getLast7Days.js';\nimport calcSleepAverages from '../utils/calcSleepAverages.js';\nimport calcWellnessIndex from '../utils/calcWellnessIndex.js';\nimport getInitialData from '../utils/getInitialData.js';\nimport toChartSpans from '../utils/toChartSpans.js';\nimport getStageAtTime from '../utils/getStageAtTime.js';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  // console.log('Dashboard render');\n\n  const [minuteSeries, setMinuteSeries] = useState([]);\n  const [hourSeries, setHourSeries] = useState([]);\n  const [daySeries, setDaySeries] = useState([]);\n  const [sleepSeries, setSleepSeries] = useState([]);\n  const [minuteIndex, setMinuteIndex] = useState(0);\n  const [hourIndex, setHourIndex] = useState(0);\n  const [dayIndex, setDayIndex] = useState(0);\n  const [currentSteps, setCurrentSteps] = useState(0);\n  const [dailySteps, setDailySteps] = useState(0);\n  const [currentHour, setCurrentHour] = useState(0);\n  const [msg, setMsg] = useState(null);\n  const [temperatures, setTemperatures] = useState([]);\n  const [allNights, setAllNights] = useState([]);\n  const [currentStages, setCurrentStages] = useState(null);\n  const [avgStages, setAvgStages] = useState(null);\n\n  // Add debugging for avgStages changes\n  useEffect(() => {\n    console.log(\"avgStages changed:\", avgStages);\n  }, [avgStages]);\n  const [activity, setActivity] = useState(null);\n  const [wellness, setWellness] = useState(null);\n  const [timeIndex, setTimeIndex] = useState(0);\n  const [newPoints, setNewPoints] = useState(null);\n  const [currentDataPoint, setCurrentDataPoint] = useState(null);\n  useEffect(() => {\n    console.log(\"Fetching data from backend...\");\n    Promise.all([fetch(\"/api/data\").then(r => r.json()), fetch(\"/api/sleep-data\").then(r => {\n      // console.log(\"Sleep data fetch response status:\", r.status);\n      return r.json();\n    }) // sleep dataset\n    ]).then(([data, sleepData]) => {\n      // console.log(\"Fetched data:\", data);\n      // console.log(\"Fetched sleepData:\", sleepData);\n      // Convert temperature deviation values to absolute temperature values\n      convertTemperatures(data.hourSeries);\n\n      // Update state with the fetched data\n      setMinuteSeries(data.minuteSeries || []);\n      setHourSeries(data.hourSeries || []);\n      setDaySeries(data.daySeries || []);\n      setSleepSeries(sleepData.daySeries || []);\n      // console.log(`Loaded ${data.minuteSeries?.length} minutes, ${data.hourSeries?.length} hours, ${data.daySeries?.length} days, ${sleepData.daySeries?.length} sleeps`);\n\n      // Initialize charts with data from the last 7 days of data set (ending 2022-01-21)\n      const initialData = getInitialData(data.minuteSeries, data.hourSeries, data.daySeries, sleepData.daySeries);\n      setCurrentStages(toChartSpans(initialData.currentStages));\n      setAvgStages(initialData.avgStages);\n      // setActivity(initialData.activity);\n      setWellness(initialData.wellness);\n      // console.log(\"Initialized with last 7 days data:\", initialData);\n      console.log(\"currentStages set to:\", initialData.currentStages);\n    }).catch(error => {\n      console.error(\"Error fetching data:\", error);\n      setMsg(\"Error: \" + error.message);\n    });\n  }, []);\n  useEffect(() => {\n    if (minuteSeries.length === 0 || hourSeries.length === 0 || daySeries.length === 0) {\n      console.log(\"Waiting for all data to load...\");\n      return;\n    }\n    const interval = setInterval(() => {\n      // Update minute data every cycle\n      setMinuteIndex(prevMinuteIndex => {\n        const nextMinuteIndex = (prevMinuteIndex + 1) % minuteSeries.length;\n        const currentMinuteData = minuteSeries[nextMinuteIndex];\n        if (!(currentMinuteData !== null && currentMinuteData !== void 0 && currentMinuteData.timestamp)) return nextMinuteIndex;\n        setMsg(currentMinuteData.timestamp);\n        const currentTime = currentMinuteData.timestamp;\n        const date = currentTime.split('T')[0];\n        const hour = parseInt(currentTime.slice(11, 13));\n        const minute = parseInt(currentTime.slice(14, 16));\n        // console.log(\"currentTime date hour minute: \", currentTime, date, hour, minute);\n\n        // Check if hour changed, update hourSeries data\n        if (minute === 0) {\n          // console.log(\"New hour\");\n          setHourIndex(prevHourIndex => {\n            const nextHourIndex = (prevHourIndex + 1) % hourSeries.length;\n            const currentHourData = hourSeries[nextHourIndex];\n\n            // Merge minute and hour data\n            const combinedData = {\n              ...currentMinuteData,\n              stress: currentHourData === null || currentHourData === void 0 ? void 0 : currentHourData.stress,\n              temperature: currentHourData === null || currentHourData === void 0 ? void 0 : currentHourData.temperature,\n              steps: dailySteps + (currentMinuteData.steps || 0)\n            };\n            setCurrentDataPoint(combinedData);\n            setCurrentHour(hour);\n            // console.log(\"currentDataPoint (hour update)\", combinedData);\n\n            return nextHourIndex;\n          });\n        } else {\n          // Just update with minute data + accumulated steps\n          const updatedData = {\n            ...currentMinuteData,\n            steps: dailySteps + (currentMinuteData.steps || 0)\n          };\n          setCurrentDataPoint(updatedData);\n          // console.log(\"currentDataPoint (minute update)\", updatedData);\n        }\n\n        // Handle 00:00 updates\n        if (hour === 0 && minute === 0) {\n          console.log(\"Midnight 00:00\");\n\n          // Reset daily steps\n          setDailySteps(0);\n\n          // Update MosaicChart with 7-day activity data\n          const last7days = getLast7Days(minuteSeries, currentTime); //currentTime \"2021-05-24T00:00:00Z\"\n          // console.log(\"last7days: \", last7days);\n\n          // Group by day and hour, calculate hourly totals\n          const dailyHourlyTotals = {};\n          last7days.forEach(record => {\n            const day = record.timestamp.split('T')[0]; //day \"2021-02-12\"\n            const hour = parseInt(record.timestamp.slice(11, 13)); // Extract hour\n\n            if (!dailyHourlyTotals[day]) {\n              dailyHourlyTotals[day] = {};\n            }\n            if (!dailyHourlyTotals[day][hour]) {\n              dailyHourlyTotals[day][hour] = {\n                calories: 0,\n                steps: 0\n              };\n            }\n            dailyHourlyTotals[day][hour].calories += record.calories || 0;\n            dailyHourlyTotals[day][hour].steps += record.steps || 0;\n          });\n\n          // Calculate activity percentages for each day\n          const activityArray = Object.entries(dailyHourlyTotals).sort(([dateA], [dateB]) => dateA.localeCompare(dateB)) // Sort by date\n          .map(([date, hourlyTotals]) => {\n            const hourlyScores = {\n              low: 0,\n              medium: 0,\n              high: 0\n            };\n            const totalHours = Object.keys(hourlyTotals).length;\n\n            // Calculate score for each hour\n            Object.values(hourlyTotals).forEach(hourData => {\n              const activityPoints = hourData.calories * 0.1 + hourData.steps * 0.005;\n              const score = calcActivityScore(hourData.calories, hourData.steps);\n              // console.log(`Hour data: calories=${hourData.calories}, steps=${hourData.steps}, points=${activityPoints}, score=${score}`);\n              hourlyScores[score]++;\n            });\n\n            // Convert to percentages\n            const result = {\n              date: date,\n              low: Math.round(hourlyScores.low / totalHours * 100),\n              medium: Math.round(hourlyScores.medium / totalHours * 100),\n              high: Math.round(hourlyScores.high / totalHours * 100),\n              totalHours: totalHours\n            };\n            // console.log(`Day ${date}: ${hourlyScores.low}/${hourlyScores.medium}/${hourlyScores.high} out of ${totalHours} hours = ${result.low}%/${result.medium}%/${result.high}%`);\n            return result;\n          });\n\n          // console.log(\"activityArray: \", activityArray);\n          setActivity(activityArray);\n        } else {\n          // Accumulate steps throughout the day\n          setDailySteps(prev => prev + (currentMinuteData.steps || 0));\n        }\n\n        // Handle 08:00 updates\n        if (hour === 8 && minute === 0) {\n          var _lastNight$sleep;\n          console.log(\"Eight AM 08:00\");\n\n          // Find last night's sleep data\n          const lastNight = sleepSeries.find(day => day.date === date);\n          console.log(\"lastnight sleep: \", lastNight.sleep);\n          if (lastNight !== null && lastNight !== void 0 && (_lastNight$sleep = lastNight.sleep) !== null && _lastNight$sleep !== void 0 && _lastNight$sleep.levels) {\n            var _lastNight$sleep2;\n            setCurrentStages(toChartSpans(lastNight.sleep.levels));\n            console.log(\"8 AM lastNight.sleep:\", lastNight.sleep);\n            console.log(\"8 AM lastNight.sleep.levels:\", (_lastNight$sleep2 = lastNight.sleep) === null || _lastNight$sleep2 === void 0 ? void 0 : _lastNight$sleep2.levels);\n\n            // Calculate 7-night average\n            const last7Nights = getLast7Days(sleepSeries, currentTime).filter(day => day.sleep);\n            const avgSleep = calcSleepAverages(last7Nights);\n            console.log(\"8 AM update - avgSleep:\", avgSleep);\n            if (avgSleep) {\n              console.log(\"8 AM update - setting avgStages directly from calcSleepAverages\");\n              setAvgStages(avgSleep);\n            } else {\n              console.log(\"8 AM update - no avgSleep data available\");\n            }\n\n            // console.log(\"Updated sleep data:\", { lastNight: lastNight.sleep, average: avgSleep });\n          } else {\n            console.log(\"No sleep data found for\", date);\n          }\n\n          // Get yesterday's data for wellness calculation\n          const currentDateTime = new Date(currentTime + (currentTime.endsWith('Z') ? '' : 'Z'));\n          const yesterday = new Date(currentDateTime.getTime() - 24 * 60 * 60 * 1000);\n          const yesterdayStr = yesterday.toISOString().split('T')[0];\n          // console.log(\"lastnight sleep: \", lastNight.sleep)\n\n          // Get yesterday's minute data\n          const yesterdayMinuteData = minuteSeries.filter(record => (record === null || record === void 0 ? void 0 : record.timestamp) && record.timestamp.startsWith(yesterdayStr));\n          // console.log(\"yesterdayMinuteData: \", yesterdayMinuteData)\n\n          // Get yesterday's hour data  \n          const yesterdayHourData = hourSeries.filter(record => (record === null || record === void 0 ? void 0 : record.timestamp) && record.timestamp.startsWith(yesterdayStr));\n          // console.log(\"yesterdayHourData: \", yesterdayHourData)\n\n          // Calculate wellness index for yesterday\n          const wellnessIndex = calcWellnessIndex(yesterdayMinuteData, lastNight.sleep, yesterdayHourData);\n          setWellness(wellnessIndex);\n          console.log(\"Updated wellness index:\", wellnessIndex);\n        }\n        setCurrentSteps(currentMinuteData.steps);\n        return nextMinuteIndex;\n      });\n    }, 16); // 0.1 second = 1 simulated minute\n\n    return () => clearInterval(interval);\n  }, [minuteSeries, hourSeries, daySeries]);\n  if (minuteSeries.length === 0) {\n    console.log(\"Loading data, minuteSeries.length:\", minuteSeries.length);\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading data\\u2026\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-grid\",\n      children: [currentDataPoint && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          id: \"multi\",\n          children: /*#__PURE__*/_jsxDEV(MultiChart, {\n            data: currentDataPoint,\n            steps: currentSteps\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          id: \"stress\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"gauge\",\n            children: /*#__PURE__*/_jsxDEV(GaugeChart, {\n              data: {\n                data: currentDataPoint === null || currentDataPoint === void 0 ? void 0 : currentDataPoint.stress\n              },\n              number: currentDataPoint === null || currentDataPoint === void 0 ? void 0 : currentDataPoint.stress,\n              title: \"Stress Level\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          id: \"steps\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bar\",\n            children: /*#__PURE__*/_jsxDEV(BarChart, {\n              data: {\n                data: dailySteps\n              },\n              title: \"Daily Steps\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          id: \"status\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"gauge\",\n            children: /*#__PURE__*/_jsxDEV(GaugeChart, {\n              data: {\n                data: currentDataPoint === null || currentDataPoint === void 0 ? void 0 : currentDataPoint.temperature\n              },\n              number: currentDataPoint === null || currentDataPoint === void 0 ? void 0 : currentDataPoint.temperature,\n              title: \"Body Temperature\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true), avgStages && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        id: \"avgstages\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pie\",\n          children: /*#__PURE__*/_jsxDEV(PieChart, {\n            data: avgStages,\n            title: \"Sleep Quality Average\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this), !avgStages && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        id: \"avgstages\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pie\",\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            backgroundColor: '#333',\n            color: 'white'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Waiting for sleep data...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), currentDataPoint && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          id: \"laststages\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"span\",\n            children: /*#__PURE__*/_jsxDEV(SpanChart, {\n              data: currentStages,\n              title: \"Sleep Stages (Last Night)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          id: \"index\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spider\",\n            children: /*#__PURE__*/_jsxDEV(SpiderChart, {\n              data: wellness,\n              title: \"Wellness Index\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          id: \"activity\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mosaic\",\n            children: /*#__PURE__*/_jsxDEV(MosaicChart, {\n              data: activity\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 276,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"FbtTBWmJnBYqQRlrxInbfAQx6q4=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","useMemo","useRef","MultiChart","GaugeChart","BarChart","PieChart","SpanChart","SpiderChart","MosaicChart","convertTemperatures","calcActivityScore","getLast7Days","calcSleepAverages","calcWellnessIndex","getInitialData","toChartSpans","getStageAtTime","jsxDEV","_jsxDEV","Fragment","_Fragment","Dashboard","_s","minuteSeries","setMinuteSeries","hourSeries","setHourSeries","daySeries","setDaySeries","sleepSeries","setSleepSeries","minuteIndex","setMinuteIndex","hourIndex","setHourIndex","dayIndex","setDayIndex","currentSteps","setCurrentSteps","dailySteps","setDailySteps","currentHour","setCurrentHour","msg","setMsg","temperatures","setTemperatures","allNights","setAllNights","currentStages","setCurrentStages","avgStages","setAvgStages","console","log","activity","setActivity","wellness","setWellness","timeIndex","setTimeIndex","newPoints","setNewPoints","currentDataPoint","setCurrentDataPoint","Promise","all","fetch","then","r","json","data","sleepData","initialData","catch","error","message","length","interval","setInterval","prevMinuteIndex","nextMinuteIndex","currentMinuteData","timestamp","currentTime","date","split","hour","parseInt","slice","minute","prevHourIndex","nextHourIndex","currentHourData","combinedData","stress","temperature","steps","updatedData","last7days","dailyHourlyTotals","forEach","record","day","calories","activityArray","Object","entries","sort","dateA","dateB","localeCompare","map","hourlyTotals","hourlyScores","low","medium","high","totalHours","keys","values","hourData","activityPoints","score","result","Math","round","prev","_lastNight$sleep","lastNight","find","sleep","levels","_lastNight$sleep2","last7Nights","filter","avgSleep","currentDateTime","Date","endsWith","yesterday","getTime","yesterdayStr","toISOString","yesterdayMinuteData","startsWith","yesterdayHourData","wellnessIndex","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","className","id","number","title","style","display","alignItems","justifyContent","backgroundColor","color","_c","$RefreshReg$"],"sources":["C:/Users/jenni.mikkonen/OneDrive - LightningChart Ltd/Repos/lcjs-dashboard/frontend/src/pages/Dashboard.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useEffect, useState, useMemo, useRef } from 'react';\r\nimport '../styles/Dashboard.css';\r\nimport MultiChart from '../components/MultiChart.jsx';\r\nimport GaugeChart from '../components/charts/GaugeChart.jsx';\r\nimport BarChart from '../components/charts/BarChart.jsx'; \r\nimport PieChart from '../components/charts/PieChart.jsx'; \r\nimport SpanChart from '../components/charts/SpanChart.jsx'; \r\nimport SpiderChart from '../components/charts/SpiderChart.jsx'; \r\nimport MosaicChart from '../components/charts/MosaicChart.jsx'; \r\nimport convertTemperatures from '../utils/convertTemperatures.js';\r\nimport calcActivityScore from '../utils/calcActivityScore.js';\r\nimport getLast7Days from '../utils/getLast7Days.js';\r\nimport calcSleepAverages from '../utils/calcSleepAverages.js';\r\nimport calcWellnessIndex from '../utils/calcWellnessIndex.js';\r\nimport getInitialData from '../utils/getInitialData.js';\r\nimport toChartSpans from '../utils/toChartSpans.js';\r\nimport getStageAtTime from '../utils/getStageAtTime.js';\r\n\r\nconst Dashboard = () => {\r\n  // console.log('Dashboard render');\r\n\r\n  const [minuteSeries, setMinuteSeries] = useState([]);\r\n  const [hourSeries, setHourSeries] = useState([]);\r\n  const [daySeries, setDaySeries] = useState([]);\r\n  const [sleepSeries, setSleepSeries] = useState([]);\r\n  const [minuteIndex, setMinuteIndex] = useState(0);\r\n  const [hourIndex, setHourIndex] = useState(0);\r\n  const [dayIndex, setDayIndex] = useState(0);\r\n  const [currentSteps, setCurrentSteps] = useState(0);\r\n  const [dailySteps, setDailySteps] = useState(0);\r\n  const [currentHour, setCurrentHour] = useState(0);\r\n  const [msg, setMsg] = useState(null);\r\n\r\n  const [temperatures, setTemperatures] = useState([]);\r\n  const [allNights, setAllNights] = useState([]);\r\n  const [currentStages, setCurrentStages] = useState(null);\r\n  const [avgStages, setAvgStages] = useState(null);\r\n  \r\n  // Add debugging for avgStages changes\r\n  useEffect(() => {\r\n    console.log(\"avgStages changed:\", avgStages);\r\n  }, [avgStages]);\r\n  const [activity, setActivity] = useState(null);\r\n  const [wellness, setWellness] = useState(null);\r\n  const [timeIndex, setTimeIndex] = useState(0); \r\n  const [newPoints, setNewPoints] = useState(null);\r\n  const [currentDataPoint, setCurrentDataPoint] = useState(null);\r\n\r\n  useEffect(() => { \r\n    console.log(\"Fetching data from backend...\");\r\n    Promise.all([\r\n      fetch(\"/api/data\").then(r => r.json()),\r\n      fetch(\"/api/sleep-data\").then(r => {\r\n        // console.log(\"Sleep data fetch response status:\", r.status);\r\n        return r.json();\r\n      })  // sleep dataset\r\n    ])\r\n    .then(([data, sleepData]) => {\r\n      // console.log(\"Fetched data:\", data);\r\n      // console.log(\"Fetched sleepData:\", sleepData);\r\n      // Convert temperature deviation values to absolute temperature values\r\n      convertTemperatures(data.hourSeries);\r\n    \r\n      // Update state with the fetched data\r\n      setMinuteSeries(data.minuteSeries || []);\r\n      setHourSeries(data.hourSeries || []);\r\n      setDaySeries(data.daySeries || []);\r\n      setSleepSeries(sleepData.daySeries || []);\r\n      // console.log(`Loaded ${data.minuteSeries?.length} minutes, ${data.hourSeries?.length} hours, ${data.daySeries?.length} days, ${sleepData.daySeries?.length} sleeps`);\r\n      \r\n      // Initialize charts with data from the last 7 days of data set (ending 2022-01-21)\r\n      const initialData = getInitialData(data.minuteSeries, data.hourSeries, data.daySeries, sleepData.daySeries);\r\n      setCurrentStages(toChartSpans(initialData.currentStages));\r\n      setAvgStages(initialData.avgStages);\r\n      // setActivity(initialData.activity);\r\n      setWellness(initialData.wellness);\r\n      // console.log(\"Initialized with last 7 days data:\", initialData);\r\n      console.log(\"currentStages set to:\", initialData.currentStages);\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error fetching data:\", error);\r\n      setMsg(\"Error: \" + error.message);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (minuteSeries.length === 0 || hourSeries.length === 0 || daySeries.length === 0) {\r\n      console.log(\"Waiting for all data to load...\");\r\n      return;\r\n    }\r\n\r\n    const interval = setInterval(() => {\r\n      // Update minute data every cycle\r\n      setMinuteIndex(prevMinuteIndex => {\r\n        const nextMinuteIndex = (prevMinuteIndex + 1) % minuteSeries.length;\r\n        const currentMinuteData = minuteSeries[nextMinuteIndex];\r\n\r\n        if(!currentMinuteData?.timestamp) return nextMinuteIndex;\r\n\r\n        setMsg(currentMinuteData.timestamp);\r\n\r\n        const currentTime = currentMinuteData.timestamp;\r\n        const date = currentTime.split('T')[0];\r\n        const hour =  parseInt(currentTime.slice(11, 13));\r\n        const minute = parseInt(currentTime.slice(14, 16));\r\n        // console.log(\"currentTime date hour minute: \", currentTime, date, hour, minute);\r\n\r\n        // Check if hour changed, update hourSeries data\r\n        if (minute === 0)  {\r\n          // console.log(\"New hour\");\r\n          setHourIndex(prevHourIndex => {\r\n            const nextHourIndex = (prevHourIndex + 1) % hourSeries.length;\r\n            const currentHourData = hourSeries[nextHourIndex];\r\n\r\n          // Merge minute and hour data\r\n          const combinedData = {\r\n            ...currentMinuteData,\r\n            stress: currentHourData?.stress,\r\n            temperature: currentHourData?.temperature,\r\n            steps: dailySteps + (currentMinuteData.steps || 0)            \r\n          };\r\n\r\n          setCurrentDataPoint(combinedData);\r\n          setCurrentHour(hour);\r\n          // console.log(\"currentDataPoint (hour update)\", combinedData);\r\n\r\n          return nextHourIndex;\r\n          });\r\n        } else {\r\n          // Just update with minute data + accumulated steps\r\n          const updatedData = {\r\n            ...currentMinuteData,\r\n            steps: dailySteps + (currentMinuteData.steps || 0)  \r\n          }\r\n          setCurrentDataPoint(updatedData);\r\n          // console.log(\"currentDataPoint (minute update)\", updatedData);\r\n        }\r\n\r\n        // Handle 00:00 updates\r\n        if (hour === 0 && minute === 0)  {\r\n          console.log(\"Midnight 00:00\");\r\n\r\n          // Reset daily steps\r\n          setDailySteps(0);\r\n\r\n          // Update MosaicChart with 7-day activity data\r\n          const last7days = getLast7Days(minuteSeries,  currentTime);  //currentTime \"2021-05-24T00:00:00Z\"\r\n          // console.log(\"last7days: \", last7days);\r\n          \r\n          // Group by day and hour, calculate hourly totals\r\n          const dailyHourlyTotals = {};\r\n          last7days.forEach(record => {\r\n            const day = record.timestamp.split('T')[0];  //day \"2021-02-12\"\r\n            const hour = parseInt(record.timestamp.slice(11, 13)); // Extract hour\r\n            \r\n            if (!dailyHourlyTotals[day]) {\r\n              dailyHourlyTotals[day] = {};\r\n            }\r\n            if (!dailyHourlyTotals[day][hour]) {\r\n              dailyHourlyTotals[day][hour] = { calories: 0, steps: 0 };\r\n            }\r\n            \r\n            dailyHourlyTotals[day][hour].calories += record.calories || 0;\r\n            dailyHourlyTotals[day][hour].steps += record.steps || 0;\r\n          });\r\n\r\n          // Calculate activity percentages for each day\r\n          const activityArray = Object.entries(dailyHourlyTotals)\r\n            .sort(([dateA], [dateB]) => dateA.localeCompare(dateB)) // Sort by date\r\n            .map(([date, hourlyTotals]) => {\r\n              const hourlyScores = { low: 0, medium: 0, high: 0 };\r\n              const totalHours = Object.keys(hourlyTotals).length;\r\n              \r\n              // Calculate score for each hour\r\n              Object.values(hourlyTotals).forEach(hourData => {\r\n                const activityPoints = (hourData.calories * 0.1) + (hourData.steps * 0.005);\r\n                const score = calcActivityScore(hourData.calories, hourData.steps);\r\n                // console.log(`Hour data: calories=${hourData.calories}, steps=${hourData.steps}, points=${activityPoints}, score=${score}`);\r\n                hourlyScores[score]++;\r\n              });\r\n              \r\n              // Convert to percentages\r\n              const result = {\r\n                date: date,\r\n                low: Math.round((hourlyScores.low / totalHours) * 100),\r\n                medium: Math.round((hourlyScores.medium / totalHours) * 100),\r\n                high: Math.round((hourlyScores.high / totalHours) * 100),\r\n                totalHours: totalHours\r\n              };\r\n              // console.log(`Day ${date}: ${hourlyScores.low}/${hourlyScores.medium}/${hourlyScores.high} out of ${totalHours} hours = ${result.low}%/${result.medium}%/${result.high}%`);\r\n              return result;\r\n            });\r\n\r\n          // console.log(\"activityArray: \", activityArray);\r\n          setActivity(activityArray);\r\n        } else {\r\n          // Accumulate steps throughout the day\r\n          setDailySteps(prev => prev + (currentMinuteData.steps || 0));\r\n        }\r\n\r\n        // Handle 08:00 updates\r\n        if (hour === 8 && minute === 0) {\r\n          console.log(\"Eight AM 08:00\");\r\n\r\n          // Find last night's sleep data\r\n          const lastNight = sleepSeries.find(day => day.date === date);\r\n          console.log(\"lastnight sleep: \", lastNight.sleep)\r\n\r\n          if (lastNight?.sleep?.levels) {\r\n            setCurrentStages(toChartSpans(lastNight.sleep.levels));\r\n            console.log(\"8 AM lastNight.sleep:\", lastNight.sleep)\r\n            console.log(\"8 AM lastNight.sleep.levels:\", lastNight.sleep?.levels)\r\n\r\n            // Calculate 7-night average\r\n            const last7Nights = getLast7Days(sleepSeries, currentTime).filter(day => day.sleep)\r\n            const avgSleep = calcSleepAverages(last7Nights)\r\n            console.log(\"8 AM update - avgSleep:\", avgSleep);\r\n            \r\n            if (avgSleep) {\r\n              console.log(\"8 AM update - setting avgStages directly from calcSleepAverages\");\r\n              setAvgStages(avgSleep);\r\n            } else {\r\n              console.log(\"8 AM update - no avgSleep data available\");\r\n            }\r\n\r\n            // console.log(\"Updated sleep data:\", { lastNight: lastNight.sleep, average: avgSleep });\r\n          } else {\r\n            console.log(\"No sleep data found for\", date);\r\n          }\r\n\r\n          // Get yesterday's data for wellness calculation\r\n          const currentDateTime = new Date(currentTime + (currentTime.endsWith('Z') ? '' : 'Z'));\r\n          const yesterday = new Date(currentDateTime.getTime() - (24 * 60 * 60 * 1000));\r\n          const yesterdayStr = yesterday.toISOString().split('T')[0];\r\n          // console.log(\"lastnight sleep: \", lastNight.sleep)\r\n\r\n          // Get yesterday's minute data\r\n          const yesterdayMinuteData = minuteSeries.filter(record => \r\n            record?.timestamp && record.timestamp.startsWith(yesterdayStr)\r\n          );\r\n          // console.log(\"yesterdayMinuteData: \", yesterdayMinuteData)\r\n\r\n          // Get yesterday's hour data  \r\n          const yesterdayHourData = hourSeries.filter(record =>\r\n            record?.timestamp && record.timestamp.startsWith(yesterdayStr)\r\n          );\r\n          // console.log(\"yesterdayHourData: \", yesterdayHourData)\r\n          \r\n          // Calculate wellness index for yesterday\r\n          const wellnessIndex = calcWellnessIndex(\r\n            yesterdayMinuteData, \r\n            lastNight.sleep, \r\n            yesterdayHourData\r\n          );\r\n          \r\n          setWellness(wellnessIndex);\r\n          console.log(\"Updated wellness index:\", wellnessIndex);\r\n        }\r\n\r\n        setCurrentSteps(currentMinuteData.steps);\r\n      \r\n        return nextMinuteIndex;\r\n      });\r\n    }, 16); // 0.1 second = 1 simulated minute\r\n\r\n    return () => clearInterval(interval);\r\n  }, [minuteSeries, hourSeries, daySeries]);\r\n\r\n  if (minuteSeries.length === 0) {\r\n    console.log(\"Loading data, minuteSeries.length:\", minuteSeries.length);\r\n    return <p>Loading data…</p>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"dashboard-grid\">\r\n      {currentDataPoint && (\r\n      <> \r\n        <div className=\"card\" id=\"multi\">\r\n          <MultiChart data={currentDataPoint} steps={currentSteps} />\r\n      </div>\r\n        <div className=\"card\" id=\"stress\">\r\n          <div className=\"gauge\">\r\n            <GaugeChart data={{ data: currentDataPoint?.stress }} number={currentDataPoint?.stress} title=\"Stress Level\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"card\" id=\"steps\">\r\n          <div className=\"bar\">\r\n            <BarChart data={{ data: dailySteps }} title=\"Daily Steps\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"card\" id=\"status\">\r\n          <div className=\"gauge\">\r\n            <GaugeChart data={{ data: currentDataPoint?.temperature }} number={currentDataPoint?.temperature} title=\"Body Temperature\" />\r\n          </div>         \r\n        </div>\r\n      </>\r\n      )}\r\n      {avgStages && (\r\n        <div className=\"card\" id=\"avgstages\">\r\n          <div className=\"pie\">\r\n            <PieChart data={avgStages} title=\"Sleep Quality Average\"/>\r\n          </div> \r\n        </div>\r\n      )}\r\n      {!avgStages && (\r\n        <div className=\"card\" id=\"avgstages\">\r\n          <div className=\"pie\" style={{display: 'flex', alignItems: 'center', justifyContent: 'center', backgroundColor: '#333', color: 'white'}}>\r\n            <p>Waiting for sleep data...</p>\r\n          </div> \r\n        </div>\r\n      )}\r\n      {currentDataPoint && (\r\n      <>\r\n        <div className=\"card\" id=\"laststages\">\r\n          <div className=\"span\">\r\n            <SpanChart data={currentStages} title=\"Sleep Stages (Last Night)\"/>\r\n          </div> \r\n        </div>\r\n        <div className=\"card\" id=\"index\">\r\n          <div className=\"spider\">\r\n            <SpiderChart data={wellness} title=\"Wellness Index\"/>\r\n          </div> \r\n        </div>\r\n        <div className=\"card\" id=\"activity\">\r\n          <div className=\"mosaic\">\r\n            <MosaicChart data={activity}/>\r\n          </div> \r\n        </div>\r\n      </>\r\n      )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}