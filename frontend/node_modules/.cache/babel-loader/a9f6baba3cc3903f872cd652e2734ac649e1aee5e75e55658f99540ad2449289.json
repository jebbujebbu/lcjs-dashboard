{"ast":null,"code":"// Helper function to calculate wellness index scores\nexport default function calcWellnessIndex(minuteData, hourData, sleepData) {\n  // Sleep quality (0-100), based on sleep stages duration\n  let sleepQuality = 0;\n  if (sleepData !== null && sleepData !== void 0 && sleepData.levels) {\n    const totalSleepMinutes = sleepData.levels.reduce((total, level) => {\n      const start = new Date(level.start);\n      const end = new Date(level.end);\n      const minutes = (end - start) / (1000 * 60);\n      return total + minutes;\n    }, 0);\n    const deepSleepMinutes = sleepData.levels.filter(level => level.stage === 'deep').reduce((total, level) => {\n      const start = new Date(level.start);\n      const end = new Date(level.end);\n      return total + (end - start) / (1000 * 60);\n    }, 0);\n    const remSleepMinutes = sleepData.levels.filter(level => level.stage === 'rem').reduce((total, level) => {\n      const start = new Date(level.start);\n      const end = new Date(level.end);\n      return total + (end - start) / (1000 * 60);\n    }, 0);\n\n    // Calculate sleep quality based on deep and REM sleep percentages\n    const deepPercentage = deepSleepMinutes / totalSleepMinutes * 100;\n    const remPercentage = remSleepMinutes / totalSleepMinutes * 100;\n    sleepQuality = Math.min(100, deepPercentage * 1.5 + remPercentage * 1.2);\n  }\n\n  // Heart Rate (0-100), based on average heart rate from minute data\n  const validHeartRateRecords = minuteData ? minuteData.filter(record => record.heart_rate && record.heart_rate > 0) : [];\n  const avgHeartRate = validHeartRateRecords.length > 0 ? validHeartRateRecords.reduce((sum, record) => sum + record.heart_rate, 0) / validHeartRateRecords.length : 70;\n\n  // Score heart rate (ideal resting HR around 60-70)\n  const heartRateScore = Math.max(0, Math.min(100, 100 - Math.abs(avgHeartRate - 65) * 2));\n\n  // Stress Level (0-100), based on average stress from hour data\n  const validStressRecords = hourData ? hourData.filter(record => record.stress !== undefined && record.stress !== null) : [];\n  const avgStress = validStressRecords.length > 0 ? validStressRecords.reduce((sum, record) => sum + record.stress, 0) / validStressRecords.length : 50;\n  const stressScore = Math.max(0, Math.min(100, 100 - avgStress));\n\n  // Activity (0-100), based on total steps from minute data\n  const validStepsRecords = minuteData ? minuteData.filter(record => record.steps && record.steps >= 0) : [];\n  const totalSteps = validStepsRecords.length > 0 ? validStepsRecords.reduce((sum, record) => sum + record.steps, 0) : 0;\n  const activityScore = Math.min(100, totalSteps / 10000 * 100); // 10k steps = 100%\n\n  return {\n    sleepQuality: Math.round(sleepQuality),\n    heartRate: Math.round(heartRateScore),\n    stressLevel: Math.round(stressScore),\n    activity: Math.round(activityScore)\n  };\n}\n;","map":{"version":3,"names":["calcWellnessIndex","minuteData","hourData","sleepData","sleepQuality","levels","totalSleepMinutes","reduce","total","level","start","Date","end","minutes","deepSleepMinutes","filter","stage","remSleepMinutes","deepPercentage","remPercentage","Math","min","validHeartRateRecords","record","heart_rate","avgHeartRate","length","sum","heartRateScore","max","abs","validStressRecords","stress","undefined","avgStress","stressScore","validStepsRecords","steps","totalSteps","activityScore","round","heartRate","stressLevel","activity"],"sources":["D:/Repos/lcjs-dashboard/frontend/src/utils/calcWellnessIndex.js"],"sourcesContent":["// Helper function to calculate wellness index scores\r\nexport default function calcWellnessIndex(minuteData, hourData, sleepData) {\r\n  // Sleep quality (0-100), based on sleep stages duration\r\n  let sleepQuality = 0;\r\n  if (sleepData?.levels) {\r\n    const totalSleepMinutes = sleepData.levels.reduce((total, level) => {\r\n      const start = new Date(level.start);\r\n      const end = new Date(level.end);\r\n      const minutes = (end - start) / (1000 * 60);\r\n      return total + minutes;\r\n    }, 0);\r\n    \r\n    const deepSleepMinutes = sleepData.levels\r\n      .filter(level => level.stage === 'deep')\r\n      .reduce((total, level) => {\r\n        const start = new Date(level.start);\r\n        const end = new Date(level.end);\r\n        return total + (end - start) / (1000 * 60);\r\n      }, 0);\r\n    \r\n    const remSleepMinutes = sleepData.levels\r\n      .filter(level => level.stage === 'rem')\r\n      .reduce((total, level) => {\r\n        const start = new Date(level.start);\r\n        const end = new Date(level.end);\r\n        return total + (end - start) / (1000 * 60);\r\n      }, 0);\r\n    \r\n    // Calculate sleep quality based on deep and REM sleep percentages\r\n    const deepPercentage = (deepSleepMinutes / totalSleepMinutes) * 100;\r\n    const remPercentage = (remSleepMinutes / totalSleepMinutes) * 100;\r\n    sleepQuality = Math.min(100, (deepPercentage * 1.5) + (remPercentage * 1.2));\r\n  }\r\n\r\n  // Heart Rate (0-100), based on average heart rate from minute data\r\n  const validHeartRateRecords = minuteData ? \r\n    minuteData.filter(record => record.heart_rate && record.heart_rate > 0) : [];\r\n  const avgHeartRate = validHeartRateRecords.length > 0 ? \r\n    (validHeartRateRecords.reduce((sum, record) => sum + record.heart_rate, 0) / validHeartRateRecords.length) : 70;\r\n  \r\n  // Score heart rate (ideal resting HR around 60-70)\r\n  const heartRateScore = Math.max(0, Math.min(100, 100 - Math.abs(avgHeartRate - 65) * 2));\r\n\r\n  // Stress Level (0-100), based on average stress from hour data\r\n  const validStressRecords = hourData ? \r\n    hourData.filter(record => record.stress !== undefined && record.stress !== null) : [];\r\n  const avgStress = validStressRecords.length > 0 ? \r\n    (validStressRecords.reduce((sum, record) => sum + record.stress, 0) / validStressRecords.length) : 50;\r\n  const stressScore = Math.max(0, Math.min(100, 100 - avgStress));\r\n\r\n  // Activity (0-100), based on total steps from minute data\r\n  const validStepsRecords = minuteData ? \r\n    minuteData.filter(record => record.steps && record.steps >= 0) : [];\r\n  const totalSteps = validStepsRecords.length > 0 ? \r\n    validStepsRecords.reduce((sum, record) => sum + record.steps, 0) : 0;\r\n  const activityScore = Math.min(100, (totalSteps / 10000) * 100); // 10k steps = 100%\r\n  \r\n  return {\r\n    sleepQuality: Math.round(sleepQuality),\r\n    heartRate: Math.round(heartRateScore),\r\n    stressLevel: Math.round(stressScore),\r\n    activity: Math.round(activityScore)\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}